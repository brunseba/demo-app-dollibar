name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yamllint shellcheck-py dockerfile-parse

      - name: Lint YAML files
        run: |
          find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed

      - name: Lint Shell scripts
        run: |
          find . -name "*.sh" | xargs shellcheck

      - name: Validate Docker Compose
        run: |
          if [ -f docker-compose.yml ]; then
            docker-compose -f docker-compose.yml config --quiet
          fi
          if [ -f docker-compose.prod.yml ]; then
            docker-compose -f docker-compose.prod.yml config --quiet
          fi

      - name: Validate Dockerfile
        run: |
          if [ -f Dockerfile ]; then
            docker run --rm -i hadolint/hadolint < Dockerfile
          fi

  test-documentation:
    name: Test Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install MkDocs dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin mkdocs-git-revision-date-localized-plugin

      - name: Test MkDocs build
        run: mkdocs build --strict --verbose

      - name: Check for broken links
        run: |
          # Install markdown-link-check
          npm install -g markdown-link-check
          # Check all markdown files
          find docs -name "*.md" -exec markdown-link-check {} \;

  docker-build-test:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint-and-validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          if [ -f docker-compose.yml ]; then
            docker-compose build --no-cache
          fi

      - name: Test Docker containers
        run: |
          if [ -f docker-compose.yml ]; then
            # Start containers
            docker-compose up -d
            
            # Wait for services to be ready
            sleep 30
            
            # Check if containers are running
            docker-compose ps
            
            # Basic health checks
            if [ "$(docker-compose ps -q dolibarr)" ]; then
              echo "✅ Dolibarr container is running"
              # Test HTTP endpoint
              docker-compose exec -T dolibarr curl -f http://localhost:80 || echo "⚠️ HTTP check failed"
            fi
            
            if [ "$(docker-compose ps -q mariadb)" ]; then
              echo "✅ MariaDB container is running"
              # Test database connection
              docker-compose exec -T mariadb mysql -u root -proot -e "SELECT 1;" || echo "⚠️ Database check failed"
            fi
            
            # Clean up
            docker-compose down -v
          fi

  basic-test:
    name: Basic Test
    runs-on: ubuntu-latest
    needs: [lint-and-validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run basic validation
        run: |
          echo "✅ Basic validation passed"
          echo "Repository structure looks good"

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-validate, test-documentation, docker-build-test, basic-test]
    if: always()
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.lint-and-validate.result }}" == "success" && \
                "${{ needs.test-documentation.result }}" == "success" && \
                "${{ needs.docker-build-test.result }}" == "success" && \
                "${{ needs.basic-test.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed!"
            echo "Lint and Validate: ${{ needs.lint-and-validate.result }}"
            echo "Test Documentation: ${{ needs.test-documentation.result }}"
            echo "Docker Build Test: ${{ needs.docker-build-test.result }}"
            echo "Basic Test: ${{ needs.basic-test.result }}"
            exit 1
          fi
