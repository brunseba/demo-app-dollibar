name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains alpha, beta, rc, pre)
          if [[ "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "üì¶ Preparing release for version: $VERSION"
          echo "üè∑Ô∏è Tag: $TAG"
          echo "üß™ Pre-release: ${{ steps.get-version.outputs.is-prerelease }}"

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.prepare-release.outputs.version }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.prepare-release.outputs.tag }}"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Generate changelog using git log
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Create a formatted changelog
          cat << EOF > changelog.md
          ## What's Changed
          
          $CHANGELOG
          
          ## Docker Images
          
          - \`ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}\`
          - \`ghcr.io/${{ github.repository }}:latest\`
          
          ## Full Changelog
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${CURRENT_TAG}
          EOF
          
          # Output for GitHub release
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Upload changelog as artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-push-images, generate-changelog]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: Release ${{ needs.prepare-release.outputs.tag }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
          files: |
            artifacts/sbom/sbom.spdx.json
            artifacts/changelog/changelog.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version references
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          
          # Update version in docs if version files exist
          if [ -f docs/version.md ]; then
            echo "Current version: $VERSION" > docs/version.md
          fi
          
          # Update README.md with latest version
          if [ -f README.md ]; then
            sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/g" README.md
          fi
          
          # Update docker-compose examples
          find . -name "docker-compose*.yml" -exec sed -i "s/dolibarr:[0-9]\+\.[0-9]\+\.[0-9]\+/dolibarr:$VERSION/g" {} \;

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "docs: update version references to ${{ needs.prepare-release.outputs.version }}"
          git push

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()
    steps:
      - name: Release notification
        run: |
          echo "üéâ Release ${{ needs.prepare-release.outputs.tag }} has been created!"
          echo "üì¶ Docker images are available at:"
          echo "   - ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}"
          echo "   - ghcr.io/${{ github.repository }}:latest"
          echo "üìù Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}"
