name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

# No Docker builds - removed registry configuration

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
      is-prerelease: ${{ steps.get-version.outputs.is-prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          # Check if this is a pre-release (contains alpha, beta, rc, pre)
          if [[ "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "üì¶ Preparing release for version: $VERSION"
          echo "üè∑Ô∏è Tag: $TAG"
          echo "üß™ Pre-release: ${{ steps.get-version.outputs.is-prerelease }}"

  # Docker build job removed - no container images built

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.prepare-release.outputs.tag }}"

          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"

          # Generate changelog using git log
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi

          # Create a formatted changelog
          cat << EOF > changelog.md
          ## What's Changed

          $CHANGELOG

          ## Documentation

          - üìö Live documentation: https://brun_s.github.io/dollibar/
          - üîÑ Auto-updates with each release

          ## Full Changelog

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${CURRENT_TAG}
          EOF

          # Output for GitHub release
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Upload changelog as artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, generate-changelog]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: Release ${{ needs.prepare-release.outputs.tag }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
          files: |
            artifacts/changelog/changelog.md
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version references
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"

          # Update version in docs if version files exist
          if [ -f docs/version.md ]; then
            echo "Current version: $VERSION" > docs/version.md
          fi

          # Update README.md with latest version
          if [ -f README.md ]; then
            sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/g" README.md
          fi

          # Update docker-compose examples
          find . -name "docker-compose*.yml" -exec sed -i "s/dolibarr:[0-9]\+\.[0-9]\+\.[0-9]\+/dolibarr:$VERSION/g" {} \;

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "docs: update version references to ${{ needs.prepare-release.outputs.version }}"
          git push

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()
    steps:
      - name: Release notification
        run: |
          echo "üéâ Release ${{ needs.prepare-release.outputs.tag }} has been created!"
          echo "üìö Documentation updated at: https://brun_s.github.io/dollibar/"
          echo "üìù Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}"
