version: '3'

vars:
  BACKUP_DIR: ./backups
  TIMESTAMP: '{{now | date "2006-01-02_15-04-05"}}'
  COMPOSE_FILE: docker-compose.yml

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Setup and initialization tasks
  init:
    desc: Initialize Dolibarr setup (create directories and set permissions)
    cmds:
      - mkdir -p custom logs db-init {{.BACKUP_DIR}}
      - chmod 755 custom logs db-init {{.BACKUP_DIR}}
      - echo "‚úÖ Dolibarr directories initialized"

  # Start/Stop services tasks
  start:
    desc: Start Dolibarr with internal database
    cmds:
      - docker-compose --profile internal-db up -d
      - echo "‚úÖ Dolibarr started with internal database"

  start-with-tools:
    desc: Start Dolibarr with internal database and phpMyAdmin
    cmds:
      - docker-compose --profile internal-db --profile internal-db-tools up -d
      - echo "‚úÖ Dolibarr started with internal database and phpMyAdmin"

  start-external:
    desc: Start Dolibarr with external database
    cmds:
      - docker-compose --profile external-db up -d
      - echo "‚úÖ Dolibarr started with external database"

  stop:
    desc: Stop all Dolibarr services
    cmds:
      - docker-compose down
      - echo "‚úÖ Dolibarr services stopped"

  # Status and logs tasks
  status:
    desc: Show status of all services
    cmds:
      - docker-compose ps

  logs:
    desc: Show logs from all services
    cmds:
      - docker-compose logs -f

  logs-app:
    desc: Show Dolibarr application logs
    cmds:
      - docker-compose logs -f dolibarr

  logs-db:
    desc: Show database logs
    cmds:
      - docker-compose logs -f dolibarr-db

  # Backup tasks
  backup:
    desc: Create complete backup (database + application data)
    deps: [backup-db, backup-app]
    cmds:
      - echo "‚úÖ Complete backup created in {{.BACKUP_DIR}}/{{.TIMESTAMP}}"

  backup-db:
    desc: Create database backup
    preconditions:
      - sh: docker-compose ps dolibarr-db | grep -q "Up"
        msg: "Database container is not running. Start with: task start"
    cmds:
      - mkdir -p {{.BACKUP_DIR}}/{{.TIMESTAMP}}
      - |
        docker-compose exec -T dolibarr-db mysqldump \
          -u root \
          -p$DB_ROOT_PASSWORD \
          --single-transaction \
          --routines \
          --triggers \
          dolibarr > {{.BACKUP_DIR}}/{{.TIMESTAMP}}/database_{{.TIMESTAMP}}.sql
      - gzip {{.BACKUP_DIR}}/{{.TIMESTAMP}}/database_{{.TIMESTAMP}}.sql
      - echo "‚úÖ Database backup created: {{.BACKUP_DIR}}/{{.TIMESTAMP}}/database_{{.TIMESTAMP}}.sql.gz"

  backup-app:
    desc: Create application data backup (documents, custom modules)
    cmds:
      - mkdir -p {{.BACKUP_DIR}}/{{.TIMESTAMP}}
      - |
        docker run --rm \
          -v dolibarr_dolibarr-documents:/source/documents:ro \
          -v dolibarr_dolibarr-html:/source/html:ro \
          -v $(pwd)/custom:/source/custom:ro \
          -v $(pwd)/{{.BACKUP_DIR}}/{{.TIMESTAMP}}:/backup \
          alpine:latest \
          sh -c "
            cd /backup && \
            tar -czf app_data_{{.TIMESTAMP}}.tar.gz \
              -C /source documents html custom && \
            echo 'Application data backup completed'
          "
      - echo "‚úÖ Application backup created: {{.BACKUP_DIR}}/{{.TIMESTAMP}}/app_data_{{.TIMESTAMP}}.tar.gz"

  # Restore tasks
  restore-db:
    desc: Restore database from backup (usage: task restore-db BACKUP_FILE=path/to/backup.sql.gz)
    requires:
      vars: [BACKUP_FILE]
    preconditions:
      - sh: test -f {{.BACKUP_FILE}}
        msg: "Backup file {{.BACKUP_FILE}} does not exist"
      - sh: docker-compose ps dolibarr-db | grep -q "Up"
        msg: "Database container is not running. Start with: task start"
    cmds:
      - |
        if [[ "{{.BACKUP_FILE}}" == *.gz ]]; then
          gunzip -c {{.BACKUP_FILE}} | docker-compose exec -T dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD dolibarr
        else
          docker-compose exec -T dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD dolibarr < {{.BACKUP_FILE}}
        fi
      - echo "‚úÖ Database restored from {{.BACKUP_FILE}}"

  restore-app:
    desc: Restore application data from backup (usage: task restore-app BACKUP_FILE=path/to/backup.tar.gz)
    requires:
      vars: [BACKUP_FILE]
    preconditions:
      - sh: test -f {{.BACKUP_FILE}}
        msg: "Backup file {{.BACKUP_FILE}} does not exist"
    cmds:
      - task: stop
      - |
        docker run --rm \
          -v dolibarr_dolibarr-documents:/target/documents \
          -v dolibarr_dolibarr-html:/target/html \
          -v $(pwd)/custom:/target/custom \
          -v $(pwd)/{{.BACKUP_FILE | dir}}:/backup:ro \
          alpine:latest \
          sh -c "
            cd /target && \
            tar -xzf /backup/{{.BACKUP_FILE | base}} && \
            echo 'Application data restore completed'
          "
      - echo "‚úÖ Application data restored from {{.BACKUP_FILE}}"
      - echo "‚ö†Ô∏è  Remember to restart services: task start"

  # Reset and cleanup tasks
  reset-data:
    desc: Reset all data (DANGEROUS - removes all volumes and data)
    prompt: This will delete ALL Dolibarr data including database and documents. Continue?
    cmds:
      - task: stop
      - docker-compose down -v
      - docker volume prune -f
      - rm -rf logs/*
      - echo "‚úÖ All data reset. Use 'task start' to initialize fresh installation"

  reset-logs:
    desc: Clear application logs
    cmds:
      - rm -rf logs/*
      - mkdir -p logs
      - echo "‚úÖ Application logs cleared"

  reset-custom:
    desc: Clear custom modules (keeps directory structure)
    prompt: This will delete all custom Dolibarr modules. Continue?
    cmds:
      - find custom -type f -name "*.php" -delete 2>/dev/null || true
      - find custom -type f -name "*.js" -delete 2>/dev/null || true
      - find custom -type f -name "*.css" -delete 2>/dev/null || true
      - find custom -mindepth 1 -type d -empty -delete 2>/dev/null || true
      - echo "‚úÖ Custom modules cleared"

  # Maintenance tasks
  cleanup:
    desc: Clean up Docker resources (images, containers, networks)
    cmds:
      - docker-compose down --rmi local --volumes --remove-orphans
      - docker system prune -f
      - echo "‚úÖ Docker cleanup completed"

  update:
    desc: Update Dolibarr containers to latest versions
    cmds:
      - docker-compose pull
      - docker-compose up -d --force-recreate
      - echo "‚úÖ Containers updated and restarted"

  # Utility tasks
  shell-app:
    desc: Open shell in Dolibarr application container
    preconditions:
      - sh: docker-compose ps dolibarr | grep -q "Up"
        msg: "Dolibarr container is not running. Start with: task start"
    cmds:
      - docker-compose exec dolibarr bash

  shell-db:
    desc: Open MySQL shell in database container
    preconditions:
      - sh: docker-compose ps dolibarr-db | grep -q "Up"
        msg: "Database container is not running. Start with: task start"
    cmds:
      - docker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD dolibarr

  permissions:
    desc: Fix file permissions for Dolibarr
    preconditions:
      - sh: docker-compose ps dolibarr | grep -q "Up"
        msg: "Dolibarr container is not running. Start with: task start"
    cmds:
      - docker-compose exec dolibarr chown -R www-data:www-data /var/www/html
      - docker-compose exec dolibarr chown -R www-data:www-data /var/www/documents
      - echo "‚úÖ File permissions fixed"

  # Health check tasks
  health:
    desc: Check health of all services
    cmds:
      - echo "üîç Checking service health..."
      - docker-compose ps
      - echo ""
      - echo "üåê Testing web access..."
      - curl -s -o /dev/null -w "Dolibarr web interface: %{http_code}\n" http://localhost:${DOLIBARR_PORT:-8080} || echo "Dolibarr web interface: unreachable"
      - curl -s -o /dev/null -w "phpMyAdmin: %{http_code}\n" http://localhost:${PHPMYADMIN_PORT:-8081} || echo "phpMyAdmin: not available"

  # List backups
  list-backups:
    desc: List available backups
    cmds:
      - |
        if [ -d "{{.BACKUP_DIR}}" ]; then
          echo "üìÅ Available backups:"
          ls -la {{.BACKUP_DIR}}/
        else
          echo "No backups directory found. Run 'task backup' to create first backup."
        fi
