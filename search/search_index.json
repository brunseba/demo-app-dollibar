{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dolibarr Docker Compose Setup","text":"<p>This repository contains a Docker Compose setup for running Dolibarr ERP/CRM with an external MariaDB database.</p>"},{"location":"#what-is-dolibarr","title":"What is Dolibarr?","text":"<p>Dolibarr is a modern, open-source ERP (Enterprise Resource Planning) and CRM (Customer Relationship Management) software designed for small and medium-sized businesses, foundations, and freelancers.</p>"},{"location":"#key-features","title":"Key Features:","text":"<ul> <li>\ud83d\udc65 Customer/Supplier Management: Complete contact and relationship management</li> <li>\ud83d\udcb0 Financial Management: Invoicing, payments, accounting, and reporting</li> <li>\ud83d\udce6 Inventory &amp; Stock: Product catalog, stock management, and warehouse operations</li> <li>\ud83d\uded2 Sales &amp; Purchasing: Quotes, orders, deliveries, and supplier management</li> <li>\ud83d\udc68\u200d\ud83d\udcbc HR &amp; Payroll: Employee management, leave tracking, and expense reports</li> <li>\ud83d\udcca Reporting &amp; Analytics: Built-in reports and business intelligence</li> <li>\ud83d\udd27 Modular Design: Enable only the modules you need</li> <li>\ud83c\udf0d Multi-language: Available in 50+ languages</li> <li>\ud83d\udcf1 Responsive: Web-based interface that works on all devices</li> </ul>"},{"location":"#why-choose-dolibarr","title":"Why Choose Dolibarr?","text":"<ul> <li>\u2705 Open Source: No licensing fees, full control over your data</li> <li>\u2705 Easy to Use: Intuitive interface designed for non-technical users</li> <li>\u2705 Highly Customizable: Extensive module system and custom fields</li> <li>\u2705 Active Community: Large community with regular updates and support</li> <li>\u2705 Scalable: Grows with your business needs</li> </ul> <p>Official Website: https://www.dolibarr.org</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Externalized Database: MariaDB running in a separate container</li> <li>Persistent Data: All data persisted using Docker volumes</li> <li>Custom Modules: Support for custom Dolibarr modules</li> <li>Database Management: Optional phpMyAdmin interface</li> <li>Environment Configuration: Fully configurable via environment variables</li> <li>Health Checks: Database health monitoring</li> <li>Security: Proper network isolation and configurable security settings</li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":""},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Docker Host\"\n        subgraph \"Dolibarr Network\"\n            APP[\"\ud83c\udf10 Dolibarr Application&lt;br/&gt;Port: 8080\"]\n            DB[(\"\ud83d\uddc4\ufe0f MariaDB Database&lt;br/&gt;Port: 3306\")]\n            PMA[\"\ud83d\udd27 phpMyAdmin&lt;br/&gt;Port: 8081\"]\n        end\n\n        subgraph \"Docker Volumes\"\n            V1[(\"\ud83d\udcc1 dolibarr-html&lt;br/&gt;Application Files\")]\n            V2[(\"\ud83d\udcc4 dolibarr-documents&lt;br/&gt;User Documents\")]\n            V3[(\"\ud83d\udcbe dolibarr-db-data&lt;br/&gt;Database Storage\")]\n        end\n\n        subgraph \"Host Directories\"\n            CUSTOM[\"\ud83d\udce6 ./custom/&lt;br/&gt;Custom Modules\"]\n            LOGS[\"\ud83d\udccb ./logs/&lt;br/&gt;Application Logs\"]\n            INIT[\"\u2699\ufe0f ./db-init/&lt;br/&gt;DB Init Scripts\"]\n            BACKUP[\"\ud83d\udcbe ./backups/&lt;br/&gt;Backup Storage\"]\n        end\n    end\n\n    subgraph \"External\"\n        USER[\"\ud83d\udc64 User\"]\n        ADMIN[\"\ud83d\udc68\u200d\ud83d\udcbc Admin\"]\n        EXTDB[(\"\ud83c\udf10 External Database&lt;br/&gt;MySQL/MariaDB\")]\n    end\n\n    USER --&gt;|\"HTTP:8080\"| APP\n    ADMIN --&gt;|\"HTTP:8081\"| PMA\n    APP --&gt; V1\n    APP --&gt; V2\n    APP --&gt; CUSTOM\n    APP --&gt; LOGS\n    DB --&gt; V3\n    DB --&gt; INIT\n    PMA --&gt; DB\n    APP --&gt;|\"Profile: internal-db\"| DB\n    APP -.-&gt;|\"Profile: external-db\"| EXTDB\n\n    style APP fill:#e1f5fe\n    style DB fill:#f3e5f5\n    style PMA fill:#fff3e0\n    style EXTDB fill:#ffebee</code></pre>"},{"location":"#profile-based-database-selection","title":"Profile-based Database Selection","text":"<pre><code>flowchart LR\n    START([\"Start Dolibarr\"]) --&gt; PROFILE{\"Select Profile\"}\n\n    PROFILE --&gt;|\"--profile internal-db\"| INTERNAL[\"\ud83c\udfe0 Internal Database\"]\n    PROFILE --&gt;|\"--profile external-db\"| EXTERNAL[\"\ud83c\udf10 External Database\"]\n    PROFILE --&gt;|\"--profile internal-db-tools\"| TOOLS[\"\ud83d\udd27 Internal + Tools\"]\n\n    INTERNAL --&gt; ISERVICES[\"Services:&lt;br/&gt;\u2022 Dolibarr App&lt;br/&gt;\u2022 MariaDB Container\"]\n    EXTERNAL --&gt; ESERVICES[\"Services:&lt;br/&gt;\u2022 Dolibarr App&lt;br/&gt;\u2022 External DB Connection\"]\n    TOOLS --&gt; TSERVICES[\"Services:&lt;br/&gt;\u2022 Dolibarr App&lt;br/&gt;\u2022 MariaDB Container&lt;br/&gt;\u2022 phpMyAdmin\"]\n\n    ISERVICES --&gt; RUNNING[\"\u2705 Running\"]\n    ESERVICES --&gt; RUNNING\n    TSERVICES --&gt; RUNNING\n\n    style INTERNAL fill:#c8e6c9\n    style EXTERNAL fill:#ffcdd2\n    style TOOLS fill:#fff9c4\n    style RUNNING fill:#e8f5e8</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Clone and Setup <pre><code>git clone &lt;your-repo&gt; dolibarr-docker\ncd dolibarr-docker\n</code></pre></p> </li> <li> <p>Configure Environment <pre><code># Copy example environment file\ncp .env.example .env\n\n# Edit .env file with your configurations\nnano .env\n</code></pre></p> </li> <li> <p>Update Passwords IMPORTANT: Change the default passwords in <code>.env</code>:</p> </li> <li><code>DB_PASSWORD</code> - Database user password</li> <li><code>DB_ROOT_PASSWORD</code> - Database root password  </li> <li> <p><code>DOLIBARR_ADMIN_PASSWORD</code> - Dolibarr admin password</p> </li> <li> <p>Start Services <pre><code># For internal database (default setup)\ndocker-compose --profile internal-db up -d\n\n# For internal database with phpMyAdmin\ndocker-compose --profile internal-db --profile internal-db-tools up -d\n</code></pre></p> </li> <li> <p>Access Dolibarr</p> </li> <li>Dolibarr: http://localhost:8080</li> <li>phpMyAdmin (optional): http://localhost:8081</li> </ol>"},{"location":"#tools-access","title":"Tools Access","text":"<p>Once your services are running, you can access the following tools:</p> Tool Purpose Default URL Status Check \ud83c\udf10 Dolibarr ERP/CRM Main application interface http://localhost:8080 <code>curl -f http://localhost:8080</code> \ud83d\udd27 phpMyAdmin Database management interface http://localhost:8081 <code>curl -f http://localhost:8081</code> \ud83d\uddc4\ufe0f MariaDB Direct Direct database connection <code>mysql -h localhost -P 3306 -u dolibarr -p</code> <code>mysql -h localhost -P 3306 -e \"SELECT 1\"</code> \ud83d\udccb Task Runner Automation commands <code>task --list</code> <code>task --version</code>"},{"location":"#service-specific-access","title":"Service-Specific Access","text":""},{"location":"#dolibarr-application","title":"\ud83c\udf10 Dolibarr Application","text":"<ul> <li>URL: http://localhost:${DOLIBARR_PORT:-8080}</li> <li>Default Login: admin (configurable via <code>DOLIBARR_ADMIN_LOGIN</code>)</li> <li>Default Password: Set via <code>DOLIBARR_ADMIN_PASSWORD</code> in <code>.env</code></li> <li>First Setup: Follow the installation wizard on first access</li> <li>API Endpoint: http://localhost:${DOLIBARR_PORT:-8080}/api/index.php</li> <li>Documentation: Built-in help available in the interface</li> </ul>"},{"location":"#phpmyadmin-internal-database-only","title":"\ud83d\udd27 phpMyAdmin (Internal Database Only)","text":"<ul> <li>URL: http://localhost:${PHPMYADMIN_PORT:-8081}</li> <li>Username: <code>dolibarr</code> (or your configured <code>DB_USER</code>)</li> <li>Password: Your <code>DB_PASSWORD</code> from <code>.env</code></li> <li>Root Access: Username <code>root</code>, Password from <code>DB_ROOT_PASSWORD</code></li> <li>Available: Only when using <code>--profile internal-db-tools</code></li> </ul>"},{"location":"#database-direct-access","title":"\ud83d\uddc4\ufe0f Database Direct Access","text":"<ul> <li>Internal Database:    <pre><code># Via Docker\ndocker-compose exec dolibarr-db mysql -u root -p\n\n# From host (if port is exposed)\nmysql -h localhost -P 3306 -u dolibarr -p\n</code></pre></li> <li>External Database: Use your existing database client with configured credentials</li> </ul>"},{"location":"#task-automation","title":"\ud83d\udccb Task Automation","text":"<ul> <li>Command: <code>task --list</code> (shows all available tasks)</li> <li>Examples:   <pre><code>task utilities:health        # Check all services\ntask services:logs-app       # View Dolibarr logs\ntask backup:backup           # Create full backup\ntask utilities:shell-app     # Open shell in Dolibarr container\n</code></pre></li> </ul>"},{"location":"#custom-port-configuration","title":"Custom Port Configuration","text":"<p>To use different ports, update your <code>.env</code> file: <pre><code>DOLIBARR_PORT=9080          # Change Dolibarr web port\nPHPMYADMIN_PORT=9081        # Change phpMyAdmin port\nDB_EXTERNAL_PORT=13306      # Change MariaDB external port\n</code></pre></p> <p>Then access via: - Dolibarr: http://localhost:9080 - phpMyAdmin: http://localhost:9081 - Database: <code>mysql -h localhost -P 13306 -u dolibarr -p</code></p>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>DOLIBARR_PORT</code> Dolibarr web port 8080 <code>DB_NAME</code> Database name dolibarr <code>DB_USER</code> Database user dolibarr <code>DB_PASSWORD</code> Database password CHANGE THIS <code>DB_ROOT_PASSWORD</code> Database root password CHANGE THIS <code>DOLIBARR_ADMIN_LOGIN</code> Admin username admin <code>DOLIBARR_ADMIN_PASSWORD</code> Admin password CHANGE THIS <code>TIMEZONE</code> PHP/Application timezone Europe/Paris"},{"location":"#custom-modules","title":"Custom Modules","text":"<p>Place custom Dolibarr modules in the <code>./custom/</code> directory. They will be mounted to <code>/var/www/html/custom</code> in the container.</p>"},{"location":"#database-initialization","title":"Database Initialization","text":"<p>Place SQL initialization scripts in <code>./db-init/</code> directory. They will be executed during database creation.</p>"},{"location":"#using-an-existingexternal-database","title":"Using an Existing/External Database","text":"<p>The setup supports two database modes using Docker Compose profiles: - internal-db: Uses containerized MariaDB (default) - external-db: Connects to your existing database</p>"},{"location":"#external-database-setup","title":"External Database Setup","text":"<ol> <li> <p>Configure External Database Settings    Edit your <code>.env</code> file and update the database variables:    <pre><code>DB_HOST=your-external-database-host\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr_user\nDB_PASSWORD=your-secure-password\nDB_ROOT_PASSWORD=  # Leave empty for external database\n</code></pre></p> </li> <li> <p>Start with External Database Profile <pre><code>docker-compose --profile external-db up -d\n</code></pre></p> </li> <li> <p>Prepare Your External Database</p> </li> <li>Create the database if it doesn't exist</li> <li>Ensure the user has proper permissions</li> <li>Test connectivity from Docker network</li> <li>Verify firewall allows connections from Docker containers</li> </ol>"},{"location":"#database-profile-commands","title":"Database Profile Commands","text":"<pre><code># Internal database (containerized MariaDB)\ndocker-compose --profile internal-db up -d\n\n# Internal database with phpMyAdmin\ndocker-compose --profile internal-db --profile internal-db-tools up -d\n\n# External database (your existing database)\ndocker-compose --profile external-db up -d\n</code></pre>"},{"location":"#backup-restore-workflow","title":"Backup &amp; Restore Workflow","text":"<pre><code>flowchart TD\n    START([\"\ud83d\udd04 Start Backup/Restore\"]) --&gt; CHOICE{\"Operation Type\"}\n\n    CHOICE --&gt;|\"Backup\"| BACKUP_TYPE{\"Backup Type\"}\n    CHOICE --&gt;|\"Restore\"| RESTORE_TYPE{\"Restore Type\"}\n\n    BACKUP_TYPE --&gt;|\"Complete\"| FULL_BACKUP[\"\ud83d\udce6 Full Backup\"]\n    BACKUP_TYPE --&gt;|\"Database Only\"| DB_BACKUP[\"\ud83d\uddc4\ufe0f Database Backup\"]\n    BACKUP_TYPE --&gt;|\"App Data Only\"| APP_BACKUP[\"\ud83d\udcc4 App Data Backup\"]\n\n    FULL_BACKUP --&gt; DB_DUMP[\"\ud83d\udccb mysqldump\"]\n    FULL_BACKUP --&gt; APP_TAR[\"\ud83d\udce6 tar volumes\"]\n    DB_BACKUP --&gt; DB_DUMP\n    APP_BACKUP --&gt; APP_TAR\n\n    DB_DUMP --&gt; COMPRESS[\"\ud83d\udddc\ufe0f gzip compression\"]\n    APP_TAR --&gt; TIMESTAMP[\"\ud83d\udd50 Add timestamp\"]\n    COMPRESS --&gt; TIMESTAMP\n\n    TIMESTAMP --&gt; STORE[\"\ud83d\udcbe Store in ./backups/\"]\n\n    RESTORE_TYPE --&gt;|\"Database\"| DB_RESTORE[\"\ud83d\udd04 Database Restore\"]\n    RESTORE_TYPE --&gt;|\"Application\"| APP_RESTORE[\"\ud83d\udd04 App Data Restore\"]\n\n    DB_RESTORE --&gt; CHECK_DB{\"DB Running?\"}\n    APP_RESTORE --&gt; STOP_SERVICES[\"\u23f9\ufe0f Stop Services\"]\n\n    CHECK_DB --&gt;|\"Yes\"| MYSQL_RESTORE[\"\ud83d\udce5 mysql import\"]\n    CHECK_DB --&gt;|\"No\"| ERROR1[\"\u274c Start DB first\"]\n\n    STOP_SERVICES --&gt; EXTRACT[\"\ud83d\udce6 Extract tar\"]\n    EXTRACT --&gt; RESTART[\"\ud83d\ude80 Restart Services\"]\n\n    MYSQL_RESTORE --&gt; SUCCESS[\"\u2705 Success\"]\n    RESTART --&gt; SUCCESS\n    ERROR1 --&gt; FAIL[\"\u274c Failed\"]\n\n    style FULL_BACKUP fill:#e3f2fd\n    style DB_BACKUP fill:#f3e5f5\n    style APP_BACKUP fill:#fff3e0\n    style SUCCESS fill:#e8f5e8\n    style FAIL fill:#ffebee</code></pre>"},{"location":"#task-automation-workflow","title":"Task Automation Workflow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; TaskSelection\n\n    TaskSelection --&gt; ServiceManagement : Service Tasks\n    TaskSelection --&gt; BackupRestore : Backup/Restore Tasks\n    TaskSelection --&gt; Maintenance : Maintenance Tasks\n    TaskSelection --&gt; Utilities : Utility Tasks\n\n    state ServiceManagement {\n        [*] --&gt; StartServices\n        StartServices --&gt; InternalDB : task start\n        StartServices --&gt; InternalDBTools : task start-with-tools\n        StartServices --&gt; ExternalDB : task start-external\n        InternalDB --&gt; Running\n        InternalDBTools --&gt; Running\n        ExternalDB --&gt; Running\n        Running --&gt; StopServices : task stop\n        StopServices --&gt; [*]\n    }\n\n    state BackupRestore {\n        [*] --&gt; BackupChoice\n        BackupChoice --&gt; CreateBackup : task backup\n        BackupChoice --&gt; RestoreData : task restore-*\n        CreateBackup --&gt; BackupComplete\n        RestoreData --&gt; RestoreComplete\n        BackupComplete --&gt; [*]\n        RestoreComplete --&gt; [*]\n    }\n\n    state Maintenance {\n        [*] --&gt; MaintenanceChoice\n        MaintenanceChoice --&gt; ResetData : task reset-data\n        MaintenanceChoice --&gt; Cleanup : task cleanup\n        MaintenanceChoice --&gt; Update : task update\n        ResetData --&gt; MaintenanceComplete\n        Cleanup --&gt; MaintenanceComplete\n        Update --&gt; MaintenanceComplete\n        MaintenanceComplete --&gt; [*]\n    }\n\n    state Utilities {\n        [*] --&gt; UtilityChoice\n        UtilityChoice --&gt; HealthCheck : task health\n        UtilityChoice --&gt; ViewLogs : task logs\n        UtilityChoice --&gt; OpenShell : task shell-*\n        HealthCheck --&gt; UtilityComplete\n        ViewLogs --&gt; UtilityComplete\n        OpenShell --&gt; UtilityComplete\n        UtilityComplete --&gt; [*]\n    }\n\n    ServiceManagement --&gt; [*]\n    BackupRestore --&gt; [*]\n    Maintenance --&gt; [*]\n    Utilities --&gt; [*]</code></pre>"},{"location":"#task-automation_1","title":"Task Automation","text":"<p>This project includes organized Taskfiles for common operations. Install Task to use these commands:</p> <pre><code># Install Task (macOS)\nbrew install go-task/tap/go-task\n\n# Show all available tasks\ntask\n</code></pre>"},{"location":"#task-organization","title":"Task Organization","text":"<p>Tasks are organized into separate files in the <code>.taskfile/</code> directory for better maintainability:</p> <pre><code>.taskfile/\n\u251c\u2500\u2500 setup.yml        # Initialization and setup tasks\n\u251c\u2500\u2500 services.yml     # Service management (start/stop/status/logs)\n\u251c\u2500\u2500 config.yml       # Dolibarr configuration and module management\n\u251c\u2500\u2500 backup.yml       # Backup and restore operations\n\u251c\u2500\u2500 maintenance.yml  # Cleanup and maintenance tasks\n\u2514\u2500\u2500 utilities.yml    # Utility functions (shell, health checks)\n</code></pre>"},{"location":"#available-task-categories","title":"Available Task Categories","text":""},{"location":"#setup-initialization","title":"\ud83d\ude80 Setup &amp; Initialization","text":"<pre><code>task setup:init               # Initialize Dolibarr directories and permissions\n</code></pre>"},{"location":"#service-management","title":"\u2699\ufe0f Service Management","text":"<pre><code>task services:start           # Start with internal database\ntask services:start-with-tools # Start with internal database + phpMyAdmin\ntask services:start-external  # Start with external database\ntask services:stop            # Stop all services\ntask services:status          # Show service status\ntask services:logs            # Show logs from all services\ntask services:logs-app        # Show Dolibarr application logs\ntask services:logs-db         # Show database logs\n</code></pre>"},{"location":"#backup-restore","title":"\ud83d\udcbe Backup &amp; Restore","text":"<pre><code>task backup:backup            # Create complete backup (database + app data)\ntask backup:backup-db         # Create database backup only\ntask backup:backup-app        # Create application data backup only\ntask backup:list-backups      # List available backups\n# Note: Restore tasks require BACKUP_FILE parameter:\n# task backup:restore-db BACKUP_FILE=path/to/backup.sql.gz\n# task backup:restore-app BACKUP_FILE=path/to/backup.tar.gz\n</code></pre>"},{"location":"#maintenance","title":"\ud83e\uddf9 Maintenance","text":"<pre><code>task maintenance:cleanup      # Clean up Docker resources\ntask maintenance:update       # Update containers to latest versions\ntask maintenance:reset-data   # Reset all data (DANGEROUS)\ntask maintenance:reset-logs   # Clear application logs\ntask maintenance:reset-custom # Clear custom modules\n</code></pre>"},{"location":"#configuration-management","title":"\ud83d\udd27 Configuration Management","text":"<pre><code>task config:enable-modules        # Enable essential business modules (invoices, orders, products, etc.)\ntask config:enable-api           # Enable REST API module with documentation\ntask config:configure-company    # Configure company information and settings\ntask config:setup-dev-environment # Complete one-command development setup\ntask config:show-config          # Display current configuration and enabled modules\ntask config:list-modules         # List all available modules with status\n</code></pre>"},{"location":"#utilities","title":"\ud83d\udd27 Utilities","text":"<pre><code>task utilities:health         # Check health of all services\ntask utilities:shell-app      # Open shell in Dolibarr container\ntask utilities:shell-db       # Open MySQL shell in database container\ntask utilities:permissions    # Fix file permissions for Dolibarr\n</code></pre>"},{"location":"#quick-start-with-tasks","title":"Quick Start with Tasks","text":"<pre><code># 1. Initialize the environment\ntask setup:init\n\n# 2. Start services\ntask services:start-with-tools\n\n# 3. Check health\ntask utilities:health\n\n# 4. View logs if needed\ntask services:logs-app\n\n# 5. Create backup when ready\ntask backup:backup\n</code></pre> <p>Requirements for External Database: - MySQL 5.7+ or MariaDB 10.3+ - UTF8MB4 character set support - User with CREATE, ALTER, INSERT, UPDATE, DELETE, SELECT privileges - Network connectivity from Docker containers</p>"},{"location":"#services","title":"Services","text":""},{"location":"#dolibarr-application_1","title":"Dolibarr Application","text":"<ul> <li>Image: <code>dolibarr/dolibarr:latest</code></li> <li>Port: 8080 (configurable)</li> <li>Volumes: HTML files, documents, custom modules</li> </ul>"},{"location":"#mariadb-database","title":"MariaDB Database","text":"<ul> <li>Image: <code>mariadb:10.11</code></li> <li>Port: 3306 (configurable)</li> <li>Features: Health checks, UTF8MB4 support</li> <li>External Access: Available on configured port for external tools</li> </ul>"},{"location":"#phpmyadmin-optional","title":"phpMyAdmin (Optional)","text":"<ul> <li>Image: <code>phpmyadmin/phpmyadmin:latest</code></li> <li>Port: 8081 (configurable)</li> <li>Usage: Enable with <code>docker-compose --profile tools up -d</code></li> </ul>"},{"location":"#commands","title":"Commands","text":""},{"location":"#start-services","title":"Start Services","text":"<pre><code># Internal database (containerized MariaDB)\ndocker-compose --profile internal-db up -d\n\n# Internal database with phpMyAdmin\ndocker-compose --profile internal-db --profile internal-db-tools up -d\n\n# External database (your existing database)\ndocker-compose --profile external-db up -d\n</code></pre>"},{"location":"#stop-services","title":"Stop Services","text":"<pre><code>docker-compose down\n</code></pre>"},{"location":"#view-logs","title":"View Logs","text":"<pre><code># All services\ndocker-compose logs -f\n\n# Specific service\ndocker-compose logs -f dolibarr\n</code></pre>"},{"location":"#database-backup","title":"Database Backup","text":"<pre><code># Create backup\ndocker-compose exec dolibarr-db mysqldump -u root -p dolibarr &gt; backup.sql\n\n# Restore backup\ndocker-compose exec -T dolibarr-db mysql -u root -p dolibarr &lt; backup.sql\n</code></pre>"},{"location":"#update-containers","title":"Update Containers","text":"<pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre>"},{"location":"#data-persistence","title":"Data Persistence","text":"<p>Data is persisted in the following Docker volumes: - <code>dolibarr-html</code>: Web application files - <code>dolibarr-documents</code>: Document storage - <code>dolibarr-db-data</code>: Database files</p>"},{"location":"#security-considerations","title":"Security Considerations","text":""},{"location":"#production-deployment","title":"Production Deployment","text":"<ol> <li>Change Default Passwords: Update all passwords in <code>.env</code></li> <li>Restrict Database Access: Remove external database port or restrict to specific IPs</li> <li>Use HTTPS: Configure reverse proxy with SSL/TLS</li> <li>Environment Security: Use Docker secrets instead of environment variables</li> <li>Network Security: Use custom networks and firewall rules</li> <li>Regular Updates: Keep containers updated</li> </ol>"},{"location":"#network-security","title":"Network Security","text":"<pre><code># Remove external database access in production\n# Comment out ports section in dolibarr-db service\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check database health\ndocker-compose exec dolibarr-db healthcheck.sh --connect\n\n# Check logs\ndocker-compose logs dolibarr-db\n</code></pre>"},{"location":"#permission-issues","title":"Permission Issues","text":"<pre><code># Fix file permissions\ndocker-compose exec dolibarr chown -R www-data:www-data /var/www/html\n</code></pre>"},{"location":"#reset-installation","title":"Reset Installation","text":"<pre><code># WARNING: This will delete all data\ndocker-compose down -v\ndocker-compose up -d\n</code></pre>"},{"location":"#file-structure","title":"File Structure","text":"<pre><code>.\n\u251c\u2500\u2500 docker-compose.yml      # Main compose configuration with profiles\n\u251c\u2500\u2500 Taskfile.yml           # Main task configuration with includes\n\u251c\u2500\u2500 .taskfile/             # Organized task files\n\u2502   \u251c\u2500\u2500 setup.yml         # Initialization and setup tasks\n\u2502   \u251c\u2500\u2500 services.yml      # Service management tasks\n\u2502   \u251c\u2500\u2500 backup.yml        # Backup and restore operations\n\u2502   \u251c\u2500\u2500 maintenance.yml   # Cleanup and maintenance tasks\n\u2502   \u2514\u2500\u2500 utilities.yml     # Utility functions and health checks\n\u251c\u2500\u2500 .env.example           # Environment variables template\n\u251c\u2500\u2500 .env                    # Environment variables (created from .env.example)\n\u251c\u2500\u2500 .gitignore             # Git ignore patterns\n\u251c\u2500\u2500 backups/               # Backup storage (created at runtime)\n\u251c\u2500\u2500 custom/                # Custom Dolibarr modules\n\u2502   \u2514\u2500\u2500 README.md         # Custom modules documentation\n\u251c\u2500\u2500 db-init/              # Database initialization scripts\n\u2502   \u2514\u2500\u2500 README.md         # Database init documentation\n\u251c\u2500\u2500 logs/                 # Application logs (created at runtime)\n\u2514\u2500\u2500 README.md             # This file\n</code></pre>"},{"location":"#support","title":"Support","text":"<ul> <li>Dolibarr Official Documentation</li> <li>Docker Hub - Dolibarr</li> <li>Dolibarr Community Forums</li> </ul>"},{"location":"#license","title":"License","text":"<p>This Docker setup is provided as-is. Dolibarr is licensed under GPL v3.</p>"},{"location":"api-integration-examples/","title":"Dolibarr API Integration Examples","text":"<p>This document provides practical examples of integrating with the Dolibarr REST API, including common patterns, code examples, and best practices.</p>"},{"location":"api-integration-examples/#api-setup","title":"API Setup","text":""},{"location":"api-integration-examples/#enabling-the-api","title":"Enabling the API","text":"<pre><code># Enable API module\ntask config:enable-api\n\n# Check API status\ntask config:show-config\n\n# Access API documentation\n# http://localhost:18080/api/index.php/explorer\n</code></pre>"},{"location":"api-integration-examples/#authentication","title":"Authentication","text":"<p>The Dolibarr API uses API keys for authentication. Generate keys through: 1. Login to Dolibarr web interface 2. Navigate to Users &amp; Groups \u2192 Users 3. Edit user \u2192 API Keys tab 4. Generate new API key</p>"},{"location":"api-integration-examples/#common-integration-patterns","title":"Common Integration Patterns","text":""},{"location":"api-integration-examples/#1-customer-management-integration","title":"1. Customer Management Integration","text":"<p>Use Case: Sync customer data between e-commerce platform and Dolibarr.</p> <pre><code>class DolibarrCustomerSync {\n  constructor(apiUrl, apiKey) {\n    this.apiUrl = apiUrl;\n    this.apiKey = apiKey;\n  }\n\n  async createCustomer(customerData) {\n    const response = await fetch(`${this.apiUrl}/thirdparties`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'DOLAPIKEY': this.apiKey\n      },\n      body: JSON.stringify({\n        name: customerData.company || customerData.name,\n        client: 1, // Mark as customer\n        email: customerData.email,\n        phone: customerData.phone,\n        address: customerData.address,\n        zip: customerData.zip,\n        town: customerData.city,\n        country_code: customerData.country\n      })\n    });\n\n    return await response.json();\n  }\n\n  async updateCustomer(customerId, updates) {\n    const response = await fetch(`${this.apiUrl}/thirdparties/${customerId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'DOLAPIKEY': this.apiKey\n      },\n      body: JSON.stringify(updates)\n    });\n\n    return await response.json();\n  }\n\n  async getCustomer(customerId) {\n    const response = await fetch(`${this.apiUrl}/thirdparties/${customerId}`, {\n      headers: {\n        'DOLAPIKEY': this.apiKey\n      }\n    });\n\n    return await response.json();\n  }\n}\n\n// Usage example\nconst dolibarr = new DolibarrCustomerSync('http://localhost:18080/api/index.php', 'your-api-key');\n\n// Create new customer\nconst newCustomer = await dolibarr.createCustomer({\n  name: 'John Doe',\n  email: 'john@example.com',\n  phone: '+1234567890',\n  address: '123 Main St',\n  city: 'Anytown',\n  zip: '12345',\n  country: 'US'\n});\n</code></pre>"},{"location":"api-integration-examples/#2-order-processing-integration","title":"2. Order Processing Integration","text":"<p>Use Case: Automatically create orders in Dolibarr from external sales channels.</p> <pre><code>import requests\nimport json\nfrom datetime import datetime\n\nclass DolibarrOrderManager:\n    def __init__(self, api_url, api_key):\n        self.api_url = api_url\n        self.headers = {\n            'Content-Type': 'application/json',\n            'DOLAPIKEY': api_key\n        }\n\n    def create_order(self, customer_id, order_items, order_data=None):\n        \"\"\"Create a new order with line items.\"\"\"\n\n        # Create the order\n        order_payload = {\n            'socid': customer_id,\n            'date': datetime.now().strftime('%Y-%m-%d'),\n            'note_public': order_data.get('notes', ''),\n            'ref_client': order_data.get('external_ref', '')\n        }\n\n        response = requests.post(\n            f\"{self.api_url}/orders\",\n            headers=self.headers,\n            data=json.dumps(order_payload)\n        )\n\n        if response.status_code == 200:\n            order_id = response.json()\n\n            # Add order lines\n            for item in order_items:\n                self.add_order_line(order_id, item)\n\n            return order_id\n        else:\n            raise Exception(f\"Failed to create order: {response.text}\")\n\n    def add_order_line(self, order_id, item):\n        \"\"\"Add a line item to an existing order.\"\"\"\n        line_payload = {\n            'fk_product': item.get('product_id'),\n            'qty': item['quantity'],\n            'subprice': item['unit_price'],\n            'desc': item.get('description', ''),\n            'tva_tx': item.get('vat_rate', 20)  # Default 20% VAT\n        }\n\n        response = requests.post(\n            f\"{self.api_url}/orders/{order_id}/lines\",\n            headers=self.headers,\n            data=json.dumps(line_payload)\n        )\n\n        return response.json()\n\n# Usage example\norder_manager = DolibarrOrderManager('http://localhost:18080/api/index.php', 'your-api-key')\n\n# Create order with multiple items\norder_items = [\n    {\n        'product_id': 1,\n        'quantity': 2,\n        'unit_price': 99.99,\n        'description': 'Professional Laptop',\n        'vat_rate': 20\n    },\n    {\n        'product_id': 2,\n        'quantity': 1,\n        'unit_price': 29.99,\n        'description': 'Wireless Mouse',\n        'vat_rate': 20\n    }\n]\n\norder_id = order_manager.create_order(\n    customer_id=123,\n    order_items=order_items,\n    order_data={'notes': 'Rush order', 'external_ref': 'WEB-001234'}\n)\n</code></pre>"},{"location":"api-integration-examples/#3-invoice-generation-automation","title":"3. Invoice Generation Automation","text":"<p>Use Case: Automatically generate invoices based on project milestones or recurring billing.</p> <pre><code>&lt;?php\nclass DolibarrInvoiceGenerator {\n    private $apiUrl;\n    private $apiKey;\n\n    public function __construct($apiUrl, $apiKey) {\n        $this-&gt;apiUrl = $apiUrl;\n        $this-&gt;apiKey = $apiKey;\n    }\n\n    public function createInvoice($customerId, $lines, $options = []) {\n        $invoiceData = [\n            'socid' =&gt; $customerId,\n            'type' =&gt; $options['type'] ?? 0, // 0 = standard invoice\n            'date' =&gt; date('Y-m-d'),\n            'note_public' =&gt; $options['notes'] ?? '',\n            'cond_reglement_id' =&gt; $options['payment_term'] ?? 1\n        ];\n\n        // Create invoice\n        $response = $this-&gt;makeApiCall('/invoices', 'POST', $invoiceData);\n\n        if ($response &amp;&amp; isset($response['id'])) {\n            $invoiceId = $response['id'];\n\n            // Add invoice lines\n            foreach ($lines as $line) {\n                $this-&gt;addInvoiceLine($invoiceId, $line);\n            }\n\n            // Validate invoice if requested\n            if ($options['validate'] ?? false) {\n                $this-&gt;validateInvoice($invoiceId);\n            }\n\n            return $invoiceId;\n        }\n\n        throw new Exception('Failed to create invoice');\n    }\n\n    public function addInvoiceLine($invoiceId, $line) {\n        $lineData = [\n            'fk_product' =&gt; $line['product_id'] ?? null,\n            'qty' =&gt; $line['quantity'],\n            'subprice' =&gt; $line['unit_price'],\n            'desc' =&gt; $line['description'],\n            'tva_tx' =&gt; $line['vat_rate'] ?? 20\n        ];\n\n        return $this-&gt;makeApiCall(\"/invoices/$invoiceId/lines\", 'POST', $lineData);\n    }\n\n    public function validateInvoice($invoiceId) {\n        return $this-&gt;makeApiCall(\"/invoices/$invoiceId/validate\", 'POST');\n    }\n\n    private function makeApiCall($endpoint, $method, $data = null) {\n        $ch = curl_init();\n\n        curl_setopt_array($ch, [\n            CURLOPT_URL =&gt; $this-&gt;apiUrl . $endpoint,\n            CURLOPT_RETURNTRANSFER =&gt; true,\n            CURLOPT_CUSTOMREQUEST =&gt; $method,\n            CURLOPT_HTTPHEADER =&gt; [\n                'Content-Type: application/json',\n                'DOLAPIKEY: ' . $this-&gt;apiKey\n            ]\n        ]);\n\n        if ($data) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode &gt;= 200 &amp;&amp; $httpCode &lt; 300) {\n            return json_decode($response, true);\n        }\n\n        return false;\n    }\n}\n\n// Usage example\n$invoiceGenerator = new DolibarrInvoiceGenerator('http://localhost:18080/api/index.php', 'your-api-key');\n\n$invoiceLines = [\n    [\n        'product_id' =&gt; 1,\n        'quantity' =&gt; 1,\n        'unit_price' =&gt; 150.00,\n        'description' =&gt; 'Consulting Services - January 2024',\n        'vat_rate' =&gt; 20\n    ]\n];\n\n$invoiceId = $invoiceGenerator-&gt;createInvoice(\n    customerId: 123,\n    lines: $invoiceLines,\n    options: [\n        'notes' =&gt; 'Monthly consulting invoice',\n        'validate' =&gt; true,\n        'payment_term' =&gt; 2 // 30 days\n    ]\n);\n?&gt;\n</code></pre>"},{"location":"api-integration-examples/#4-stock-management-integration","title":"4. Stock Management Integration","text":"<p>Use Case: Real-time stock level synchronization between warehouse management system and Dolibarr.</p> <pre><code>package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n)\n\ntype DolibarrStockManager struct {\n    apiURL string\n    apiKey string\n    client *http.Client\n}\n\ntype StockMovement struct {\n    ProductID   int     `json:\"fk_product\"`\n    WarehouseID int     `json:\"fk_entrepot\"`\n    Quantity    float64 `json:\"qty\"`\n    Type        int     `json:\"type\"` // 0=input, 1=output\n    Label       string  `json:\"label\"`\n    Price       float64 `json:\"price,omitempty\"`\n}\n\nfunc NewDolibarrStockManager(apiURL, apiKey string) *DolibarrStockManager {\n    return &amp;DolibarrStockManager{\n        apiURL: apiURL,\n        apiKey: apiKey,\n        client: &amp;http.Client{},\n    }\n}\n\nfunc (dsm *DolibarrStockManager) UpdateStock(movement StockMovement) error {\n    payload, _ := json.Marshal(movement)\n\n    req, err := http.NewRequest(\"POST\", dsm.apiURL+\"/stockmovements\", bytes.NewBuffer(payload))\n    if err != nil {\n        return err\n    }\n\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"DOLAPIKEY\", dsm.apiKey)\n\n    resp, err := dsm.client.Do(req)\n    if err != nil {\n        return err\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode &gt;= 200 &amp;&amp; resp.StatusCode &lt; 300 {\n        return nil\n    }\n\n    return fmt.Errorf(\"API request failed with status: %d\", resp.StatusCode)\n}\n\nfunc (dsm *DolibarrStockManager) GetProductStock(productID, warehouseID int) (float64, error) {\n    url := fmt.Sprintf(\"%s/products/%d/stock?warehouse_id=%d\", dsm.apiURL, productID, warehouseID)\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return 0, err\n    }\n\n    req.Header.Set(\"DOLAPIKEY\", dsm.apiKey)\n\n    resp, err := dsm.client.Do(req)\n    if err != nil {\n        return 0, err\n    }\n    defer resp.Body.Close()\n\n    var stockData map[string]interface{}\n    json.NewDecoder(resp.Body).Decode(&amp;stockData)\n\n    if qty, ok := stockData[\"stock_reel\"].(float64); ok {\n        return qty, nil\n    }\n\n    return 0, fmt.Errorf(\"unable to parse stock quantity\")\n}\n\n// Usage example\nfunc main() {\n    stockManager := NewDolibarrStockManager(\"http://localhost:18080/api/index.php\", \"your-api-key\")\n\n    // Record stock input\n    movement := StockMovement{\n        ProductID:   1,\n        WarehouseID: 1,\n        Quantity:    100,\n        Type:        0, // Input\n        Label:       \"Received from supplier\",\n        Price:       50.00,\n    }\n\n    err := stockManager.UpdateStock(movement)\n    if err != nil {\n        fmt.Printf(\"Error updating stock: %v\\n\", err)\n    } else {\n        fmt.Println(\"Stock updated successfully\")\n    }\n\n    // Check current stock level\n    currentStock, err := stockManager.GetProductStock(1, 1)\n    if err != nil {\n        fmt.Printf(\"Error getting stock: %v\\n\", err)\n    } else {\n        fmt.Printf(\"Current stock: %.2f\\n\", currentStock)\n    }\n}\n</code></pre>"},{"location":"api-integration-examples/#integration-architectures","title":"Integration Architectures","text":""},{"location":"api-integration-examples/#1-event-driven-integration","title":"1. Event-Driven Integration","text":"<pre><code>flowchart LR\n    APP[External App] --&gt; WEBHOOK[Webhook Endpoint]\n    WEBHOOK --&gt; QUEUE[Message Queue]\n    QUEUE --&gt; PROCESSOR[Event Processor]\n    PROCESSOR --&gt; API[Dolibarr API]\n    API --&gt; DB[(Dolibarr Database)]</code></pre>"},{"location":"api-integration-examples/#2-scheduled-synchronization","title":"2. Scheduled Synchronization","text":"<pre><code>flowchart TD\n    CRON[Cron Job] --&gt; SYNC[Sync Service]\n    SYNC --&gt; EXTERNAL[External System API]\n    SYNC --&gt; DOLIBARR[Dolibarr API]\n    EXTERNAL --&gt; DATA1[External Data]\n    DOLIBARR --&gt; DATA2[Dolibarr Data]\n    DATA1 --&gt; COMPARE[Compare &amp; Merge]\n    DATA2 --&gt; COMPARE\n    COMPARE --&gt; UPDATE[Update Records]</code></pre>"},{"location":"api-integration-examples/#3-real-time-bidirectional-sync","title":"3. Real-time Bidirectional Sync","text":"<pre><code>flowchart LR\n    EXT_SYS[External System] &lt;--&gt; MIDDLEWARE[Sync Middleware]\n    MIDDLEWARE &lt;--&gt; DOLIBARR_API[Dolibarr API]\n    MIDDLEWARE --&gt; CONFLICT[Conflict Resolution]\n    CONFLICT --&gt; LOG[Audit Log]</code></pre>"},{"location":"api-integration-examples/#error-handling-best-practices","title":"Error Handling &amp; Best Practices","text":""},{"location":"api-integration-examples/#rate-limiting","title":"Rate Limiting","text":"<pre><code>import time\nfrom functools import wraps\n\ndef rate_limit(max_calls=60, period=60):\n    \"\"\"Decorator to limit API calls per period.\"\"\"\n    calls = []\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            now = time.time()\n            # Remove calls older than the period\n            calls[:] = [call for call in calls if call &gt; now - period]\n\n            if len(calls) &gt;= max_calls:\n                sleep_time = period - (now - calls[0])\n                time.sleep(sleep_time)\n\n            calls.append(now)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n\nclass DolibarrAPIClient:\n    def __init__(self, api_url, api_key):\n        self.api_url = api_url\n        self.api_key = api_key\n\n    @rate_limit(max_calls=50, period=60)  # 50 calls per minute\n    def make_api_call(self, endpoint, method='GET', data=None):\n        # API call implementation\n        pass\n</code></pre>"},{"location":"api-integration-examples/#error-handling","title":"Error Handling","text":"<pre><code>class DolibarrAPIError extends Error {\n  constructor(message, statusCode, response) {\n    super(message);\n    this.statusCode = statusCode;\n    this.response = response;\n  }\n}\n\nclass DolibarrAPI {\n  async makeRequest(endpoint, options = {}) {\n    const maxRetries = 3;\n    let retries = 0;\n\n    while (retries &lt; maxRetries) {\n      try {\n        const response = await fetch(`${this.apiUrl}${endpoint}`, {\n          ...options,\n          headers: {\n            'DOLAPIKEY': this.apiKey,\n            'Content-Type': 'application/json',\n            ...options.headers\n          }\n        });\n\n        if (response.ok) {\n          return await response.json();\n        }\n\n        // Handle specific error cases\n        if (response.status === 429) {\n          // Rate limited - wait and retry\n          await this.wait(Math.pow(2, retries) * 1000);\n          retries++;\n          continue;\n        }\n\n        if (response.status &gt;= 500) {\n          // Server error - retry\n          retries++;\n          await this.wait(1000);\n          continue;\n        }\n\n        // Client error - don't retry\n        throw new DolibarrAPIError(\n          `API error: ${response.statusText}`,\n          response.status,\n          await response.text()\n        );\n\n      } catch (error) {\n        if (retries === maxRetries - 1) {\n          throw error;\n        }\n        retries++;\n        await this.wait(1000);\n      }\n    }\n  }\n\n  wait(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n  }\n}\n</code></pre>"},{"location":"api-integration-examples/#testing-integration","title":"Testing Integration","text":""},{"location":"api-integration-examples/#unit-testing","title":"Unit Testing","text":"<pre><code>import unittest\nfrom unittest.mock import patch, Mock\nimport json\n\nclass TestDolibarrIntegration(unittest.TestCase):\n    def setUp(self):\n        self.api_client = DolibarrAPIClient('http://localhost:18080/api/index.php', 'test-key')\n\n    @patch('requests.post')\n    def test_create_customer_success(self, mock_post):\n        # Mock successful API response\n        mock_response = Mock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = {'id': 123}\n        mock_post.return_value = mock_response\n\n        # Test customer creation\n        customer_data = {\n            'name': 'Test Customer',\n            'email': 'test@example.com'\n        }\n\n        result = self.api_client.create_customer(customer_data)\n\n        self.assertEqual(result['id'], 123)\n        mock_post.assert_called_once()\n\n    @patch('requests.post')\n    def test_create_customer_failure(self, mock_post):\n        # Mock API error response\n        mock_response = Mock()\n        mock_response.status_code = 400\n        mock_response.text = 'Bad Request'\n        mock_post.return_value = mock_response\n\n        customer_data = {\n            'name': 'Test Customer'\n        }\n\n        with self.assertRaises(DolibarrAPIError):\n            self.api_client.create_customer(customer_data)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>"},{"location":"api-integration-examples/#integration-testing","title":"Integration Testing","text":"<pre><code>#!/bin/bash\n# integration_test.sh\n\n# Start test environment\ntask services:start-with-tools\ntask config:enable-api\n\n# Wait for services to be ready\nsleep 30\n\n# Run integration tests\npython -m pytest tests/integration/ -v\n\n# Cleanup\ntask services:stop\n</code></pre>"},{"location":"api-integration-examples/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"api-integration-examples/#api-usage-monitoring","title":"API Usage Monitoring","text":"<pre><code>import logging\nimport time\nfrom functools import wraps\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('dolibarr_api.log'),\n        logging.StreamHandler()\n    ]\n)\n\nlogger = logging.getLogger('dolibarr_integration')\n\ndef log_api_call(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n\n        try:\n            result = func(*args, **kwargs)\n            duration = time.time() - start_time\n\n            logger.info(f\"API call successful: {func.__name__}, duration: {duration:.2f}s\")\n            return result\n\n        except Exception as e:\n            duration = time.time() - start_time\n            logger.error(f\"API call failed: {func.__name__}, duration: {duration:.2f}s, error: {str(e)}\")\n            raise\n\n    return wrapper\n</code></pre>"},{"location":"api-integration-examples/#conclusion","title":"Conclusion","text":"<p>The Dolibarr API provides comprehensive access to business data and operations. When integrating:</p> <ol> <li>Plan your architecture based on your specific needs</li> <li>Implement proper error handling and retry logic</li> <li>Use rate limiting to avoid overwhelming the API</li> <li>Monitor and log API usage for debugging and optimization</li> <li>Test thoroughly with both unit and integration tests</li> <li>Follow security best practices for API key management</li> </ol> <p>The examples provided should give you a solid foundation for building robust integrations with the Dolibarr Docker setup.</p>"},{"location":"api-reference/","title":"API and Service Reference","text":"<p>This document provides comprehensive information about accessing Dolibarr services, APIs, and endpoints in the Docker deployment environment.</p>"},{"location":"api-reference/#service-endpoints","title":"Service Endpoints","text":""},{"location":"api-reference/#web-services-overview","title":"Web Services Overview","text":"<pre><code>graph LR\n    subgraph \"External Access\"\n        BROWSER[Web Browser]\n        API_CLIENT[API Clients]\n        DB_CLIENT[Database Tools]\n        ADMIN[Administrators]\n    end\n\n    subgraph \"Docker Services\"\n        DOLIBARR[\ud83c\udfe2 Dolibarr&lt;br/&gt;:8080]\n        API[\ud83d\udce1 REST API&lt;br/&gt;:8080/api]\n        PMA[\ud83d\udd27 phpMyAdmin&lt;br/&gt;:8081]\n        DB[\ud83d\uddc4\ufe0f MariaDB&lt;br/&gt;:3306]\n    end\n\n    BROWSER --&gt; DOLIBARR\n    API_CLIENT --&gt; API\n    ADMIN --&gt; PMA\n    DB_CLIENT --&gt; DB\n\n    API -.-&gt; DOLIBARR\n    PMA -.-&gt; DB\n    DOLIBARR -.-&gt; DB\n\n    style DOLIBARR fill:#e1f5fe\n    style API fill:#e8f5e8\n    style PMA fill:#fff3e0\n    style DB fill:#f3e5f5</code></pre>"},{"location":"api-reference/#web-interface-access","title":"Web Interface Access","text":""},{"location":"api-reference/#primary-application","title":"Primary Application","text":"<p>Endpoint: <code>http://localhost:8080</code></p> <p>Purpose: Main Dolibarr ERP/CRM web interface</p> <p>Authentication: Session-based with login form</p> <p>Default Credentials (Change immediately!): - Username: <code>admin</code> - Password: Set via <code>DOLIBARR_ADMIN_PASSWORD</code> in <code>.env</code></p> <p>Health Check: <pre><code>curl -I http://localhost:8080\n# Expected: HTTP/1.1 200 OK\n</code></pre></p>"},{"location":"api-reference/#access-examples","title":"Access Examples","text":"<pre><code># Basic connectivity test\ncurl -f http://localhost:8080 &gt; /dev/null &amp;&amp; echo \"\u2705 Web interface accessible\"\n\n# Check response time\ncurl -w \"@curl-format.txt\" -o /dev/null -s http://localhost:8080\n\n# Check with authentication (if required)\ncurl -c cookies.txt -b cookies.txt \\\n  -d \"username=admin&amp;password=$ADMIN_PASSWORD\" \\\n  -X POST http://localhost:8080/index.php\n</code></pre>"},{"location":"api-reference/#dolibarr-rest-api","title":"Dolibarr REST API","text":""},{"location":"api-reference/#api-base-url","title":"API Base URL","text":"<p>Endpoint: <code>http://localhost:8080/api/index.php</code></p> <p>Documentation: Available at <code>http://localhost:8080/api/index.php/explorer</code></p> <p>Authentication: API Key or Session-based</p>"},{"location":"api-reference/#api-authentication","title":"API Authentication","text":""},{"location":"api-reference/#method-1-api-key-authentication","title":"Method 1: API Key Authentication","text":"<ol> <li>Generate API Key:</li> <li>Login to Dolibarr web interface</li> <li>Go to: Home \u2192 Setup \u2192 Modules/Applications</li> <li>Enable \"REST API\" module</li> <li>Go to: Users &amp; Groups \u2192 Users</li> <li> <p>Edit your user \u2192 Generate API key</p> </li> <li> <p>Use API Key:    <pre><code># Set API key\nexport DOLIBARR_API_KEY=\"your-api-key-here\"\n\n# Make API request\ncurl -H \"DOLAPIKEY: $DOLIBARR_API_KEY\" \\\n  http://localhost:8080/api/index.php/users\n</code></pre></p> </li> </ol>"},{"location":"api-reference/#method-2-session-authentication","title":"Method 2: Session Authentication","text":"<pre><code># Login and get session\ncurl -c cookies.txt \\\n  -d \"username=admin&amp;password=$ADMIN_PASSWORD\" \\\n  -X POST http://localhost:8080/index.php\n\n# Use session for API calls\ncurl -b cookies.txt \\\n  http://localhost:8080/api/index.php/users\n</code></pre>"},{"location":"api-reference/#core-api-endpoints","title":"Core API Endpoints","text":""},{"location":"api-reference/#users-management","title":"Users Management","text":"<pre><code># List users\nGET /api/index.php/users\n\n# Get specific user\nGET /api/index.php/users/{id}\n\n# Create user\nPOST /api/index.php/users\n\n# Update user\nPUT /api/index.php/users/{id}\n\n# Delete user\nDELETE /api/index.php/users/{id}\n</code></pre> <p>Example: <pre><code># List all users\ncurl -H \"DOLAPIKEY: $DOLIBARR_API_KEY\" \\\n  http://localhost:8080/api/index.php/users\n\n# Get user by ID\ncurl -H \"DOLAPIKEY: $DOLIBARR_API_KEY\" \\\n  http://localhost:8080/api/index.php/users/1\n</code></pre></p>"},{"location":"api-reference/#companies-third-parties","title":"Companies (Third Parties)","text":"<pre><code># List companies\nGET /api/index.php/thirdparties\n\n# Get specific company\nGET /api/index.php/thirdparties/{id}\n\n# Create company\nPOST /api/index.php/thirdparties\n\n# Update company\nPUT /api/index.php/thirdparties/{id}\n</code></pre> <p>Example: <pre><code># Create new company\ncurl -H \"DOLAPIKEY: $DOLIBARR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST \\\n  -d '{\"name\": \"Acme Corp\", \"client\": 1}' \\\n  http://localhost:8080/api/index.php/thirdparties\n</code></pre></p>"},{"location":"api-reference/#products","title":"Products","text":"<pre><code># List products\nGET /api/index.php/products\n\n# Get specific product\nGET /api/index.php/products/{id}\n\n# Create product\nPOST /api/index.php/products\n\n# Update product\nPUT /api/index.php/products/{id}\n</code></pre>"},{"location":"api-reference/#invoices","title":"Invoices","text":"<pre><code># List invoices\nGET /api/index.php/invoices\n\n# Get specific invoice\nGET /api/index.php/invoices/{id}\n\n# Create invoice\nPOST /api/index.php/invoices\n\n# Validate invoice\nPOST /api/index.php/invoices/{id}/validate\n</code></pre>"},{"location":"api-reference/#orders","title":"Orders","text":"<pre><code># List orders\nGET /api/index.php/orders\n\n# Get specific order\nGET /api/index.php/orders/{id}\n\n# Create order\nPOST /api/index.php/orders\n\n# Close order\nPOST /api/index.php/orders/{id}/close\n</code></pre>"},{"location":"api-reference/#api-response-format","title":"API Response Format","text":"<p>All API responses follow this structure:</p> <pre><code>{\n  \"success\": {\n    \"code\": 200,\n    \"message\": \"Success message\"\n  },\n  \"data\": {\n    // Response data here\n  }\n}\n</code></pre> <p>Error Response: <pre><code>{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Error description\"\n  }\n}\n</code></pre></p>"},{"location":"api-reference/#api-usage-examples","title":"API Usage Examples","text":""},{"location":"api-reference/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code>#!/bin/bash\n# API workflow example\n\nAPI_KEY=\"your-api-key\"\nBASE_URL=\"http://localhost:8080/api/index.php\"\nHEADERS=\"DOLAPIKEY: $API_KEY\"\n\n# 1. Create a company\necho \"Creating company...\"\nCOMPANY_ID=$(curl -s -H \"$HEADERS\" -H \"Content-Type: application/json\" \\\n  -X POST -d '{\"name\": \"Test Company\", \"client\": 1}' \\\n  \"$BASE_URL/thirdparties\" | jq -r '.id')\n\necho \"Company created with ID: $COMPANY_ID\"\n\n# 2. Create a product\necho \"Creating product...\"\nPRODUCT_ID=$(curl -s -H \"$HEADERS\" -H \"Content-Type: application/json\" \\\n  -X POST -d '{\"ref\": \"PROD001\", \"label\": \"Test Product\", \"price\": 100}' \\\n  \"$BASE_URL/products\" | jq -r '.id')\n\necho \"Product created with ID: $PRODUCT_ID\"\n\n# 3. Create an invoice\necho \"Creating invoice...\"\nINVOICE_DATA='{\n  \"socid\": '$COMPANY_ID',\n  \"type\": 0,\n  \"lines\": [\n    {\n      \"fk_product\": '$PRODUCT_ID',\n      \"qty\": 2,\n      \"subprice\": 100\n    }\n  ]\n}'\n\nINVOICE_ID=$(curl -s -H \"$HEADERS\" -H \"Content-Type: application/json\" \\\n  -X POST -d \"$INVOICE_DATA\" \\\n  \"$BASE_URL/invoices\" | jq -r '.id')\n\necho \"Invoice created with ID: $INVOICE_ID\"\n</code></pre>"},{"location":"api-reference/#database-direct-access","title":"Database Direct Access","text":""},{"location":"api-reference/#connection-parameters","title":"Connection Parameters","text":"<p>Host: <code>localhost</code> (from Docker host) Port: <code>3306</code> Database: <code>dolibarr</code> Username: <code>dolibarr</code> (or <code>root</code> for full access) Password: Set via <code>DB_PASSWORD</code> or <code>DB_ROOT_PASSWORD</code></p>"},{"location":"api-reference/#connection-methods","title":"Connection Methods","text":""},{"location":"api-reference/#mysql-command-line","title":"MySQL Command Line","text":"<pre><code># Connect as dolibarr user\nmysql -h localhost -P 3306 -u dolibarr -p dolibarr\n\n# Connect as root user\nmysql -h localhost -P 3306 -u root -p dolibarr\n</code></pre>"},{"location":"api-reference/#via-docker-container","title":"Via Docker Container","text":"<pre><code># Connect to database from within Docker network\ndocker-compose exec dolibarr-db mysql -u root -p dolibarr\n\n# Execute single command\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SHOW TABLES;\" dolibarr\n</code></pre>"},{"location":"api-reference/#using-database-clients","title":"Using Database Clients","text":"<p>Connection String Examples:</p> <ul> <li>DBeaver/DataGrip: <code>jdbc:mysql://localhost:3306/dolibarr</code></li> <li>Sequel Pro: Host: <code>localhost</code>, Port: <code>3306</code>, Database: <code>dolibarr</code></li> <li>phpMyAdmin: Available at <code>http://localhost:8081</code> (if enabled)</li> </ul>"},{"location":"api-reference/#database-schema-access","title":"Database Schema Access","text":"<pre><code>-- Show all tables\nSHOW TABLES;\n\n-- Show table structure\nDESCRIBE llx_user;\n\n-- Show table relationships\nSELECT \n  TABLE_NAME,\n  COLUMN_NAME,\n  CONSTRAINT_NAME,\n  REFERENCED_TABLE_NAME,\n  REFERENCED_COLUMN_NAME \nFROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \nWHERE REFERENCED_TABLE_SCHEMA = 'dolibarr';\n</code></pre>"},{"location":"api-reference/#phpmyadmin-interface","title":"phpMyAdmin Interface","text":""},{"location":"api-reference/#access-information","title":"Access Information","text":"<p>URL: <code>http://localhost:8081</code> Availability: Only when using <code>internal-db-tools</code> profile Authentication: Database credentials</p>"},{"location":"api-reference/#login-credentials","title":"Login Credentials","text":"<ul> <li>Username: <code>dolibarr</code> or <code>root</code></li> <li>Password: <code>DB_PASSWORD</code> or <code>DB_ROOT_PASSWORD</code></li> <li>Server: <code>dolibarr-db</code> (automatically configured)</li> </ul>"},{"location":"api-reference/#features-available","title":"Features Available","text":"<ul> <li>Database schema browsing</li> <li>SQL query execution</li> <li>Data import/export</li> <li>User management</li> <li>Performance monitoring</li> <li>Database maintenance</li> </ul>"},{"location":"api-reference/#security-note","title":"Security Note","text":"<p>\u26a0\ufe0f Production Warning: Disable phpMyAdmin in production environments by not using the <code>internal-db-tools</code> profile.</p>"},{"location":"api-reference/#service-health-monitoring","title":"Service Health Monitoring","text":""},{"location":"api-reference/#health-check-endpoints","title":"Health Check Endpoints","text":""},{"location":"api-reference/#application-health","title":"Application Health","text":"<pre><code># Basic health check\ncurl -f http://localhost:8080 &gt; /dev/null &amp;&amp; echo \"\u2705 Application healthy\"\n\n# Detailed status check\ncurl -s -w \"%{http_code}\" http://localhost:8080 | grep -q \"200\" &amp;&amp; echo \"\u2705 OK\" || echo \"\u274c Error\"\n</code></pre>"},{"location":"api-reference/#database-health","title":"Database Health","text":"<pre><code># Database connectivity test\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SELECT 1\" &gt; /dev/null &amp;&amp; echo \"\u2705 Database healthy\"\n\n# Performance check\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SHOW STATUS LIKE 'Threads_connected'\"\n</code></pre>"},{"location":"api-reference/#automated-health-monitoring","title":"Automated Health Monitoring","text":"<pre><code>#!/bin/bash\n# health-monitor.sh\n\ncheck_service() {\n    local service=$1\n    local url=$2\n\n    if curl -f \"$url\" &gt; /dev/null 2&gt;&amp;1; then\n        echo \"\u2705 $service: OK\"\n        return 0\n    else\n        echo \"\u274c $service: FAILED\"\n        return 1\n    fi\n}\n\n# Check all services\ncheck_service \"Dolibarr\" \"http://localhost:8080\"\ncheck_service \"phpMyAdmin\" \"http://localhost:8081\" || echo \"\u2139\ufe0f phpMyAdmin may not be enabled\"\n\n# Check database\nif docker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SELECT 1\" &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u2705 Database: OK\"\nelse\n    echo \"\u274c Database: FAILED\"\nfi\n</code></pre>"},{"location":"api-reference/#api-security-best-practices","title":"API Security Best Practices","text":""},{"location":"api-reference/#authentication-security","title":"Authentication Security","text":"<ol> <li> <p>Use API Keys Instead of Passwords:    <pre><code># Good: API key authentication\ncurl -H \"DOLAPIKEY: $API_KEY\" http://localhost:8080/api/index.php/users\n\n# Avoid: Password in URL or headers\n</code></pre></p> </li> <li> <p>Rotate API Keys Regularly:    <pre><code># Generate new API key periodically\n# Update all applications using the old key\n</code></pre></p> </li> <li> <p>Limit API Key Permissions:</p> </li> <li>Create dedicated API users</li> <li>Grant minimum required permissions</li> <li>Use different keys for different applications</li> </ol>"},{"location":"api-reference/#network-security","title":"Network Security","text":"<ol> <li> <p>Use HTTPS in Production:    <pre><code># Production API access\ncurl -H \"DOLAPIKEY: $API_KEY\" https://your-domain.com/api/index.php/users\n</code></pre></p> </li> <li> <p>Restrict API Access:    <pre><code># Firewall rules to limit API access\nufw allow from 192.168.1.0/24 to any port 8080\n</code></pre></p> </li> <li> <p>Use Reverse Proxy:    <pre><code># nginx configuration for API proxy\nlocation /api/ {\n    proxy_pass http://localhost:8080/api/;\n    proxy_set_header X-API-Key $http_dolapikey;\n}\n</code></pre></p> </li> </ol>"},{"location":"api-reference/#rate-limiting","title":"Rate Limiting","text":"<pre><code>#!/bin/bash\n# Simple rate limiting example\nAPI_LOG=\"/tmp/api_calls.log\"\nMAX_CALLS=100\nWINDOW=3600  # 1 hour\n\n# Log API call\necho \"$(date +%s) $REMOTE_ADDR\" &gt;&gt; $API_LOG\n\n# Check rate limit\nRECENT_CALLS=$(awk -v now=$(date +%s) -v window=$WINDOW \\\n  '$1 &gt; (now - window)' $API_LOG | wc -l)\n\nif [ $RECENT_CALLS -gt $MAX_CALLS ]; then\n    echo \"Rate limit exceeded\"\n    exit 1\nfi\n</code></pre>"},{"location":"api-reference/#integration-examples","title":"Integration Examples","text":""},{"location":"api-reference/#python-integration","title":"Python Integration","text":"<pre><code>import requests\nimport json\n\nclass DolibarrAPI:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.headers = {\n            'DOLAPIKEY': api_key,\n            'Content-Type': 'application/json'\n        }\n\n    def get_users(self):\n        response = requests.get(f\"{self.base_url}/users\", headers=self.headers)\n        return response.json()\n\n    def create_company(self, name, is_client=True):\n        data = {\n            'name': name,\n            'client': 1 if is_client else 0\n        }\n        response = requests.post(f\"{self.base_url}/thirdparties\", \n                               headers=self.headers, \n                               data=json.dumps(data))\n        return response.json()\n\n# Usage\napi = DolibarrAPI('http://localhost:8080/api/index.php', 'your-api-key')\nusers = api.get_users()\n</code></pre>"},{"location":"api-reference/#javascript-integration","title":"JavaScript Integration","text":"<pre><code>class DolibarrAPI {\n    constructor(baseUrl, apiKey) {\n        this.baseUrl = baseUrl;\n        this.headers = {\n            'DOLAPIKEY': apiKey,\n            'Content-Type': 'application/json'\n        };\n    }\n\n    async getUsers() {\n        const response = await fetch(`${this.baseUrl}/users`, {\n            headers: this.headers\n        });\n        return await response.json();\n    }\n\n    async createInvoice(invoiceData) {\n        const response = await fetch(`${this.baseUrl}/invoices`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(invoiceData)\n        });\n        return await response.json();\n    }\n}\n\n// Usage\nconst api = new DolibarrAPI('http://localhost:8080/api/index.php', 'your-api-key');\napi.getUsers().then(users =&gt; console.log(users));\n</code></pre>"},{"location":"api-reference/#curl-scripts-for-common-operations","title":"cURL Scripts for Common Operations","text":"<pre><code>#!/bin/bash\n# dolibarr-api-tools.sh\n\nAPI_KEY=\"your-api-key\"\nBASE_URL=\"http://localhost:8080/api/index.php\"\n\n# Function to make API calls\napi_call() {\n    local method=$1\n    local endpoint=$2\n    local data=$3\n\n    if [ -n \"$data\" ]; then\n        curl -s -H \"DOLAPIKEY: $API_KEY\" -H \"Content-Type: application/json\" \\\n             -X \"$method\" -d \"$data\" \"$BASE_URL/$endpoint\"\n    else\n        curl -s -H \"DOLAPIKEY: $API_KEY\" -X \"$method\" \"$BASE_URL/$endpoint\"\n    fi\n}\n\n# Export functions\nexport -f api_call\nexport API_KEY BASE_URL\n\n# Usage examples\necho \"Users:\"\napi_call GET \"users\" | jq '.[].login'\n\necho \"Companies:\"\napi_call GET \"thirdparties\" | jq '.[].name'\n</code></pre> <p>This API reference provides comprehensive access information for all Dolibarr Docker services and endpoints.</p>"},{"location":"architecture/","title":"System Architecture","text":"<p>This document provides a comprehensive overview of the Dolibarr Docker deployment architecture, covering container orchestration, service relationships, data flow, and system design principles.</p>"},{"location":"architecture/#high-level-architecture","title":"High-Level Architecture","text":""},{"location":"architecture/#system-overview","title":"System Overview","text":"<pre><code>graph TB\n    subgraph \"External Network\"\n        USER[\ud83d\udc64 End Users]\n        ADMIN[\ud83d\udc68\u200d\ud83d\udcbc Administrators]\n        API_CLIENT[\ud83d\udd17 API Clients]\n    end\n\n    subgraph \"Docker Host Environment\"\n        subgraph \"Reverse Proxy Layer (Optional)\"\n            NGINX[\ud83c\udf10 Nginx/Traefik&lt;br/&gt;SSL Termination]\n        end\n\n        subgraph \"Application Layer\"\n            DOLIBARR[\ud83c\udfe2 Dolibarr ERP/CRM&lt;br/&gt;Port: 8080]\n        end\n\n        subgraph \"Database Layer\"\n            INTERNAL_DB[\ud83d\uddc4\ufe0f MariaDB Internal&lt;br/&gt;Port: 3306]\n            EXTERNAL_DB[\ud83c\udf0d External Database&lt;br/&gt;MySQL/MariaDB]\n        end\n\n        subgraph \"Management Layer\"\n            PHPMYADMIN[\ud83d\udd27 phpMyAdmin&lt;br/&gt;Port: 8081]\n        end\n\n        subgraph \"Storage Layer\"\n            HTML_VOL[(\ud83d\udcc1 HTML Volume&lt;br/&gt;Application Files)]\n            DOC_VOL[(\ud83d\udcc4 Documents Volume&lt;br/&gt;User Data)]\n            DB_VOL[(\ud83d\udcbe Database Volume&lt;br/&gt;MariaDB Data)]\n            CUSTOM_DIR[\ud83d\udce6 Custom Modules&lt;br/&gt;Host Mount]\n            LOGS_DIR[\ud83d\udccb Logs Directory&lt;br/&gt;Host Mount]\n            BACKUP_DIR[\ud83d\udcbe Backup Storage&lt;br/&gt;Host Mount]\n        end\n\n        subgraph \"Automation Layer\"\n            TASKFILE[\u2699\ufe0f Task Automation&lt;br/&gt;Management Scripts]\n        end\n    end\n\n    USER --&gt;|HTTPS/HTTP| NGINX\n    ADMIN --&gt;|HTTPS/HTTP| NGINX\n    API_CLIENT --&gt;|REST API| NGINX\n    NGINX --&gt;|HTTP| DOLIBARR\n    ADMIN --&gt;|Direct Access| PHPMYADMIN\n\n    DOLIBARR -.-&gt;|Profile: internal-db| INTERNAL_DB\n    DOLIBARR -.-&gt;|Profile: external-db| EXTERNAL_DB\n    PHPMYADMIN --&gt; INTERNAL_DB\n\n    DOLIBARR --&gt; HTML_VOL\n    DOLIBARR --&gt; DOC_VOL\n    DOLIBARR --&gt; CUSTOM_DIR\n    DOLIBARR --&gt; LOGS_DIR\n    INTERNAL_DB --&gt; DB_VOL\n\n    TASKFILE -.-&gt; DOLIBARR\n    TASKFILE -.-&gt; INTERNAL_DB\n    TASKFILE -.-&gt; PHPMYADMIN\n    TASKFILE -.-&gt; BACKUP_DIR\n\n    style DOLIBARR fill:#e1f5fe\n    style INTERNAL_DB fill:#f3e5f5\n    style EXTERNAL_DB fill:#ffebee\n    style PHPMYADMIN fill:#fff3e0\n    style TASKFILE fill:#e8f5e8</code></pre>"},{"location":"architecture/#container-architecture","title":"Container Architecture","text":""},{"location":"architecture/#service-composition","title":"Service Composition","text":"Service Container Image Purpose Profile dolibarr Application Server <code>dolibarr/dolibarr:latest</code> Main ERP/CRM application All profiles dolibarr-db Database Server <code>mariadb:10.11</code> Internal database <code>internal-db</code> phpmyadmin Database Admin <code>phpmyadmin/phpmyadmin:latest</code> Database management UI <code>internal-db-tools</code>"},{"location":"architecture/#container-relationships","title":"Container Relationships","text":"<pre><code>graph LR\n    subgraph \"Docker Network: dolibarr_default\"\n        APP[dolibarr&lt;br/&gt;Application]\n        DB[dolibarr-db&lt;br/&gt;Database]\n        PMA[phpmyadmin&lt;br/&gt;Admin]\n\n        APP --&gt;|MySQL Protocol| DB\n        PMA --&gt;|MySQL Protocol| DB\n        APP -.-&gt;|Health Checks| APP\n        DB -.-&gt;|Health Checks| DB\n    end\n\n    subgraph \"External Access\"\n        WEB[Web Browser&lt;br/&gt;:8080]\n        ADMIN_UI[Admin Panel&lt;br/&gt;:8081]\n        DB_CLIENT[DB Client&lt;br/&gt;:3306]\n    end\n\n    WEB --&gt; APP\n    ADMIN_UI --&gt; PMA\n    DB_CLIENT -.-&gt; DB\n\n    style APP fill:#e1f5fe\n    style DB fill:#f3e5f5\n    style PMA fill:#fff3e0</code></pre>"},{"location":"architecture/#deployment-profiles","title":"Deployment Profiles","text":"<p>The system supports three distinct deployment profiles, each optimized for different use cases:</p>"},{"location":"architecture/#profile-internal-db","title":"Profile: internal-db","text":"<p>Architecture: Standalone deployment with containerized database</p> <pre><code>graph TB\n    subgraph \"Docker Compose Profile: internal-db\"\n        APP[\ud83c\udfe2 Dolibarr Application]\n        DB[\ud83d\uddc4\ufe0f MariaDB Database]\n\n        APP --&gt;|MySQL Connection| DB\n\n        subgraph \"Volumes\"\n            V1[(HTML Volume)]\n            V2[(Documents Volume)]\n            V3[(Database Volume)]\n        end\n\n        APP --&gt; V1\n        APP --&gt; V2\n        DB --&gt; V3\n    end\n\n    USER[\ud83d\udc64 User] --&gt;|HTTP :8080| APP\n\n    style APP fill:#e1f5fe\n    style DB fill:#f3e5f5</code></pre> <p>Use Cases: - Development environments - Testing deployments - Small-scale production (single server) - Proof of concept installations</p> <p>Resource Requirements: - CPU: 1-2 cores - Memory: 2-4 GB RAM - Storage: 10-20 GB</p>"},{"location":"architecture/#profile-internal-db-tools","title":"Profile: internal-db-tools","text":"<p>Architecture: Development environment with administration tools</p> <pre><code>graph TB\n    subgraph \"Docker Compose Profile: internal-db-tools\"\n        APP[\ud83c\udfe2 Dolibarr Application]\n        DB[\ud83d\uddc4\ufe0f MariaDB Database]\n        PMA[\ud83d\udd27 phpMyAdmin]\n\n        APP --&gt;|MySQL Connection| DB\n        PMA --&gt;|MySQL Connection| DB\n\n        subgraph \"Volumes\"\n            V1[(HTML Volume)]\n            V2[(Documents Volume)]\n            V3[(Database Volume)]\n        end\n\n        APP --&gt; V1\n        APP --&gt; V2\n        DB --&gt; V3\n    end\n\n    USER[\ud83d\udc64 User] --&gt;|HTTP :8080| APP\n    ADMIN[\ud83d\udc68\u200d\ud83d\udcbc Admin] --&gt;|HTTP :8081| PMA\n\n    style APP fill:#e1f5fe\n    style DB fill:#f3e5f5\n    style PMA fill:#fff3e0</code></pre> <p>Use Cases: - Development with database administration - Training environments - Database troubleshooting - Development team collaboration</p> <p>Additional Features: - Web-based database management - SQL query execution - Database schema visualization - Import/export functionality</p>"},{"location":"architecture/#profile-external-db","title":"Profile: external-db","text":"<p>Architecture: Production deployment with external database</p> <pre><code>graph TB\n    subgraph \"Docker Compose Profile: external-db\"\n        APP[\ud83c\udfe2 Dolibarr Application]\n\n        subgraph \"Volumes\"\n            V1[(HTML Volume)]\n            V2[(Documents Volume)]\n        end\n\n        APP --&gt; V1\n        APP --&gt; V2\n    end\n\n    subgraph \"External Infrastructure\"\n        EXT_DB[(\ud83c\udf0d External Database&lt;br/&gt;MySQL/MariaDB)]\n    end\n\n    APP --&gt;|Network Connection| EXT_DB\n    USER[\ud83d\udc64 User] --&gt;|HTTP :8080| APP\n\n    style APP fill:#e1f5fe\n    style EXT_DB fill:#ffebee</code></pre> <p>Use Cases: - Production environments - High-availability deployments - Multi-instance scaling - Existing database infrastructure integration</p> <p>Requirements: - External MySQL 5.7+ or MariaDB 10.3+ - Network connectivity from Docker host - Proper database user privileges - Backup/replication handled externally</p>"},{"location":"architecture/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"architecture/#application-data-flow","title":"Application Data Flow","text":"<pre><code>flowchart TB\n    subgraph \"User Interface Layer\"\n        WEB[Web Browser]\n        API[API Clients]\n    end\n\n    subgraph \"Application Layer\"\n        PHP[PHP Application]\n        MODULES[Dolibarr Modules]\n    end\n\n    subgraph \"Data Access Layer\"\n        DAL[Data Access Layer]\n        CACHE[Application Cache]\n    end\n\n    subgraph \"Storage Layer\"\n        DB[(Database)]\n        FILES[(File System)]\n    end\n\n    WEB --&gt;|HTTP/HTTPS| PHP\n    API --&gt;|REST/SOAP| PHP\n    PHP --&gt; MODULES\n    MODULES --&gt; DAL\n    DAL --&gt; CACHE\n    DAL --&gt; DB\n    PHP --&gt; FILES\n\n    style PHP fill:#e1f5fe\n    style DB fill:#f3e5f5\n    style FILES fill:#fff3e0</code></pre>"},{"location":"architecture/#database-schema-architecture","title":"Database Schema Architecture","text":"<pre><code>erDiagram\n    CORE_BUSINESS {\n        societe \"Companies\"\n        user \"Users\"\n        product \"Products\"\n        facture \"Invoices\"\n        commande \"Orders\"\n        propal \"Proposals\"\n    }\n\n    CONFIGURATION {\n        const \"System Configuration\"\n        menu \"Menu Structure\"\n        dictionaries \"Reference Data\"\n    }\n\n    MODULES {\n        adherent \"Members\"\n        projet \"Projects\"\n        actioncomm \"Activities\"\n        stock \"Inventory\"\n    }\n\n    SYSTEM {\n        extrafields \"Custom Fields\"\n        categories \"Classifications\"\n        element_categorie \"Category Links\"\n    }\n\n    CORE_BUSINESS ||--o{ MODULES : \"extends\"\n    CONFIGURATION ||--o{ CORE_BUSINESS : \"configures\"\n    SYSTEM ||--o{ CORE_BUSINESS : \"enhances\"\n    SYSTEM ||--o{ MODULES : \"enhances\"</code></pre>"},{"location":"architecture/#network-architecture","title":"Network Architecture","text":""},{"location":"architecture/#internal-networking","title":"Internal Networking","text":"<pre><code>graph LR\n    subgraph \"Docker Network: dolibarr_default\"\n        subgraph \"Service Discovery\"\n            DNS[Docker DNS&lt;br/&gt;127.0.0.11]\n        end\n\n        APP[dolibarr&lt;br/&gt;172.20.0.2]\n        DB[dolibarr-db&lt;br/&gt;172.20.0.3]\n        PMA[phpmyadmin&lt;br/&gt;172.20.0.4]\n\n        APP -.-&gt;|Hostname Resolution| DNS\n        DB -.-&gt;|Hostname Resolution| DNS\n        PMA -.-&gt;|Hostname Resolution| DNS\n    end\n\n    subgraph \"Host Network\"\n        HOST[Host Interface&lt;br/&gt;Docker Bridge]\n    end\n\n    APP --&gt;|Port Mapping 8080:80| HOST\n    DB --&gt;|Port Mapping 3306:3306| HOST\n    PMA --&gt;|Port Mapping 8081:80| HOST</code></pre>"},{"location":"architecture/#port-configuration","title":"Port Configuration","text":"Service Internal Port External Port Protocol Purpose Dolibarr 80 8080 HTTP Web interface MariaDB 3306 3306 MySQL Database access phpMyAdmin 80 8081 HTTP Database admin"},{"location":"architecture/#security-boundaries","title":"Security Boundaries","text":"<pre><code>graph TB\n    subgraph \"Security Zones\"\n        subgraph \"Public Zone\"\n            INTERNET[\ud83c\udf0d Internet]\n            USERS[\ud83d\udc65 Users]\n        end\n\n        subgraph \"DMZ (Optional)\"\n            PROXY[\ud83d\udee1\ufe0f Reverse Proxy&lt;br/&gt;SSL Termination]\n            FIREWALL[\ud83d\udd25 Firewall Rules]\n        end\n\n        subgraph \"Application Zone\"\n            APP[\ud83c\udfe2 Dolibarr&lt;br/&gt;Application]\n        end\n\n        subgraph \"Data Zone\"\n            DB[\ud83d\uddc4\ufe0f Database&lt;br/&gt;Storage]\n            FILES[(\ud83d\udcc1 File Storage)]\n        end\n    end\n\n    INTERNET --&gt; PROXY\n    USERS --&gt; PROXY\n    PROXY --&gt; FIREWALL\n    FIREWALL --&gt; APP\n    APP --&gt; DB\n    APP --&gt; FILES\n\n    style PROXY fill:#fff3e0\n    style FIREWALL fill:#ffebee\n    style APP fill:#e1f5fe\n    style DB fill:#f3e5f5</code></pre>"},{"location":"architecture/#storage-architecture","title":"Storage Architecture","text":""},{"location":"architecture/#volume-management","title":"Volume Management","text":"<pre><code>graph TB\n    subgraph \"Docker Volume System\"\n        subgraph \"Named Volumes\"\n            HTML_VOL[dolibarr-html&lt;br/&gt;\ud83d\udcc1 Application Files]\n            DOC_VOL[dolibarr-documents&lt;br/&gt;\ud83d\udcc4 User Documents]\n            DB_VOL[dolibarr-db-data&lt;br/&gt;\ud83d\udcbe Database Files]\n        end\n\n        subgraph \"Host Mounts\"\n            CUSTOM[./custom/&lt;br/&gt;\ud83d\udce6 Custom Modules]\n            LOGS[./logs/&lt;br/&gt;\ud83d\udccb Application Logs]\n            BACKUPS[./backups/&lt;br/&gt;\ud83d\udcbe Backup Storage]\n            INIT[./db-init/&lt;br/&gt;\u2699\ufe0f Init Scripts]\n        end\n    end\n\n    subgraph \"Container Access\"\n        APP[Dolibarr Container]\n        DB[Database Container]\n    end\n\n    APP --&gt; HTML_VOL\n    APP --&gt; DOC_VOL\n    APP --&gt; CUSTOM\n    APP --&gt; LOGS\n    DB --&gt; DB_VOL\n    DB --&gt; INIT\n\n    style HTML_VOL fill:#e1f5fe\n    style DOC_VOL fill:#fff3e0\n    style DB_VOL fill:#f3e5f5\n    style CUSTOM fill:#e8f5e8</code></pre>"},{"location":"architecture/#data-persistence-strategy","title":"Data Persistence Strategy","text":"Storage Type Purpose Backup Priority Persistence Method Database Core business data Critical Docker volume + automated backups Documents User uploads, files High Docker volume + file-level backups Application Dolibarr installation Medium Docker volume (recoverable from image) Custom Modules Custom code High Host mount + version control Logs Application logs Low Host mount (rotated/cleaned) Backups Data backups Critical Host mount + external storage"},{"location":"architecture/#scalability-architecture","title":"Scalability Architecture","text":""},{"location":"architecture/#horizontal-scaling-options","title":"Horizontal Scaling Options","text":"<pre><code>graph TB\n    subgraph \"Load Balancer\"\n        LB[\ud83d\udd04 Load Balancer&lt;br/&gt;Nginx/HAProxy]\n    end\n\n    subgraph \"Application Tier\"\n        APP1[Dolibarr Instance 1]\n        APP2[Dolibarr Instance 2]\n        APP3[Dolibarr Instance 3]\n    end\n\n    subgraph \"Database Tier\"\n        subgraph \"Master-Slave Configuration\"\n            MASTER[(\ud83d\uddc4\ufe0f Master Database&lt;br/&gt;Read/Write)]\n            SLAVE1[(\ud83d\uddc4\ufe0f Slave Database 1&lt;br/&gt;Read Only)]\n            SLAVE2[(\ud83d\uddc4\ufe0f Slave Database 2&lt;br/&gt;Read Only)]\n        end\n    end\n\n    subgraph \"Shared Storage\"\n        NFS[\ud83d\udcc1 NFS/GFS&lt;br/&gt;Shared Documents]\n    end\n\n    LB --&gt; APP1\n    LB --&gt; APP2\n    LB --&gt; APP3\n\n    APP1 --&gt; MASTER\n    APP2 --&gt; MASTER\n    APP3 --&gt; MASTER\n\n    APP1 -.-&gt;|Read Operations| SLAVE1\n    APP2 -.-&gt;|Read Operations| SLAVE2\n    APP3 -.-&gt;|Read Operations| SLAVE1\n\n    MASTER -.-&gt;|Replication| SLAVE1\n    MASTER -.-&gt;|Replication| SLAVE2\n\n    APP1 --&gt; NFS\n    APP2 --&gt; NFS\n    APP3 --&gt; NFS\n\n    style LB fill:#fff3e0\n    style MASTER fill:#f3e5f5\n    style SLAVE1 fill:#e8f5e8\n    style SLAVE2 fill:#e8f5e8</code></pre>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/#database-performance","title":"Database Performance","text":"<pre><code>-- Recommended MySQL/MariaDB configuration\n[mysqld]\n# Performance tuning\ninnodb_buffer_pool_size = 1G          # 70-80% of available RAM\ninnodb_log_file_size = 256M\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\n\n# Connection handling\nmax_connections = 200\nthread_cache_size = 50\nquery_cache_size = 64M\nquery_cache_type = 1\n\n# Replication (if using)\nserver-id = 1\nlog-bin = mysql-bin\nbinlog_format = mixed\n</code></pre>"},{"location":"architecture/#application-performance","title":"Application Performance","text":"<ul> <li> <p>PHP Configuration:   <pre><code>memory_limit = 512M\nmax_execution_time = 300\nupload_max_filesize = 100M\npost_max_size = 100M\n</code></pre></p> </li> <li> <p>Caching Strategy:</p> </li> <li>Redis/Memcached for session storage</li> <li>File-based caching for static content</li> <li>Database query caching</li> </ul>"},{"location":"architecture/#container-resources","title":"Container Resources","text":"<pre><code># Resource limits in docker-compose.yml\nservices:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1.0'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n\n  dolibarr-db:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n          cpus: '2.0'\n        reservations:\n          memory: 1G\n          cpus: '1.0'\n</code></pre>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/#security-layers","title":"Security Layers","text":"<pre><code>graph TB\n    subgraph \"Security Implementation\"\n        subgraph \"Network Security\"\n            FW[\ud83d\udd25 Firewall Rules]\n            VPN[\ud83d\udd12 VPN Access]\n            SSL[\ud83d\udee1\ufe0f SSL/TLS Encryption]\n        end\n\n        subgraph \"Application Security\"\n            AUTH[\ud83d\udc64 Authentication]\n            AUTHZ[\ud83d\udd11 Authorization]\n            CSRF[\ud83d\udee1\ufe0f CSRF Protection]\n        end\n\n        subgraph \"Data Security\"\n            ENCRYPT[\ud83d\udd10 Data Encryption]\n            BACKUP[\ud83d\udcbe Encrypted Backups]\n            AUDIT[\ud83d\udccb Audit Logging]\n        end\n\n        subgraph \"Container Security\"\n            SECRETS[\ud83d\udd11 Docker Secrets]\n            SCAN[\ud83d\udd0d Image Scanning]\n            RUNTIME[\ud83d\udee1\ufe0f Runtime Security]\n        end\n    end\n\n    FW --&gt; AUTH\n    SSL --&gt; AUTH\n    AUTH --&gt; AUTHZ\n    AUTHZ --&gt; ENCRYPT\n    ENCRYPT --&gt; BACKUP\n    SECRETS --&gt; RUNTIME\n    SCAN --&gt; RUNTIME</code></pre>"},{"location":"architecture/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Network Security:</li> <li>Use reverse proxy with SSL termination</li> <li>Restrict database port access</li> <li>Implement firewall rules</li> <li> <p>Consider VPN for administrative access</p> </li> <li> <p>Application Security:</p> </li> <li>Change default passwords</li> <li>Implement strong password policies</li> <li>Enable two-factor authentication</li> <li> <p>Regular security updates</p> </li> <li> <p>Container Security:</p> </li> <li>Use Docker secrets for sensitive data</li> <li>Regular image updates</li> <li>Non-root container execution</li> <li> <p>Resource limits and constraints</p> </li> <li> <p>Data Security:</p> </li> <li>Encrypted backups</li> <li>Secure backup storage</li> <li>Audit trail logging</li> <li>Data retention policies</li> </ol>"},{"location":"architecture/#monitoring-architecture","title":"Monitoring Architecture","text":""},{"location":"architecture/#system-monitoring","title":"System Monitoring","text":"<pre><code>graph TB\n    subgraph \"Monitoring Stack\"\n        subgraph \"Metrics Collection\"\n            CADVISOR[\ud83d\udcca cAdvisor&lt;br/&gt;Container Metrics]\n            NODEEXP[\ud83d\udcca Node Exporter&lt;br/&gt;System Metrics]\n        end\n\n        subgraph \"Metrics Storage\"\n            PROMETHEUS[\ud83d\uddc4\ufe0f Prometheus&lt;br/&gt;Time Series DB]\n        end\n\n        subgraph \"Visualization\"\n            GRAFANA[\ud83d\udcc8 Grafana&lt;br/&gt;Dashboards]\n        end\n\n        subgraph \"Alerting\"\n            ALERTMANAGER[\ud83d\udea8 Alert Manager&lt;br/&gt;Notifications]\n        end\n\n        subgraph \"Log Management\"\n            LOGS[\ud83d\udccb Container Logs]\n            LOKI[\ud83d\uddc4\ufe0f Loki&lt;br/&gt;Log Aggregation]\n        end\n    end\n\n    CADVISOR --&gt; PROMETHEUS\n    NODEEXP --&gt; PROMETHEUS\n    PROMETHEUS --&gt; GRAFANA\n    PROMETHEUS --&gt; ALERTMANAGER\n    LOGS --&gt; LOKI\n    LOKI --&gt; GRAFANA\n\n    style PROMETHEUS fill:#f3e5f5\n    style GRAFANA fill:#e1f5fe\n    style ALERTMANAGER fill:#ffebee</code></pre>"},{"location":"architecture/#health-monitoring","title":"Health Monitoring","text":"<p>The system includes comprehensive health monitoring:</p> <ul> <li>Container Health: Docker health checks</li> <li>Application Health: HTTP endpoint monitoring  </li> <li>Database Health: Connection and query testing</li> <li>Resource Monitoring: CPU, memory, disk usage</li> <li>Performance Metrics: Response times, throughput</li> </ul> <p>This architecture provides a robust, scalable, and secure foundation for Dolibarr ERP/CRM deployment in containerized environments.</p>"},{"location":"backup-restore/","title":"Backup and Restore Guide","text":"<p>This guide provides comprehensive instructions for backing up and restoring your Dolibarr Docker deployment, including automated procedures, manual operations, and disaster recovery scenarios.</p>"},{"location":"backup-restore/#overview","title":"Overview","text":"<p>The Dolibarr Docker setup includes comprehensive backup and restore capabilities through the task automation system, supporting both full system backups and granular component restoration.</p>"},{"location":"backup-restore/#backup-components","title":"Backup Components","text":"<pre><code>graph TB\n    subgraph \"Backup Components\"\n        DB[\ud83d\uddc4\ufe0f Database Content&lt;br/&gt;Business Data]\n        APP[\ud83d\udcc1 Application Data&lt;br/&gt;Documents &amp; Files]\n        CONFIG[\u2699\ufe0f Configuration&lt;br/&gt;Custom Settings]\n        CUSTOM[\ud83d\udce6 Custom Modules&lt;br/&gt;Extensions &amp; Code]\n    end\n\n    subgraph \"Backup Storage\"\n        LOCAL[\ud83d\udcbe Local Backup&lt;br/&gt;./backups/]\n        REMOTE[\ud83c\udf0d Remote Storage&lt;br/&gt;S3, NFS, etc.]\n        ARCHIVE[\ud83d\udce6 Archive Storage&lt;br/&gt;Long-term retention]\n    end\n\n    subgraph \"Backup Types\"\n        FULL[\ud83d\udd04 Full Backup&lt;br/&gt;Everything]\n        INCREMENTAL[\ud83d\udcc8 Incremental&lt;br/&gt;Changes only]\n        DIFFERENTIAL[\ud83d\udcca Differential&lt;br/&gt;Since last full]\n    end\n\n    DB --&gt; LOCAL\n    APP --&gt; LOCAL\n    CONFIG --&gt; LOCAL\n    CUSTOM --&gt; LOCAL\n\n    LOCAL --&gt; REMOTE\n    LOCAL --&gt; ARCHIVE\n\n    style DB fill:#f3e5f5\n    style APP fill:#e1f5fe\n    style CONFIG fill:#fff3e0\n    style CUSTOM fill:#e8f5e8</code></pre>"},{"location":"backup-restore/#quick-backup-operations","title":"Quick Backup Operations","text":""},{"location":"backup-restore/#automated-backup-tasks","title":"Automated Backup Tasks","text":"<p>The task automation system provides simple commands for common backup operations:</p> <pre><code># Create complete backup (recommended)\ntask backup:backup\n\n# Database only backup\ntask backup:backup-db\n\n# Application data only backup\ntask backup:backup-app\n\n# List available backups\ntask backup:list-backups\n</code></pre>"},{"location":"backup-restore/#backup-directory-structure","title":"Backup Directory Structure","text":"<p>Backups are organized with timestamps for easy identification:</p> <pre><code>backups/\n\u251c\u2500\u2500 2024-08-24_14-30-15/              # Timestamp directory\n\u2502   \u251c\u2500\u2500 database_2024-08-24_14-30-15.sql.gz    # Compressed database dump\n\u2502   \u2514\u2500\u2500 app_data_2024-08-24_14-30-15.tar.gz    # Application data archive\n\u251c\u2500\u2500 2024-08-24_12-15-30/\n\u2502   \u251c\u2500\u2500 database_2024-08-24_12-15-30.sql.gz\n\u2502   \u2514\u2500\u2500 app_data_2024-08-24_12-15-30.tar.gz\n\u2514\u2500\u2500 README.txt                        # Backup documentation\n</code></pre>"},{"location":"backup-restore/#database-backup","title":"Database Backup","text":""},{"location":"backup-restore/#automated-database-backup","title":"Automated Database Backup","text":"<pre><code># Full database backup with compression\ntask backup:backup-db\n</code></pre> <p>What it includes: - All Dolibarr tables and data - Database structure (DDL) - Stored procedures and triggers - User permissions and grants - Compressed with gzip for space efficiency</p>"},{"location":"backup-restore/#manual-database-backup","title":"Manual Database Backup","text":"<p>For advanced users who need custom backup parameters:</p> <pre><code># Manual backup with custom options\ndocker-compose exec -T dolibarr-db mysqldump \\\n  -u root -p$DB_ROOT_PASSWORD \\\n  --single-transaction \\\n  --routines \\\n  --triggers \\\n  --complete-insert \\\n  --hex-blob \\\n  dolibarr | gzip &gt; manual_backup_$(date +%Y%m%d_%H%M%S).sql.gz\n</code></pre>"},{"location":"backup-restore/#database-backup-options","title":"Database Backup Options","text":"Option Purpose Recommended <code>--single-transaction</code> Consistent backup \u2705 Yes <code>--routines</code> Include stored procedures \u2705 Yes <code>--triggers</code> Include triggers \u2705 Yes <code>--complete-insert</code> Full INSERT statements \u26a0\ufe0f Optional <code>--hex-blob</code> Binary data safety \u26a0\ufe0f Optional <code>--flush-logs</code> Rotate binary logs \u274c No (Docker)"},{"location":"backup-restore/#backup-verification","title":"Backup Verification","text":"<p>Always verify backup integrity:</p> <pre><code># Test backup file integrity\ngunzip -t ./backups/*/database_*.sql.gz\n\n# Check backup file size (should not be too small)\nls -lh ./backups/*/database_*.sql.gz\n\n# Test restore to temporary database (advanced)\ndocker run --rm -i mysql:8.0 mysql -h host -u user -p &lt; backup.sql\n</code></pre>"},{"location":"backup-restore/#application-data-backup","title":"Application Data Backup","text":""},{"location":"backup-restore/#automated-application-backup","title":"Automated Application Backup","text":"<pre><code># Backup application data and documents\ntask backup:backup-app\n</code></pre> <p>What it includes: - Document storage volume (<code>/var/www/html/documents</code>) - Application files volume (<code>/var/www/html</code>) - Custom modules directory (<code>./custom/</code>) - Configuration files - User uploads and generated files</p>"},{"location":"backup-restore/#manual-application-backup","title":"Manual Application Backup","text":"<pre><code># Create manual application backup\ndocker run --rm \\\n  -v dolibarr_dolibarr-documents:/source/documents:ro \\\n  -v dolibarr_dolibarr-html:/source/html:ro \\\n  -v $(pwd)/custom:/source/custom:ro \\\n  -v $(pwd)/backups:/backup \\\n  alpine:latest \\\n  sh -c '\n    cd /backup\n    TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n    tar -czf app_manual_$TIMESTAMP.tar.gz \\\n      -C /source documents html custom\n    echo \"Manual backup completed: app_manual_$TIMESTAMP.tar.gz\"\n  '\n</code></pre>"},{"location":"backup-restore/#selective-application-backup","title":"Selective Application Backup","text":"<p>For backing up specific components:</p> <pre><code># Documents only\ndocker run --rm \\\n  -v dolibarr_dolibarr-documents:/source:ro \\\n  -v $(pwd)/backups:/backup \\\n  alpine:latest \\\n  tar -czf /backup/documents_$(date +%Y%m%d_%H%M%S).tar.gz -C /source .\n\n# Custom modules only\ntar -czf ./backups/custom_modules_$(date +%Y%m%d_%H%M%S).tar.gz ./custom/\n\n# Configuration only\ndocker-compose exec dolibarr tar -czf /tmp/config.tar.gz /var/www/html/conf/\ndocker-compose cp dolibarr:/tmp/config.tar.gz ./backups/config_$(date +%Y%m%d_%H%M%S).tar.gz\n</code></pre>"},{"location":"backup-restore/#complete-system-backup","title":"Complete System Backup","text":""},{"location":"backup-restore/#full-backup-procedure","title":"Full Backup Procedure","text":"<pre><code># Complete system backup (recommended daily)\ntask backup:backup\n</code></pre> <p>This creates a complete backup including: 1. Database dump (compressed) 2. Application data archive 3. Custom modules 4. Configuration files 5. Timestamp-based organization</p>"},{"location":"backup-restore/#backup-schedule-automation","title":"Backup Schedule Automation","text":"<p>Set up automated backups using cron:</p> <pre><code># Edit crontab\ncrontab -e\n\n# Add daily backup at 2 AM\n0 2 * * * cd /path/to/dolibarr &amp;&amp; /usr/local/bin/task backup:backup &gt;&gt; /var/log/dolibarr-backup.log 2&gt;&amp;1\n\n# Add weekly cleanup (keep last 30 days)\n0 3 * * 0 find /path/to/dolibarr/backups -name \"20*\" -mtime +30 -exec rm -rf {} \\;\n</code></pre>"},{"location":"backup-restore/#backup-monitoring","title":"Backup Monitoring","text":"<p>Monitor backup success with scripts:</p> <pre><code>#!/bin/bash\n# backup-monitor.sh\nBACKUP_DIR=\"/path/to/dolibarr/backups\"\nLATEST_BACKUP=$(ls -1t \"$BACKUP_DIR\" | head -n 1)\nBACKUP_AGE=$(find \"$BACKUP_DIR/$LATEST_BACKUP\" -mtime +1 | wc -l)\n\nif [ $BACKUP_AGE -gt 0 ]; then\n    echo \"WARNING: Latest backup is older than 24 hours\"\n    # Send alert email\n    echo \"Backup alert: $LATEST_BACKUP\" | mail -s \"Dolibarr Backup Alert\" admin@example.com\nelse\n    echo \"Backup is current: $LATEST_BACKUP\"\nfi\n</code></pre>"},{"location":"backup-restore/#restore-operations","title":"Restore Operations","text":""},{"location":"backup-restore/#database-restore","title":"Database Restore","text":""},{"location":"backup-restore/#quick-database-restore","title":"Quick Database Restore","text":"<pre><code># Restore from specific backup\ntask backup:restore-db BACKUP_FILE=./backups/2024-08-24_14-30-15/database_2024-08-24_14-30-15.sql.gz\n</code></pre>"},{"location":"backup-restore/#manual-database-restore","title":"Manual Database Restore","text":"<pre><code># Stop application during restore\ntask services:stop\n\n# Start database only\ndocker-compose up -d dolibarr-db\n\n# Wait for database to be ready\ndocker-compose logs -f dolibarr-db | grep \"ready for connections\"\n\n# Restore database\ngunzip -c ./backups/2024-08-24_14-30-15/database_2024-08-24_14-30-15.sql.gz | \\\ndocker-compose exec -T dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD dolibarr\n\n# Restart all services\ntask services:start\n</code></pre>"},{"location":"backup-restore/#database-restore-to-different-database","title":"Database Restore to Different Database","text":"<pre><code># Create new database for restore testing\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"CREATE DATABASE dolibarr_restore;\"\n\n# Restore to test database\ngunzip -c backup.sql.gz | \\\ndocker-compose exec -T dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD dolibarr_restore\n\n# Compare or switch databases as needed\n</code></pre>"},{"location":"backup-restore/#application-data-restore","title":"Application Data Restore","text":""},{"location":"backup-restore/#quick-application-restore","title":"Quick Application Restore","text":"<pre><code># Restore application data (will stop services temporarily)\ntask backup:restore-app BACKUP_FILE=./backups/2024-08-24_14-30-15/app_data_2024-08-24_14-30-15.tar.gz\n</code></pre>"},{"location":"backup-restore/#manual-application-restore","title":"Manual Application Restore","text":"<pre><code># Stop services\ntask services:stop\n\n# Restore application data\ndocker run --rm \\\n  -v dolibarr_dolibarr-documents:/target/documents \\\n  -v dolibarr_dolibarr-html:/target/html \\\n  -v $(pwd)/custom:/target/custom \\\n  -v $(pwd)/backups/2024-08-24_14-30-15:/backup:ro \\\n  alpine:latest \\\n  sh -c '\n    cd /target\n    tar -xzf /backup/app_data_2024-08-24_14-30-15.tar.gz\n    echo \"Application data restored\"\n  '\n\n# Fix permissions\ntask utilities:permissions\n\n# Restart services\ntask services:start\n</code></pre>"},{"location":"backup-restore/#selective-application-restore","title":"Selective Application Restore","text":"<p>Restore specific components only:</p> <pre><code># Documents only\ndocker run --rm \\\n  -v dolibarr_dolibarr-documents:/target \\\n  -v $(pwd)/backups:/backup:ro \\\n  alpine:latest \\\n  sh -c 'cd /target &amp;&amp; tar -xzf /backup/documents_backup.tar.gz'\n\n# Custom modules only\ntar -xzf ./backups/custom_modules_backup.tar.gz\n\n# Configuration files only\ndocker run --rm \\\n  -v dolibarr_dolibarr-html:/target \\\n  -v $(pwd)/backups:/backup:ro \\\n  alpine:latest \\\n  sh -c 'cd /target &amp;&amp; tar -xzf /backup/config_backup.tar.gz'\n</code></pre>"},{"location":"backup-restore/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"backup-restore/#complete-system-recovery","title":"Complete System Recovery","text":"<p>In case of complete system failure:</p> <pre><code># 1. Prepare clean environment\ndocker system prune -a -f --volumes\ntask setup:init\n\n# 2. Start services to create volumes\ntask services:start\ntask services:stop\n\n# 3. Restore database\nLATEST_BACKUP=$(ls -1t ./backups | head -n 1)\ntask backup:restore-db BACKUP_FILE=./backups/$LATEST_BACKUP/database_*.sql.gz\n\n# 4. Restore application data\ntask backup:restore-app BACKUP_FILE=./backups/$LATEST_BACKUP/app_data_*.tar.gz\n\n# 5. Start services\ntask services:start\n\n# 6. Verify restoration\ntask utilities:health\n</code></pre>"},{"location":"backup-restore/#point-in-time-recovery","title":"Point-in-Time Recovery","text":"<p>For more granular recovery options:</p> <pre><code># List available backups\ntask backup:list-backups\n\n# Choose specific backup point\nRESTORE_DATE=\"2024-08-24_12-15-30\"\n\n# Restore to specific point in time\ntask backup:restore-db BACKUP_FILE=./backups/$RESTORE_DATE/database_$RESTORE_DATE.sql.gz\ntask backup:restore-app BACKUP_FILE=./backups/$RESTORE_DATE/app_data_$RESTORE_DATE.tar.gz\n</code></pre>"},{"location":"backup-restore/#recovery-validation","title":"Recovery Validation","text":"<p>After restore operations, always validate the recovery:</p> <pre><code># Check system health\ntask utilities:health\n\n# Verify database integrity\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"CHECK TABLE dolibarr.llx_user, dolibarr.llx_societe;\"\n\n# Test web access\ncurl -I http://localhost:8080\n\n# Check application logs\ntask services:logs-app | tail -20\n\n# Verify file permissions\ndocker-compose exec dolibarr ls -la /var/www/html/conf/\n</code></pre>"},{"location":"backup-restore/#advanced-backup-strategies","title":"Advanced Backup Strategies","text":""},{"location":"backup-restore/#incremental-backups","title":"Incremental Backups","text":"<p>For large databases, implement incremental backups:</p> <pre><code>#!/bin/bash\n# incremental-backup.sh\nBACKUP_DIR=\"./backups\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nLAST_BACKUP=$(find $BACKUP_DIR -name \"*.sql.gz\" -mtime -1 | head -n 1)\n\nif [ -z \"$LAST_BACKUP\" ]; then\n    echo \"No recent backup found, performing full backup\"\n    task backup:backup\nelse\n    echo \"Performing incremental backup since $LAST_BACKUP\"\n    # Implement binary log based incremental backup\n    docker-compose exec dolibarr-db mysqldump \\\n        -u root -p$DB_ROOT_PASSWORD \\\n        --single-transaction \\\n        --flush-logs \\\n        --master-data=2 \\\n        dolibarr | gzip &gt; \"$BACKUP_DIR/incremental_$TIMESTAMP.sql.gz\"\nfi\n</code></pre>"},{"location":"backup-restore/#remote-backup-storage","title":"Remote Backup Storage","text":""},{"location":"backup-restore/#aws-s3-integration","title":"AWS S3 Integration","text":"<pre><code>#!/bin/bash\n# s3-backup.sh\nLOCAL_BACKUP=\"./backups/$(ls -1t ./backups | head -n 1)\"\nS3_BUCKET=\"your-dolibarr-backups\"\nAWS_REGION=\"us-west-2\"\n\n# Upload to S3\naws s3 cp \"$LOCAL_BACKUP\" \"s3://$S3_BUCKET/dolibarr-backups/\" --recursive\n\n# Set lifecycle policy for automatic cleanup\naws s3api put-bucket-lifecycle-configuration \\\n    --bucket \"$S3_BUCKET\" \\\n    --lifecycle-configuration file://lifecycle.json\n</code></pre>"},{"location":"backup-restore/#sftpscp-remote-backup","title":"SFTP/SCP Remote Backup","text":"<pre><code>#!/bin/bash\n# remote-backup.sh\nREMOTE_HOST=\"backup-server.example.com\"\nREMOTE_USER=\"backup\"\nREMOTE_PATH=\"/backups/dolibarr\"\nLOCAL_BACKUP=\"./backups/$(ls -1t ./backups | head -n 1)\"\n\n# Copy to remote server\nscp -r \"$LOCAL_BACKUP\" \"$REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/\"\n\n# Verify upload\nssh \"$REMOTE_USER@$REMOTE_HOST\" \"ls -la $REMOTE_PATH/\"\n</code></pre>"},{"location":"backup-restore/#backup-best-practices","title":"Backup Best Practices","text":""},{"location":"backup-restore/#security-considerations","title":"Security Considerations","text":"<ol> <li> <p>Encrypt Backup Files:    <pre><code># GPG encryption\ngpg --cipher-algo AES256 --compress-algo 1 --symmetric \\\n    --output backup_encrypted.sql.gz.gpg backup.sql.gz\n\n# Verify encryption\ngpg --decrypt backup_encrypted.sql.gz.gpg | head -10\n</code></pre></p> </li> <li> <p>Secure Storage Permissions:    <pre><code># Set restrictive permissions\nchmod 700 ./backups/\nchmod 600 ./backups/*/*.gz\n\n# Use dedicated backup user\nchown -R backup:backup ./backups/\n</code></pre></p> </li> <li> <p>Password Protection:    <pre><code># Use environment variables for sensitive data\nexport BACKUP_PASSPHRASE=\"your-secure-passphrase\"\n\n# Encrypt with password\nopenssl enc -aes-256-cbc -salt -in backup.sql.gz \\\n    -out backup.sql.gz.enc -pass env:BACKUP_PASSPHRASE\n</code></pre></p> </li> </ol>"},{"location":"backup-restore/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Parallel Compression:    <pre><code># Use pigz for faster compression\ndocker-compose exec -T dolibarr-db mysqldump \\\n    -u root -p$DB_ROOT_PASSWORD dolibarr | pigz &gt; backup.sql.gz\n</code></pre></p> </li> <li> <p>Bandwidth Throttling:    <pre><code># Limit network bandwidth during backup transfer\nrsync --bwlimit=1000 ./backups/ backup-server:/path/to/backups/\n</code></pre></p> </li> <li> <p>Storage Optimization:    <pre><code># Compress older backups further\nfind ./backups -name \"*.tar.gz\" -mtime +7 -exec xz {} \\;\n</code></pre></p> </li> </ol>"},{"location":"backup-restore/#retention-policies","title":"Retention Policies","text":"<p>Implement automated cleanup based on retention requirements:</p> <pre><code>#!/bin/bash\n# backup-retention.sh\n\n# Keep daily backups for 7 days\nfind ./backups -maxdepth 1 -type d -name \"20*\" -mtime +7 -exec rm -rf {} \\;\n\n# Keep weekly backups for 30 days\n# (implement weekly backup identification logic)\n\n# Keep monthly backups for 365 days\n# (implement monthly backup identification logic)\n\necho \"Backup retention policy applied\"\n</code></pre>"},{"location":"backup-restore/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"backup-restore/#backup-health-monitoring","title":"Backup Health Monitoring","text":"<pre><code>#!/bin/bash\n# backup-health-check.sh\nBACKUP_DIR=\"./backups\"\nALERT_EMAIL=\"admin@example.com\"\nERROR_COUNT=0\n\n# Check if backup exists from last 24 hours\nRECENT_BACKUP=$(find $BACKUP_DIR -name \"20*\" -mtime -1 | wc -l)\nif [ $RECENT_BACKUP -eq 0 ]; then\n    echo \"ERROR: No backup found in last 24 hours\"\n    ERROR_COUNT=$((ERROR_COUNT + 1))\nfi\n\n# Check backup file sizes\nfor backup in $(find $BACKUP_DIR -name \"*.sql.gz\" -mtime -1); do\n    SIZE=$(stat -f%z \"$backup\" 2&gt;/dev/null || stat -c%s \"$backup\")\n    if [ $SIZE -lt 1000000 ]; then  # Less than 1MB\n        echo \"ERROR: Backup file $backup is too small ($SIZE bytes)\"\n        ERROR_COUNT=$((ERROR_COUNT + 1))\n    fi\ndone\n\n# Send alert if errors found\nif [ $ERROR_COUNT -gt 0 ]; then\n    echo \"Backup health check failed with $ERROR_COUNT errors\" | \\\n        mail -s \"Dolibarr Backup Alert\" \"$ALERT_EMAIL\"\n    exit 1\nelse\n    echo \"Backup health check passed\"\n    exit 0\nfi\n</code></pre>"},{"location":"backup-restore/#integration-with-monitoring-systems","title":"Integration with Monitoring Systems","text":""},{"location":"backup-restore/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># backup-metrics.sh\nBACKUP_DIR=\"./backups\"\nMETRICS_FILE=\"/var/lib/node_exporter/textfile_collector/backup_metrics.prom\"\n\n# Calculate metrics\nLAST_BACKUP_TIME=$(find $BACKUP_DIR -name \"20*\" -type d -exec stat -f %m {} \\; | sort -n | tail -1)\nBACKUP_COUNT=$(ls -1 $BACKUP_DIR | wc -l)\nBACKUP_SIZE=$(du -s $BACKUP_DIR | cut -f1)\n\n# Write metrics\ncat &gt; $METRICS_FILE &lt;&lt; EOF\n# HELP dolibarr_last_backup_timestamp Unix timestamp of last backup\n# TYPE dolibarr_last_backup_timestamp gauge\ndolibarr_last_backup_timestamp $LAST_BACKUP_TIME\n\n# HELP dolibarr_backup_count Total number of backups\n# TYPE dolibarr_backup_count gauge\ndolibarr_backup_count $BACKUP_COUNT\n\n# HELP dolibarr_backup_size_bytes Total size of backup directory\n# TYPE dolibarr_backup_size_bytes gauge\ndolibarr_backup_size_bytes $BACKUP_SIZE\nEOF\n</code></pre> <p>This comprehensive backup and restore guide ensures data protection and provides multiple recovery options for various scenarios.</p>"},{"location":"database-model/","title":"Dolibarr Database Model Analysis","text":""},{"location":"database-model/#overview","title":"Overview","text":"<p>This document provides a comprehensive analysis of the Dolibarr ERP/CRM database structure, including entity-relationship diagrams and detailed explanations of the core business entities and their relationships.</p> <p>It describe the current configuration with list of module identified as enable in module status file</p>"},{"location":"database-model/#core-entity-relationship-diagram","title":"Core Entity-Relationship Diagram","text":"<pre><code>erDiagram\n    %% Core Business Entities\n    SOCIETE {\n        int rowid PK\n        string nom \"Company name\"\n        string name_alias\n        int entity FK\n        string ref_ext\n        tinyint statut\n        int parent FK\n        string code_client\n        string code_fournisseur\n        string address\n        string zip\n        string town\n        int fk_departement FK\n        int fk_pays FK\n        string phone\n        string email\n        tinyint client \"Is customer\"\n        tinyint fournisseur \"Is supplier\"\n        datetime datec\n        int fk_user_creat FK\n        int fk_user_modif FK\n    }\n\n    USER {\n        int rowid PK\n        int entity FK\n        string ref_employee\n        smallint admin\n        tinyint employee\n        string login\n        string pass_crypted\n        string gender\n        string lastname\n        string firstname\n        string address\n        string zip\n        string town\n        int fk_country FK\n        string office_phone\n        string user_mobile\n        string email\n        int fk_soc FK\n        int fk_socpeople FK\n        datetime datec\n        int fk_user_creat FK\n        tinyint statut\n    }\n\n    SOCPEOPLE {\n        int rowid PK\n        int fk_soc FK\n        int entity FK\n        string ref_ext\n        string name_alias\n        string civility\n        string lastname\n        string firstname\n        string address\n        string zip\n        string town\n        int fk_departement FK\n        int fk_pays FK\n        string birthday\n        string poste \"Job position\"\n        string phone\n        string phone_mobile\n        string email\n        tinyint statut\n        datetime datec\n        int fk_user_creat FK\n    }\n\n    PRODUCT {\n        int rowid PK\n        string ref\n        int entity FK\n        string ref_ext\n        string label\n        text description\n        text note_public\n        double price\n        double price_ttc\n        double cost_price\n        double tva_tx \"VAT rate\"\n        int fk_user_author FK\n        tinyint tosell\n        tinyint tobuy\n        int fk_product_type FK\n        float seuil_stock_alerte\n        string barcode\n        int fk_barcode_type FK\n        float stock\n        datetime datec\n        tinyint hidden\n    }\n\n    FACTURE {\n        int rowid PK\n        string ref\n        int entity FK\n        string ref_ext\n        string ref_client\n        smallint type\n        int fk_soc FK\n        datetime datec\n        date datef\n        smallint paye \"Paid status\"\n        double remise_percent\n        double total_tva\n        double total_ht\n        double total_ttc\n        smallint fk_statut FK\n        int fk_user_author FK\n        int fk_user_valid FK\n        int fk_projet FK\n        string fk_currency FK\n        int fk_cond_reglement FK\n        int fk_mode_reglement FK\n        date date_lim_reglement\n        text note_private\n        text note_public\n    }\n\n    FACTUREDET {\n        int rowid PK\n        int fk_facture FK\n        int fk_parent_line FK\n        int fk_product FK\n        string product_type\n        text description\n        string product_label\n        double qty\n        double subprice\n        double remise_percent\n        double tva_tx\n        double localtax1_tx\n        double localtax2_tx\n        double total_ht\n        double total_tva\n        double total_ttc\n        int rang \"Line position\"\n    }\n\n    COMMANDE {\n        int rowid PK\n        string ref\n        int entity FK\n        string ref_ext\n        string ref_client\n        int fk_soc FK\n        int fk_projet FK\n        datetime date_creation\n        datetime date_valid\n        date date_commande\n        int fk_user_author FK\n        int fk_user_valid FK\n        smallint fk_statut FK\n        double amount_ht\n        double total_tva\n        double total_ttc\n        text note_private\n        text note_public\n        string fk_currency FK\n        int fk_cond_reglement FK\n        int fk_mode_reglement FK\n        datetime date_livraison\n        int fk_warehouse FK\n    }\n\n    COMMANDEDET {\n        int rowid PK\n        int fk_commande FK\n        int fk_parent_line FK\n        int fk_product FK\n        string product_type\n        text description\n        double qty\n        double subprice\n        double remise_percent\n        double tva_tx\n        double total_ht\n        double total_tva\n        double total_ttc\n        int rang \"Line position\"\n        datetime date_start\n        datetime date_end\n    }\n\n    PROPAL {\n        int rowid PK\n        string ref\n        int entity FK\n        string ref_ext\n        string ref_client\n        int fk_soc FK\n        int fk_projet FK\n        datetime datec\n        datetime date_valid\n        date datep \"Proposal date\"\n        date fin_validite \"Valid until\"\n        int fk_user_author FK\n        int fk_user_valid FK\n        smallint fk_statut FK\n        double price\n        double remise_percent\n        double total_tva\n        double total_ht\n        double total_ttc\n        text note_private\n        text note_public\n        string fk_currency FK\n    }\n\n    PROPALDET {\n        int rowid PK\n        int fk_propal FK\n        int fk_parent_line FK\n        int fk_product FK\n        string product_type\n        text description\n        double qty\n        double subprice\n        double remise_percent\n        double tva_tx\n        double total_ht\n        double total_tva\n        double total_ttc\n        int rang \"Line position\"\n    }\n\n    PROJET {\n        int rowid PK\n        int fk_soc FK\n        string ref\n        string title\n        text description\n        tinyint public\n        smallint fk_statut FK\n        int fk_user_creat FK\n        datetime datec\n        datetime date_start\n        datetime date_end\n        double budget_amount\n        double usage_time\n        double usage_bill_time\n        text note_private\n        text note_public\n    }\n\n    ACTIONCOMM {\n        int rowid PK\n        int fk_soc FK\n        int fk_contact FK\n        int fk_user_author FK\n        int fk_user_action FK\n        int fk_project FK\n        string label\n        datetime datep \"Action date\"\n        datetime datef \"End date\"\n        smallint fk_action FK\n        int percent \"Completion %\"\n        text note\n        smallint fk_element FK\n        int fk_element_id\n    }\n\n    STOCK_MOUVEMENT {\n        int rowid PK\n        int fk_product FK\n        int fk_warehouse FK\n        int fk_user FK\n        string label\n        datetime datem \"Movement date\"\n        double value \"Quantity\"\n        double price\n        int type \"Movement type\"\n        int fk_origin FK\n        string origintype\n        text note\n    }\n\n    ENTREPOT {\n        int rowid PK\n        string ref\n        string label\n        text description\n        int statut\n        string lieu \"Location\"\n        string address\n        string zip\n        string ville\n        int fk_pays FK\n        int fk_user_author FK\n        datetime datec\n    }\n\n    %% Categories\n    CATEGORIE {\n        int rowid PK\n        int entity FK\n        int fk_parent FK\n        string label\n        string ref_ext\n        string color\n        int position\n        tinyint visible\n        int type \"Category type\"\n        text description\n    }\n\n    %% Configuration tables\n    C_PAIEMENT {\n        int rowid PK\n        string code\n        string libelle \"Payment method\"\n        int type\n        int active\n        int accountancy_code\n        string module\n        int position\n    }\n\n    C_COND_REGLEMENT {\n        int rowid PK\n        string code\n        string libelle \"Payment terms\"\n        string libelle_facture\n        int type\n        int fdm \"Days\"\n        int decalage \"Offset\"\n        int active\n        int entity FK\n    }\n\n    %% Relationships - Companies and Contacts\n    SOCIETE ||--o{ SOCPEOPLE : \"has contacts\"\n    SOCIETE ||--o{ USER : \"has employees\"\n    SOCIETE ||--o{ FACTURE : \"receives invoices\"\n    SOCIETE ||--o{ COMMANDE : \"places orders\"\n    SOCIETE ||--o{ PROPAL : \"receives proposals\"\n    SOCIETE ||--o{ PROJET : \"owns projects\"\n    SOCIETE ||--o{ ACTIONCOMM : \"has activities\"\n\n    USER ||--o{ SOCIETE : \"creates\"\n    USER ||--o{ FACTURE : \"creates invoices\"\n    USER ||--o{ COMMANDE : \"creates orders\"\n    USER ||--o{ PROPAL : \"creates proposals\"\n    USER ||--o{ PROJET : \"creates projects\"\n    USER ||--o{ ACTIONCOMM : \"performs activities\"\n    USER ||--o{ STOCK_MOUVEMENT : \"manages stock\"\n\n    SOCPEOPLE }o--|| SOCIETE : \"belongs to\"\n\n    %% Document relationships\n    FACTURE ||--o{ FACTUREDET : \"contains lines\"\n    COMMANDE ||--o{ COMMANDEDET : \"contains lines\"\n    PROPAL ||--o{ PROPALDET : \"contains lines\"\n\n    %% Product relationships\n    PRODUCT ||--o{ FACTUREDET : \"sold in\"\n    PRODUCT ||--o{ COMMANDEDET : \"ordered in\"\n    PRODUCT ||--o{ PROPALDET : \"proposed in\"\n    PRODUCT ||--o{ STOCK_MOUVEMENT : \"moved in stock\"\n\n    %% Project relationships\n    PROJET ||--o{ FACTURE : \"generates invoices\"\n    PROJET ||--o{ COMMANDE : \"generates orders\"\n    PROJET ||--o{ PROPAL : \"generates proposals\"\n    PROJET ||--o{ ACTIONCOMM : \"includes activities\"\n\n    %% Stock relationships\n    ENTREPOT ||--o{ STOCK_MOUVEMENT : \"contains movements\"\n\n    %% Configuration relationships\n    C_PAIEMENT ||--o{ FACTURE : \"payment method\"\n    C_COND_REGLEMENT ||--o{ FACTURE : \"payment terms\"\n    C_COND_REGLEMENT ||--o{ COMMANDE : \"payment terms\"\n\n    %% Category relationships (many-to-many via element_categorie)\n    CATEGORIE ||--o{ SOCIETE : \"categorizes companies\"\n    CATEGORIE ||--o{ PRODUCT : \"categorizes products\"\n    CATEGORIE ||--o{ PROJET : \"categorizes projects\"</code></pre>"},{"location":"database-model/#simplified-core-business-flow-diagram","title":"Simplified Core Business Flow Diagram","text":"<pre><code>flowchart TD\n    A[Company/Customer&lt;br/&gt;SOCIETE] --&gt; B[Contact Person&lt;br/&gt;SOCPEOPLE]\n    A --&gt; C[Commercial Proposal&lt;br/&gt;PROPAL]\n    C --&gt; D{Proposal Accepted?}\n    D --&gt;|Yes| E[Sales Order&lt;br/&gt;COMMANDE]\n    D --&gt;|No| F[End]\n    E --&gt; G[Delivery&lt;br/&gt;EXPEDITION]\n    G --&gt; H[Invoice&lt;br/&gt;FACTURE]\n    H --&gt; I[Payment&lt;br/&gt;PAIEMENT]\n\n    J[Product&lt;br/&gt;PRODUCT] --&gt; C\n    J --&gt; E\n    J --&gt; H\n\n    K[Stock&lt;br/&gt;STOCK_MOUVEMENT] --&gt; G\n    L[Warehouse&lt;br/&gt;ENTREPOT] --&gt; K\n\n    M[User&lt;br/&gt;USER] --&gt; C\n    M --&gt; E\n    M --&gt; H\n\n    N[Project&lt;br/&gt;PROJET] --&gt; C\n    N --&gt; E\n    N --&gt; H\n\n    style A fill:#e1f5fe\n    style J fill:#f3e5f5\n    style M fill:#fff3e0\n    style N fill:#e8f5e8</code></pre>"},{"location":"database-model/#entity-descriptions","title":"Entity Descriptions","text":""},{"location":"database-model/#core-business-entities","title":"Core Business Entities","text":""},{"location":"database-model/#societe-companiesthird-parties","title":"SOCIETE (Companies/Third Parties)","text":"<ul> <li>Purpose: Central entity representing customers, suppliers, and prospects</li> <li>Key Fields: </li> <li><code>nom</code>: Company name</li> <li><code>client/fournisseur</code>: Boolean flags for customer/supplier status</li> <li><code>code_client/code_fournisseur</code>: Unique customer/supplier codes</li> <li><code>address</code>, <code>zip</code>, <code>town</code>: Geographic information</li> <li>Relationships: Parent company to contacts, linked to all business documents</li> </ul>"},{"location":"database-model/#user-system-users","title":"USER (System Users)","text":"<ul> <li>Purpose: Represents system users (employees, administrators)</li> <li>Key Fields:</li> <li><code>login</code>: Authentication login</li> <li><code>admin</code>: Administrator flag</li> <li><code>employee</code>: Employee flag</li> <li><code>fk_soc</code>: Link to employer company</li> <li>Relationships: Creates and manages all business documents</li> </ul>"},{"location":"database-model/#socpeople-contacts","title":"SOCPEOPLE (Contacts)","text":"<ul> <li>Purpose: Individual contacts within companies</li> <li>Key Fields:</li> <li><code>fk_soc</code>: Link to parent company</li> <li><code>lastname/firstname</code>: Personal identification</li> <li><code>poste</code>: Job position</li> <li><code>email/phone</code>: Communication details</li> <li>Relationships: Belongs to a company, linked to activities</li> </ul>"},{"location":"database-model/#product-products-and-services","title":"PRODUCT (Products and Services)","text":"<ul> <li>Purpose: Catalog of sellable/buyable items</li> <li>Key Fields:</li> <li><code>ref</code>: Product reference code</li> <li><code>label</code>: Product name</li> <li><code>price/price_ttc</code>: Pricing information</li> <li><code>stock</code>: Current stock level</li> <li><code>tosell/tobuy</code>: Availability flags</li> <li>Relationships: Used in proposals, orders, and invoices</li> </ul>"},{"location":"database-model/#document-entities","title":"Document Entities","text":""},{"location":"database-model/#propal-commercial-proposals","title":"PROPAL (Commercial Proposals)","text":"<ul> <li>Purpose: Sales quotations and proposals</li> <li>Key Fields:</li> <li><code>ref</code>: Proposal reference</li> <li><code>fk_soc</code>: Customer company</li> <li><code>datep</code>: Proposal date</li> <li><code>fin_validite</code>: Validity date</li> <li><code>fk_statut</code>: Status (draft, sent, accepted, refused)</li> <li>Relationships: Links to customer, contains proposal lines</li> </ul>"},{"location":"database-model/#commande-sales-orders","title":"COMMANDE (Sales Orders)","text":"<ul> <li>Purpose: Confirmed customer orders</li> <li>Key Fields:</li> <li><code>ref</code>: Order reference</li> <li><code>fk_soc</code>: Customer company</li> <li><code>date_commande</code>: Order date</li> <li><code>date_livraison</code>: Delivery date</li> <li><code>fk_statut</code>: Order status</li> <li>Relationships: Generated from proposals, leads to deliveries</li> </ul>"},{"location":"database-model/#facture-invoices","title":"FACTURE (Invoices)","text":"<ul> <li>Purpose: Customer billing documents</li> <li>Key Fields:</li> <li><code>ref</code>: Invoice reference</li> <li><code>fk_soc</code>: Customer company</li> <li><code>datef</code>: Invoice date</li> <li><code>date_lim_reglement</code>: Payment due date</li> <li><code>paye</code>: Payment status</li> <li><code>total_ht/total_ttc</code>: Amounts excluding/including tax</li> <li>Relationships: Generated from orders, linked to payments</li> </ul>"},{"location":"database-model/#supporting-entities","title":"Supporting Entities","text":""},{"location":"database-model/#projet-projects","title":"PROJET (Projects)","text":"<ul> <li>Purpose: Project management and tracking</li> <li>Key Fields:</li> <li><code>ref</code>: Project reference</li> <li><code>title</code>: Project name</li> <li><code>fk_soc</code>: Client company</li> <li><code>budget_amount</code>: Allocated budget</li> <li><code>date_start/date_end</code>: Project timeline</li> <li>Relationships: Links to all related business documents</li> </ul>"},{"location":"database-model/#actioncomm-activitiesevents","title":"ACTIONCOMM (Activities/Events)","text":"<ul> <li>Purpose: CRM activities and communications tracking</li> <li>Key Fields:</li> <li><code>label</code>: Activity description</li> <li><code>datep/datef</code>: Activity timeframe</li> <li><code>fk_soc</code>: Related company</li> <li><code>fk_contact</code>: Related contact</li> <li><code>percent</code>: Completion percentage</li> <li>Relationships: Links to companies, contacts, and projects</li> </ul>"},{"location":"database-model/#stock_mouvement-stock-movements","title":"STOCK_MOUVEMENT (Stock Movements)","text":"<ul> <li>Purpose: Inventory tracking and movements</li> <li>Key Fields:</li> <li><code>fk_product</code>: Product moved</li> <li><code>fk_warehouse</code>: Storage location</li> <li><code>value</code>: Quantity moved</li> <li><code>datem</code>: Movement date</li> <li><code>type</code>: Movement type (in/out/transfer)</li> <li>Relationships: Links products to warehouses with movement history</li> </ul>"},{"location":"database-model/#key-relationships-and-business-rules","title":"Key Relationships and Business Rules","text":""},{"location":"database-model/#1-customer-centric-flow","title":"1. Customer-Centric Flow","text":"<pre><code>Company (SOCIETE) \u2192 Contact (SOCPEOPLE) \u2192 Proposal (PROPAL) \u2192 Order (COMMANDE) \u2192 Invoice (FACTURE) \u2192 Payment\n</code></pre>"},{"location":"database-model/#2-product-management","title":"2. Product Management","text":"<pre><code>Product (PRODUCT) \u2192 Stock Movements (STOCK_MOUVEMENT) \u2194 Warehouse (ENTREPOT)\n</code></pre>"},{"location":"database-model/#3-document-lifecycle","title":"3. Document Lifecycle","text":"<ul> <li>Proposals can be converted to Orders</li> <li>Orders generate Deliveries and Invoices</li> <li>Invoices track Payments</li> <li>All documents can reference Projects</li> </ul>"},{"location":"database-model/#4-user-and-permission-model","title":"4. User and Permission Model","text":"<ul> <li>Users belong to Companies (as employees)</li> <li>Users create and manage all business documents</li> <li>Admin users have system-wide permissions</li> <li>Regular users have entity-based permissions</li> </ul>"},{"location":"database-model/#5-multi-entity-support","title":"5. Multi-Entity Support","text":"<ul> <li>Most entities have an <code>entity</code> field for multi-company setups</li> <li>Enables SaaS-style deployment with data isolation</li> <li>Users can be restricted to specific entities</li> </ul>"},{"location":"database-model/#configuration-and-reference-data","title":"Configuration and Reference Data","text":"<p>The database includes numerous configuration tables (prefixed with <code>c_</code>) that provide: - Payment methods (<code>c_paiement</code>) - Payment terms (<code>c_cond_reglement</code>) - Countries and regions (<code>c_country</code>, <code>c_regions</code>, <code>c_departements</code>) - Currencies (<code>c_currencies</code>) - Tax rates (<code>c_tva</code>) - Product types (<code>c_product_nature</code>) - Document statuses for various entities</p>"},{"location":"database-model/#extensibility-features","title":"Extensibility Features","text":""},{"location":"database-model/#1-extra-fields","title":"1. Extra Fields","text":"<ul> <li>Most entities have corresponding <code>*_extrafields</code> tables</li> <li>Allows custom field additions without schema changes</li> <li>Supports various field types (text, number, date, list, etc.)</li> </ul>"},{"location":"database-model/#2-categories","title":"2. Categories","text":"<ul> <li>Flexible categorization system via <code>CATEGORIE</code> entity</li> <li>Supports hierarchical categories</li> <li>Can categorize companies, products, projects, etc.</li> </ul>"},{"location":"database-model/#3-multi-currency-support","title":"3. Multi-currency Support","text":"<ul> <li>Native multi-currency handling in documents</li> <li>Exchange rate tracking</li> <li>Multi-currency reporting capabilities</li> </ul>"},{"location":"database-model/#4-modular-design","title":"4. Modular Design","text":"<ul> <li>Database structure supports Dolibarr's modular architecture</li> <li>Tables can be enabled/disabled based on active modules</li> <li>Clean separation of concerns between business domains</li> </ul> <p>This database model provides a comprehensive foundation for ERP/CRM operations, supporting the complete business cycle from lead generation through payment collection, while maintaining flexibility for customization and multi-entity deployments.</p>"},{"location":"deployment-scenarios/","title":"Dolibarr Deployment Scenarios","text":"<p>This document outlines various deployment scenarios for the Dolibarr Docker setup, from development environments to production deployments across different infrastructure types.</p>"},{"location":"deployment-scenarios/#quick-reference","title":"Quick Reference","text":"Scenario Profile Database Complexity Use Case Local Development <code>internal-db-tools</code> Internal \ud83d\udfe2 Low Testing, module development Small Business <code>internal-db</code> Internal \ud83d\udfe1 Medium Single-site deployment Enterprise Production <code>external-db</code> External \ud83d\udd34 High Multi-user, high availability Multi-Environment Various External \ud83d\udd34 High Dev/Staging/Prod pipeline Cloud Deployment <code>external-db</code> Cloud \ud83d\udd34 High Scalable cloud infrastructure"},{"location":"deployment-scenarios/#local-development","title":"Local Development","text":""},{"location":"deployment-scenarios/#scenario-overview","title":"Scenario Overview","text":"<p>Perfect for: Developers, module testing, API development, learning Dolibarr.</p> <p>Characteristics: - Single developer machine - Full tooling access (phpMyAdmin) - Demo data for testing - API enabled for development</p>"},{"location":"deployment-scenarios/#quick-setup","title":"Quick Setup","text":"<pre><code># Clone and setup\ngit clone &lt;repository&gt; dolibarr-dev\ncd dolibarr-dev\n\n# Initialize environment\ntask setup:init\n\n# Start with all development tools\ntask services:start-with-tools\n\n# Setup development environment with demo data\ntask config:setup-dev-environment\n\n# Verify setup\ntask utilities:health\ntask config:show-config\n</code></pre>"},{"location":"deployment-scenarios/#development-environment-configuration","title":"Development Environment Configuration","text":"<pre><code># .env for development\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\n\n# Development-friendly passwords\nDB_PASSWORD=dev-password\nDB_ROOT_PASSWORD=dev-root-password\nDOLIBARR_ADMIN_PASSWORD=admin123\n\n# Development settings\nTIMEZONE=America/New_York\n</code></pre>"},{"location":"deployment-scenarios/#access-points","title":"Access Points","text":"Service URL Purpose Dolibarr http://localhost:18080 Main application phpMyAdmin http://localhost:18081 Database management API Explorer http://localhost:18080/api/index.php/explorer API testing"},{"location":"deployment-scenarios/#development-workflow","title":"Development Workflow","text":"<pre><code>flowchart TD\n    START[Start Development] --&gt; SETUP[task services:start-with-tools]\n    SETUP --&gt; CONFIG[task config:setup-dev-environment]\n    CONFIG --&gt; DEVELOP[Develop/Test]\n    DEVELOP --&gt; DEBUG{Need Debugging?}\n    DEBUG --&gt;|Yes| LOGS[task services:logs-app]\n    DEBUG --&gt;|Database| DB[phpMyAdmin]\n    DEBUG --&gt;|API| API[API Explorer]\n    LOGS --&gt; DEVELOP\n    DB --&gt; DEVELOP\n    API --&gt; DEVELOP\n    DEVELOP --&gt; BACKUP[task backup:backup]\n    BACKUP --&gt; STOP[task services:stop]</code></pre>"},{"location":"deployment-scenarios/#custom-module-development","title":"Custom Module Development","text":"<pre><code># Module development structure\n./custom/\n\u251c\u2500\u2500 mymodule/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 admin/\n\u2502   \u2514\u2500\u2500 class/\n\u2514\u2500\u2500 README.md\n\n# Test custom module\n# 1. Place module in ./custom/mymodule/\n# 2. Restart services\ntask services:stop\ntask services:start-with-tools\n\n# 3. Enable in Dolibarr interface\n# Home \u2192 Setup \u2192 Modules/Applications\n</code></pre>"},{"location":"deployment-scenarios/#small-business-production","title":"Small Business Production","text":""},{"location":"deployment-scenarios/#scenario-overview_1","title":"Scenario Overview","text":"<p>Perfect for: Small businesses (1-20 users), single office, straightforward deployment.</p> <p>Characteristics: - Internal database for simplicity - Basic security configurations - Automated backups - Minimal complexity</p>"},{"location":"deployment-scenarios/#production-setup","title":"Production Setup","text":"<pre><code># Production environment setup\ngit clone &lt;repository&gt; dolibarr-production\ncd dolibarr-production\n\n# Configure for production\ncp .env.example .env\n# Edit .env with production settings\n\n# Start production services\ntask services:start\n\n# Configure for business use\ntask config:configure-company\ntask config:enable-modules\n\n# Setup regular backups\n# Add to crontab:\n# 0 2 * * * cd /path/to/dolibarr-production &amp;&amp; task backup:backup\n</code></pre>"},{"location":"deployment-scenarios/#production-environment-configuration","title":"Production Environment Configuration","text":"<pre><code># .env for small business production\nDOLIBARR_PORT=8080\n# Don't expose phpMyAdmin in production\n# PHPMYADMIN_PORT=8081\n\n# Strong passwords\nDB_PASSWORD=your-very-secure-password-here\nDB_ROOT_PASSWORD=your-very-secure-root-password\nDOLIBARR_ADMIN_PASSWORD=your-admin-password\n\n# Company settings\nDOLIBARR_ADMIN_LOGIN=admin\nTIMEZONE=Europe/Paris\n</code></pre>"},{"location":"deployment-scenarios/#security-hardening","title":"Security Hardening","text":"<pre><code># Remove development tools\n# Don't use --profile internal-db-tools\n\n# Regular updates\ntask maintenance:update\n\n# Monitor logs\ntask services:logs-app | tail -f\n\n# Regular health checks\ntask utilities:health\n</code></pre>"},{"location":"deployment-scenarios/#backup-strategy","title":"Backup Strategy","text":"<pre><code>#!/bin/bash\n# backup-script.sh - Add to cron\n\ncd /path/to/dolibarr-production\n\n# Daily backup\ntask backup:backup\n\n# Weekly cleanup - keep last 4 weeks\nfind ./backups/ -name \"*.tar.gz\" -mtime +28 -delete\nfind ./backups/ -name \"*.sql.gz\" -mtime +28 -delete\n\n# Email notification (optional)\necho \"Dolibarr backup completed $(date)\" | mail -s \"Backup Status\" admin@company.com\n</code></pre>"},{"location":"deployment-scenarios/#reverse-proxy-setup-nginx","title":"Reverse Proxy Setup (Nginx)","text":"<pre><code># /etc/nginx/sites-available/dolibarr\nserver {\n    listen 80;\n    server_name dolibarr.yourcompany.com;\n\n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dolibarr.yourcompany.com;\n\n    # SSL configuration\n    ssl_certificate /path/to/certificate.crt;\n    ssl_certificate_key /path/to/private.key;\n\n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # File upload size\n        client_max_body_size 100M;\n    }\n}\n</code></pre>"},{"location":"deployment-scenarios/#enterprise-production","title":"Enterprise Production","text":""},{"location":"deployment-scenarios/#scenario-overview_2","title":"Scenario Overview","text":"<p>Perfect for: Medium to large businesses (20+ users), high availability requirements, compliance needs.</p> <p>Characteristics: - External database (managed or dedicated) - High availability setup - Advanced monitoring - Security compliance - Multi-environment support</p>"},{"location":"deployment-scenarios/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    subgraph \"Load Balancer\"\n        LB[HAProxy/Nginx]\n    end\n\n    subgraph \"Application Tier\"\n        APP1[Dolibarr Instance 1]\n        APP2[Dolibarr Instance 2]\n    end\n\n    subgraph \"Database Tier\"\n        DB[(External Database&lt;br/&gt;MySQL/MariaDB)]\n        REPLICA[(Read Replica)]\n    end\n\n    subgraph \"Storage\"\n        NFS[Shared Storage&lt;br/&gt;NFS/GlusterFS]\n    end\n\n    subgraph \"Monitoring\"\n        PROM[Prometheus]\n        GRAF[Grafana]\n        ALERT[AlertManager]\n    end\n\n    LB --&gt; APP1\n    LB --&gt; APP2\n    APP1 --&gt; DB\n    APP2 --&gt; DB\n    APP1 --&gt; NFS\n    APP2 --&gt; NFS\n    DB --&gt; REPLICA\n\n    APP1 --&gt; PROM\n    APP2 --&gt; PROM\n    DB --&gt; PROM\n    PROM --&gt; GRAF\n    PROM --&gt; ALERT</code></pre>"},{"location":"deployment-scenarios/#high-availability-setup","title":"High Availability Setup","text":"<pre><code># Node 1 setup\ngit clone &lt;repository&gt; /opt/dolibarr-node1\ncd /opt/dolibarr-node1\n\n# Configure for HA\ncp .env.example .env\n# Configure with external database and shared storage\n\n# Start services\ntask services:start-external\n\n# Configure application\ntask config:configure-company\ntask config:enable-modules\n</code></pre>"},{"location":"deployment-scenarios/#external-database-configuration","title":"External Database Configuration","text":"<pre><code># .env for enterprise production\n# Application\nDOLIBARR_PORT=8080\nTIMEZONE=UTC\n\n# External Database\nDB_HOST=mysql.company.internal\nDB_PORT=3306\nDB_NAME=dolibarr_prod\nDB_USER=dolibarr_user\nDB_PASSWORD=${DB_PASSWORD}  # From secrets management\nDB_ROOT_PASSWORD=           # Not needed for external DB\n\n# Admin user\nDOLIBARR_ADMIN_LOGIN=admin\nDOLIBARR_ADMIN_PASSWORD=${ADMIN_PASSWORD}  # From secrets management\n\n# File storage\n# Mount shared storage to ./documents/\n</code></pre>"},{"location":"deployment-scenarios/#docker-compose-override-for-ha","title":"Docker Compose Override for HA","text":"<pre><code># docker-compose.override.yml\nversion: '3.8'\n\nservices:\n  dolibarr:\n    volumes:\n      # Shared storage for documents\n      - /mnt/shared-storage/documents:/var/www/documents\n      - /mnt/shared-storage/html:/var/www/html\n    environment:\n      # Additional environment variables\n      - DOLI_DB_HOST=${DB_HOST}\n      - DOLI_DB_PORT=${DB_PORT}\n    labels:\n      # Labels for monitoring\n      - \"prometheus.io/scrape=true\"\n      - \"prometheus.io/port=8080\"\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n</code></pre>"},{"location":"deployment-scenarios/#monitoring-setup","title":"Monitoring Setup","text":"<pre><code># monitoring/docker-compose.yml\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus-data:/prometheus\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana-dashboards:/var/lib/grafana/dashboards\n\nvolumes:\n  prometheus-data:\n  grafana-data:\n</code></pre>"},{"location":"deployment-scenarios/#multi-environment-setup","title":"Multi-Environment Setup","text":""},{"location":"deployment-scenarios/#scenario-overview_3","title":"Scenario Overview","text":"<p>Perfect for: Development teams, CI/CD pipelines, staged deployments.</p> <p>Characteristics: - Separate dev/staging/production environments - Environment-specific configurations - Data migration between environments - Automated deployments</p>"},{"location":"deployment-scenarios/#environment-structure","title":"Environment Structure","text":"<pre><code># Directory structure\ncompany-dolibarr/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 development/\n\u2502   \u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2502   \u2502   \u251c\u2500\u2500 .env\n\u2502   \u2502   \u2514\u2500\u2500 custom/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u251c\u2500\u2500 docker-compose.yml\n\u2502   \u2502   \u251c\u2500\u2500 .env\n\u2502   \u2502   \u2514\u2500\u2500 backups/\n\u2502   \u2514\u2500\u2500 production/\n\u2502       \u251c\u2500\u2500 docker-compose.yml\n\u2502       \u251c\u2500\u2500 .env\n\u2502       \u251c\u2500\u2500 backups/\n\u2502       \u2514\u2500\u2500 custom/\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u2514\u2500\u2500 scripts/\n\u2514\u2500\u2500 ci-cd/\n    \u251c\u2500\u2500 deploy.sh\n    \u2514\u2500\u2500 migrate.sh\n</code></pre>"},{"location":"deployment-scenarios/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code># Development environment\ncd environments/development\ncat &gt; .env &lt;&lt; EOF\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_PASSWORD=dev-password\nDB_ROOT_PASSWORD=dev-root-password\nDOLIBARR_ADMIN_PASSWORD=admin123\nENVIRONMENT=development\nEOF\n\n# Staging environment\ncd ../staging\ncat &gt; .env &lt;&lt; EOF\nDOLIBARR_PORT=28080\nDB_HOST=staging-db.company.internal\nDB_PASSWORD=${STAGING_DB_PASSWORD}\nDOLIBARR_ADMIN_PASSWORD=${STAGING_ADMIN_PASSWORD}\nENVIRONMENT=staging\nEOF\n\n# Production environment\ncd ../production\ncat &gt; .env &lt;&lt; EOF\nDOLIBARR_PORT=8080\nDB_HOST=prod-db.company.internal\nDB_PASSWORD=${PROD_DB_PASSWORD}\nDOLIBARR_ADMIN_PASSWORD=${PROD_ADMIN_PASSWORD}\nENVIRONMENT=production\nEOF\n</code></pre>"},{"location":"deployment-scenarios/#deployment-pipeline","title":"Deployment Pipeline","text":"<pre><code>#!/bin/bash\n# ci-cd/deploy.sh\n\nENVIRONMENT=$1\nTARGET_DIR=\"environments/$ENVIRONMENT\"\n\nif [ ! -d \"$TARGET_DIR\" ]; then\n    echo \"Environment $ENVIRONMENT not found\"\n    exit 1\nfi\n\ncd \"$TARGET_DIR\"\n\necho \"Deploying to $ENVIRONMENT environment...\"\n\n# Backup current state (staging/production only)\nif [ \"$ENVIRONMENT\" != \"development\" ]; then\n    task backup:backup\nfi\n\n# Deploy based on environment\ncase $ENVIRONMENT in\n    \"development\")\n        task services:start-with-tools\n        task config:setup-dev-environment\n        ;;\n    \"staging\")\n        task services:start-external\n        task config:configure-company\n        task config:enable-modules\n        ;;\n    \"production\")\n        task services:start-external\n        task config:configure-company\n        task config:enable-modules\n        # Additional production steps\n        task utilities:health\n        ;;\nesac\n\necho \"Deployment to $ENVIRONMENT completed\"\n</code></pre>"},{"location":"deployment-scenarios/#data-migration-between-environments","title":"Data Migration Between Environments","text":"<pre><code>#!/bin/bash\n# ci-cd/migrate.sh\n\nSOURCE_ENV=$1\nTARGET_ENV=$2\n\necho \"Migrating data from $SOURCE_ENV to $TARGET_ENV\"\n\n# Create backup from source\ncd \"environments/$SOURCE_ENV\"\ntask backup:backup-db\nBACKUP_FILE=$(ls -t backups/*.sql.gz | head -1)\n\n# Restore to target\ncd \"../$TARGET_ENV\"\ntask backup:restore-db BACKUP_FILE=\"../../$SOURCE_ENV/$BACKUP_FILE\"\n\n# Update environment-specific data\ndocker-compose exec dolibarr php -r \"\nrequire_once '/var/www/html/master.inc.php';\n// Update company information for target environment\ndolibarr_set_const(\\$db, 'MAIN_INFO_SOCIETE_NOM', '$TARGET_ENV Environment', 'chaine', 0, '', 0);\n\"\n\necho \"Migration completed\"\n</code></pre>"},{"location":"deployment-scenarios/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"deployment-scenarios/#scenario-overview_4","title":"Scenario Overview","text":"<p>Perfect for: Scalable deployments, global access, managed infrastructure.</p> <p>Characteristics: - Cloud-native architecture - Auto-scaling capabilities - Managed database services - Container orchestration (Kubernetes)</p>"},{"location":"deployment-scenarios/#aws-deployment","title":"AWS Deployment","text":""},{"location":"deployment-scenarios/#ecs-with-rds","title":"ECS with RDS","text":"<pre><code>{\n  \"taskDefinition\": {\n    \"family\": \"dolibarr-app\",\n    \"networkMode\": \"awsvpc\",\n    \"requiresCompatibilities\": [\"FARGATE\"],\n    \"cpu\": \"512\",\n    \"memory\": \"1024\",\n    \"executionRoleArn\": \"arn:aws:iam::account:role/ecsTaskExecutionRole\",\n    \"taskRoleArn\": \"arn:aws:iam::account:role/ecsTaskRole\",\n    \"containerDefinitions\": [\n      {\n        \"name\": \"dolibarr\",\n        \"image\": \"dolibarr/dolibarr:latest\",\n        \"portMappings\": [\n          {\n            \"containerPort\": 80,\n            \"protocol\": \"tcp\"\n          }\n        ],\n        \"environment\": [\n          {\n            \"name\": \"DOLI_DB_HOST\",\n            \"value\": \"dolibarr-db.cluster-xyz.us-west-2.rds.amazonaws.com\"\n          },\n          {\n            \"name\": \"DOLI_DB_NAME\",\n            \"value\": \"dolibarr\"\n          }\n        ],\n        \"secrets\": [\n          {\n            \"name\": \"DOLI_DB_PASSWORD\",\n            \"valueFrom\": \"arn:aws:secretsmanager:us-west-2:account:secret:dolibarr-db-password\"\n          }\n        ],\n        \"logConfiguration\": {\n          \"logDriver\": \"awslogs\",\n          \"options\": {\n            \"awslogs-group\": \"/ecs/dolibarr\",\n            \"awslogs-region\": \"us-west-2\",\n            \"awslogs-stream-prefix\": \"ecs\"\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"deployment-scenarios/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># k8s/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dolibarr\n---\n# k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dolibarr\n  namespace: dolibarr\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dolibarr\n  template:\n    metadata:\n      labels:\n        app: dolibarr\n    spec:\n      containers:\n      - name: dolibarr\n        image: dolibarr/dolibarr:latest\n        ports:\n        - containerPort: 80\n        env:\n        - name: DOLI_DB_HOST\n          value: \"mysql-service\"\n        - name: DOLI_DB_NAME\n          value: \"dolibarr\"\n        - name: DOLI_DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: db-credentials\n              key: username\n        - name: DOLI_DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: db-credentials\n              key: password\n        volumeMounts:\n        - name: dolibarr-documents\n          mountPath: /var/www/documents\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: dolibarr-documents\n        persistentVolumeClaim:\n          claimName: dolibarr-documents-pvc\n---\n# k8s/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: dolibarr-service\n  namespace: dolibarr\nspec:\n  selector:\n    app: dolibarr\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\n# k8s/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: dolibarr-ingress\n  namespace: dolibarr\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - dolibarr.company.com\n    secretName: dolibarr-tls\n  rules:\n  - host: dolibarr.company.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: dolibarr-service\n            port:\n              number: 80\n</code></pre>"},{"location":"deployment-scenarios/#google-cloud-platform-deployment","title":"Google Cloud Platform Deployment","text":""},{"location":"deployment-scenarios/#cloud-run","title":"Cloud Run","text":"<pre><code># cloudbuild.yaml\nsteps:\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['build', '-t', 'gcr.io/$PROJECT_ID/dolibarr:$COMMIT_SHA', '.']\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['push', 'gcr.io/$PROJECT_ID/dolibarr:$COMMIT_SHA']\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: gcloud\n    args:\n    - 'run'\n    - 'deploy'\n    - 'dolibarr'\n    - '--image'\n    - 'gcr.io/$PROJECT_ID/dolibarr:$COMMIT_SHA'\n    - '--region'\n    - 'us-central1'\n    - '--platform'\n    - 'managed'\n    - '--set-env-vars'\n    - 'DOLI_DB_HOST=${_DB_HOST},DOLI_DB_NAME=${_DB_NAME}'\n    - '--set-secrets'\n    - 'DOLI_DB_PASSWORD=dolibarr-db-password:latest'\n</code></pre>"},{"location":"deployment-scenarios/#deployment-best-practices","title":"Deployment Best Practices","text":""},{"location":"deployment-scenarios/#security-considerations","title":"Security Considerations","text":"<pre><code># Production security checklist\n\u2705 Change all default passwords\n\u2705 Use external database with restricted access\n\u2705 Enable HTTPS/TLS\n\u2705 Regular security updates\n\u2705 Restrict network access\n\u2705 Use secrets management\n\u2705 Enable audit logging\n\u2705 Regular security scans\n\u2705 Backup encryption\n\u2705 Access control and 2FA\n</code></pre>"},{"location":"deployment-scenarios/#performance-optimization","title":"Performance Optimization","text":"<pre><code># docker-compose.override.yml for performance\nversion: '3.8'\n\nservices:\n  dolibarr:\n    environment:\n      # PHP performance settings\n      - PHP_MAX_EXECUTION_TIME=300\n      - PHP_MEMORY_LIMIT=512M\n      - PHP_MAX_FILE_UPLOADS=20\n      - PHP_UPLOAD_MAX_FILESIZE=100M\n      - PHP_POST_MAX_SIZE=100M\n    deploy:\n      resources:\n        limits:\n          cpus: '2'\n          memory: 2G\n        reservations:\n          cpus: '0.5'\n          memory: 512M\n</code></pre>"},{"location":"deployment-scenarios/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<pre><code># monitoring/alerts.yml\ngroups:\n- name: dolibarr\n  rules:\n  - alert: DolibarrDown\n    expr: up{job=\"dolibarr\"} == 0\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Dolibarr instance is down\"\n\n  - alert: HighMemoryUsage\n    expr: container_memory_usage_bytes{name=\"dolibarr\"} / container_spec_memory_limit_bytes{name=\"dolibarr\"} &gt; 0.9\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High memory usage in Dolibarr container\"\n\n  - alert: DatabaseConnectionError\n    expr: mysql_up{instance=\"db\"} == 0\n    for: 2m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Database connection lost\"\n</code></pre>"},{"location":"deployment-scenarios/#migration-strategies","title":"Migration Strategies","text":""},{"location":"deployment-scenarios/#from-bare-metal-to-docker","title":"From Bare Metal to Docker","text":"<pre><code>#!/bin/bash\n# migration/bare-metal-to-docker.sh\n\necho \"Migrating from bare metal Dolibarr to Docker\"\n\n# 1. Backup existing installation\nmysqldump -u root -p dolibarr &gt; dolibarr-migration.sql\n\n# 2. Copy documents\ncp -r /var/www/html/documents ./migration-documents/\n\n# 3. Copy custom modules\ncp -r /var/www/html/custom ./migration-custom/\n\n# 4. Setup Docker environment\ntask setup:init\ntask services:start-external\n\n# 5. Restore database\ntask backup:restore-db BACKUP_FILE=dolibarr-migration.sql\n\n# 6. Copy documents and custom modules\ncp -r ./migration-documents/* ./documents/\ncp -r ./migration-custom/* ./custom/\n\n# 7. Update configuration\ntask config:configure-company\n\necho \"Migration completed. Please test thoroughly before decommissioning old server.\"\n</code></pre>"},{"location":"deployment-scenarios/#version-upgrades","title":"Version Upgrades","text":"<pre><code>#!/bin/bash\n# migration/upgrade.sh\n\nCURRENT_VERSION=$(docker-compose exec dolibarr cat /var/www/html/filefunc.inc.php | grep \"DOL_VERSION\" | head -1)\necho \"Current version: $CURRENT_VERSION\"\n\n# 1. Create backup before upgrade\ntask backup:backup\n\n# 2. Pull latest images\ndocker-compose pull\n\n# 3. Stop services\ntask services:stop\n\n# 4. Start with new version\ntask services:start\n\n# 5. Run database updates (if needed)\ndocker-compose exec dolibarr php /var/www/html/install/repair.php\n\n# 6. Verify upgrade\ntask utilities:health\ntask config:show-config\n\necho \"Upgrade completed successfully\"\n</code></pre>"},{"location":"deployment-scenarios/#conclusion","title":"Conclusion","text":"<p>Choose the deployment scenario that best matches your requirements:</p> <ul> <li>Start simple with local development for learning and testing</li> <li>Scale up to small business production for straightforward deployments</li> <li>Implement enterprise patterns for high availability and compliance</li> <li>Adopt cloud-native approaches for scalability and global reach</li> </ul> <p>Each scenario builds upon the previous one, allowing you to start small and scale as your needs grow.</p>"},{"location":"docker-setup/","title":"Docker Setup Guide","text":"<p>This guide provides comprehensive instructions for deploying Dolibarr ERP/CRM using Docker Compose with support for both internal and external databases.</p>"},{"location":"docker-setup/#architecture-overview","title":"Architecture Overview","text":""},{"location":"docker-setup/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Docker Host\"\n        subgraph \"Dolibarr Network\"\n            APP[\"\ud83c\udf10 Dolibarr Application&lt;br/&gt;Port: 8080\"]\n            DB[(\"\ud83d\uddc4\ufe0f MariaDB Database&lt;br/&gt;Port: 3306\")]\n            PMA[\"\ud83d\udd27 phpMyAdmin&lt;br/&gt;Port: 8081\"]\n        end\n\n        subgraph \"Docker Volumes\"\n            V1[(\"\ud83d\udcc1 dolibarr-html&lt;br/&gt;Application Files\")]\n            V2[(\"\ud83d\udcc4 dolibarr-documents&lt;br/&gt;User Documents\")]\n            V3[(\"\ud83d\udcbe dolibarr-db-data&lt;br/&gt;Database Storage\")]\n        end\n\n        subgraph \"Host Directories\"\n            CUSTOM[\"\ud83d\udce6 ./custom/&lt;br/&gt;Custom Modules\"]\n            LOGS[\"\ud83d\udccb ./logs/&lt;br/&gt;Application Logs\"]\n            INIT[\"\u2699\ufe0f ./db-init/&lt;br/&gt;DB Init Scripts\"]\n            BACKUP[\"\ud83d\udcbe ./backups/&lt;br/&gt;Backup Storage\"]\n        end\n    end\n\n    subgraph \"External\"\n        USER[\"\ud83d\udc64 User\"]\n        ADMIN[\"\ud83d\udc68\u200d\ud83d\udcbc Admin\"]\n        EXTDB[(\"\ud83c\udf10 External Database&lt;br/&gt;MySQL/MariaDB\")]\n    end\n\n    USER --&gt;|\"HTTP:8080\"| APP\n    ADMIN --&gt;|\"HTTP:8081\"| PMA\n    APP --&gt; V1\n    APP --&gt; V2\n    APP --&gt; CUSTOM\n    APP --&gt; LOGS\n    DB --&gt; V3\n    DB --&gt; INIT\n    PMA --&gt; DB\n    APP --&gt;|\"Profile: internal-db\"| DB\n    APP -.-&gt;|\"Profile: external-db\"| EXTDB\n\n    style APP fill:#e1f5fe\n    style DB fill:#f3e5f5\n    style PMA fill:#fff3e0\n    style EXTDB fill:#ffebee</code></pre>"},{"location":"docker-setup/#container-services","title":"Container Services","text":"Service Image Purpose Ports dolibarr <code>dolibarr/dolibarr:latest</code> Main ERP/CRM application 8080 dolibarr-db <code>mariadb:10.11</code> Internal database 3306 phpmyadmin <code>phpmyadmin/phpmyadmin:latest</code> Database management 8081"},{"location":"docker-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"docker-setup/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Linux, macOS, or Windows with Docker support</li> <li>Docker: Version 20.10.0 or higher</li> <li>Docker Compose: Version 2.0.0 or higher</li> <li>Memory: Minimum 2GB RAM (4GB recommended)</li> <li>Storage: At least 10GB free space for data and backups</li> </ul>"},{"location":"docker-setup/#required-tools","title":"Required Tools","text":"<pre><code># Docker &amp; Docker Compose\ndocker --version          # Should be 20.10.0+\ndocker-compose --version  # Should be 2.0.0+\n\n# Task automation (recommended)\nbrew install go-task/tap/go-task  # macOS\n# or download from https://taskfile.dev/\n</code></pre>"},{"location":"docker-setup/#quick-start","title":"Quick Start","text":""},{"location":"docker-setup/#1-repository-setup","title":"1. Repository Setup","text":"<pre><code>git clone &lt;repository-url&gt; dolibarr-docker\ncd dolibarr-docker\n</code></pre>"},{"location":"docker-setup/#2-environment-configuration","title":"2. Environment Configuration","text":"<pre><code># Copy the example environment file\ncp .env.example .env\n\n# Edit environment variables\nnano .env  # or use your preferred editor\n</code></pre>"},{"location":"docker-setup/#3-environment-variables","title":"3. Environment Variables","text":"Variable Description Default Required <code>DOLIBARR_PORT</code> Web interface port 8080 No <code>PHPMYADMIN_PORT</code> phpMyAdmin port 8081 No <code>DB_EXTERNAL_PORT</code> Database external port 3306 No <code>DB_NAME</code> Database name dolibarr Yes <code>DB_USER</code> Database username dolibarr Yes <code>DB_PASSWORD</code> Database password CHANGE! Yes <code>DB_ROOT_PASSWORD</code> Database root password CHANGE! Yes <code>DOLIBARR_ADMIN_LOGIN</code> Admin username admin Yes <code>DOLIBARR_ADMIN_PASSWORD</code> Admin password CHANGE! Yes <code>TIMEZONE</code> Application timezone Europe/Paris No"},{"location":"docker-setup/#4-security-configuration","title":"4. Security Configuration","text":"<p>\u26a0\ufe0f CRITICAL: Update these default passwords before starting:</p> <pre><code># Strong password requirements:\n# - Minimum 12 characters\n# - Mix of upper/lowercase, numbers, symbols\n# - No dictionary words\n\nDB_PASSWORD=your_very_secure_database_password_here\nDB_ROOT_PASSWORD=your_very_secure_root_password_here\nDOLIBARR_ADMIN_PASSWORD=your_very_secure_admin_password_here\n</code></pre>"},{"location":"docker-setup/#5-start-services","title":"5. Start Services","text":"<pre><code># Option 1: Internal database (recommended for testing)\ndocker-compose --profile internal-db up -d\n\n# Option 2: Internal database with phpMyAdmin\ndocker-compose --profile internal-db --profile internal-db-tools up -d\n\n# Option 3: External database\ndocker-compose --profile external-db up -d\n</code></pre>"},{"location":"docker-setup/#deployment-profiles","title":"Deployment Profiles","text":""},{"location":"docker-setup/#profile-internal-db","title":"Profile: internal-db","text":"<p>Use Case: Complete standalone deployment with containerized database.</p> <p>Services Started: - Dolibarr application - MariaDB database container</p> <p>Command: <pre><code>docker-compose --profile internal-db up -d\n</code></pre></p> <p>Data Storage: - Database: Docker volume <code>dolibarr-db-data</code> - Documents: Docker volume <code>dolibarr-documents</code> - Application: Docker volume <code>dolibarr-html</code></p>"},{"location":"docker-setup/#profile-internal-db-tools","title":"Profile: internal-db-tools","text":"<p>Use Case: Development/administration with database management interface.</p> <p>Services Started: - Dolibarr application - MariaDB database container - phpMyAdmin interface</p> <p>Command: <pre><code>docker-compose --profile internal-db --profile internal-db-tools up -d\n</code></pre></p> <p>Access Points: - Dolibarr: http://localhost:8080 - phpMyAdmin: http://localhost:8081</p>"},{"location":"docker-setup/#profile-external-db","title":"Profile: external-db","text":"<p>Use Case: Production deployment with existing database infrastructure.</p> <p>Services Started: - Dolibarr application only</p> <p>Requirements: - Existing MySQL 5.7+ or MariaDB 10.3+ instance - Database user with appropriate privileges - Network connectivity from Docker containers</p> <p>Command: <pre><code>docker-compose --profile external-db up -d\n</code></pre></p>"},{"location":"docker-setup/#external-database-configuration","title":"External Database Configuration","text":""},{"location":"docker-setup/#database-requirements","title":"Database Requirements","text":"<ul> <li>MySQL: Version 5.7 or higher</li> <li>MariaDB: Version 10.3 or higher</li> <li>Character Set: UTF8MB4 support required</li> <li>Storage Engine: InnoDB recommended</li> </ul>"},{"location":"docker-setup/#user-privileges","title":"User Privileges","text":"<pre><code>-- Create database and user\nCREATE DATABASE dolibarr CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'dolibarr'@'%' IDENTIFIED BY 'your_secure_password';\n\n-- Grant necessary privileges\nGRANT CREATE, ALTER, INSERT, UPDATE, DELETE, SELECT, INDEX, DROP, \n      CREATE TEMPORARY TABLES, LOCK TABLES ON dolibarr.* TO 'dolibarr'@'%';\n\n-- Apply changes\nFLUSH PRIVILEGES;\n</code></pre>"},{"location":"docker-setup/#environment-configuration","title":"Environment Configuration","text":"<pre><code># External database settings\nDB_HOST=your-database-host.example.com\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr\nDB_PASSWORD=your_secure_password\nDB_ROOT_PASSWORD=  # Leave empty for external database\n</code></pre>"},{"location":"docker-setup/#network-connectivity","title":"Network Connectivity","text":"<p>Ensure Docker containers can reach your external database:</p> <pre><code># Test connectivity from Docker network\ndocker run --rm --network dolibarr_default mysql:8.0 \\\n  mysql -h your-database-host.example.com -u dolibarr -p -e \"SELECT 1\"\n</code></pre>"},{"location":"docker-setup/#data-persistence","title":"Data Persistence","text":""},{"location":"docker-setup/#docker-volumes","title":"Docker Volumes","text":"Volume Purpose Backup Priority <code>dolibarr-html</code> Application files, modules Medium <code>dolibarr-documents</code> User documents, uploads High <code>dolibarr-db-data</code> Database storage Critical"},{"location":"docker-setup/#host-directories","title":"Host Directories","text":"Directory Purpose Version Control <code>./custom/</code> Custom modules Include <code>./logs/</code> Application logs Exclude <code>./db-init/</code> Database init scripts Include <code>./backups/</code> Backup storage Exclude"},{"location":"docker-setup/#network-configuration","title":"Network Configuration","text":""},{"location":"docker-setup/#internal-network","title":"Internal Network","text":"<p>Docker Compose creates an internal network <code>dolibarr_default</code> with: - Automatic service discovery - Isolated container communication - Configurable external port exposure</p>"},{"location":"docker-setup/#port-mapping","title":"Port Mapping","text":"<pre><code>services:\n  dolibarr:\n    ports:\n      - \"${DOLIBARR_PORT:-8080}:80\"\n\n  dolibarr-db:\n    ports:\n      - \"${DB_EXTERNAL_PORT:-3306}:3306\"  # Optional external access\n\n  phpmyadmin:\n    ports:\n      - \"${PHPMYADMIN_PORT:-8081}:80\"\n</code></pre>"},{"location":"docker-setup/#firewall-considerations","title":"Firewall Considerations","text":"<p>For production deployments: <pre><code># Allow only necessary ports\nufw allow 8080/tcp  # Dolibarr web interface\n# ufw allow 3306/tcp  # Database (only if needed externally)\nufw deny 8081/tcp   # Block phpMyAdmin in production\n</code></pre></p>"},{"location":"docker-setup/#health-monitoring","title":"Health Monitoring","text":""},{"location":"docker-setup/#container-health-checks","title":"Container Health Checks","text":"<pre><code># Check all container status\ndocker-compose ps\n\n# View container health\ndocker inspect dolibarr_dolibarr_1 | grep -A 5 '\"Health\"'\n\n# Check logs\ndocker-compose logs dolibarr\n</code></pre>"},{"location":"docker-setup/#database-health-check","title":"Database Health Check","text":"<pre><code># Built-in health check script\ndocker-compose exec dolibarr-db healthcheck.sh --connect\n\n# Manual connection test\ndocker-compose exec dolibarr-db mysql -u root -p -e \"SELECT 1\"\n</code></pre>"},{"location":"docker-setup/#application-health-check","title":"Application Health Check","text":"<pre><code># HTTP health check\ncurl -f http://localhost:8080 || echo \"Application unreachable\"\n\n# Detailed status check\ncurl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080\n</code></pre>"},{"location":"docker-setup/#performance-tuning","title":"Performance Tuning","text":""},{"location":"docker-setup/#database-optimization","title":"Database Optimization","text":"<pre><code># Add to db-init/mysql-custom.cnf\n[mysqld]\ninnodb_buffer_pool_size = 256M\ninnodb_log_file_size = 64M\ninnodb_flush_log_at_trx_commit = 2\nquery_cache_type = 1\nquery_cache_size = 32M\nmax_connections = 100\n</code></pre>"},{"location":"docker-setup/#container-resource-limits","title":"Container Resource Limits","text":"<pre><code>services:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 256M\n          cpus: '0.25'\n\n  dolibarr-db:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n        reservations:\n          memory: 256M\n          cpus: '0.25'\n</code></pre>"},{"location":"docker-setup/#security-best-practices","title":"Security Best Practices","text":""},{"location":"docker-setup/#production-security-checklist","title":"Production Security Checklist","text":"<ul> <li>[ ] Change all default passwords</li> <li>[ ] Disable external database port (remove ports section)</li> <li>[ ] Disable phpMyAdmin profile in production</li> <li>[ ] Use Docker secrets instead of environment variables</li> <li>[ ] Enable SSL/TLS with reverse proxy</li> <li>[ ] Regular security updates</li> <li>[ ] Network firewall rules</li> <li>[ ] File permission auditing</li> </ul>"},{"location":"docker-setup/#ssltls-with-reverse-proxy","title":"SSL/TLS with Reverse Proxy","text":"<p>Example nginx configuration: <pre><code>server {\n    listen 443 ssl http2;\n    server_name your-domain.com;\n\n    ssl_certificate /path/to/certificate.crt;\n    ssl_certificate_key /path/to/private.key;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre></p>"},{"location":"docker-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-setup/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port Conflicts <pre><code># Check port usage\nnetstat -tulpn | grep :8080\n\n# Change port in .env\nDOLIBARR_PORT=8090\n</code></pre></p> </li> <li> <p>Database Connection Failed <pre><code># Check database logs\ndocker-compose logs dolibarr-db\n\n# Verify credentials\ndocker-compose exec dolibarr-db mysql -u dolibarr -p\n</code></pre></p> </li> <li> <p>Permission Issues <pre><code># Fix file permissions\ndocker-compose exec dolibarr chown -R www-data:www-data /var/www/html\n</code></pre></p> </li> <li> <p>Out of Memory <pre><code># Check container resource usage\ndocker stats\n\n# Increase memory limits in docker-compose.yml\n</code></pre></p> </li> </ol>"},{"location":"docker-setup/#log-analysis","title":"Log Analysis","text":"<pre><code># Application logs\ndocker-compose logs -f dolibarr\n\n# Database logs\ndocker-compose logs -f dolibarr-db\n\n# System resource monitoring\ndocker stats --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\"\n</code></pre>"},{"location":"docker-setup/#maintenance-operations","title":"Maintenance Operations","text":""},{"location":"docker-setup/#updates","title":"Updates","text":"<pre><code># Pull latest images\ndocker-compose pull\n\n# Restart with new images\ndocker-compose up -d --force-recreate\n\n# Clean up old images\ndocker image prune -f\n</code></pre>"},{"location":"docker-setup/#backup-operations","title":"Backup Operations","text":"<pre><code># Create backup (using task automation)\ntask backup:backup\n\n# Manual database backup\ndocker-compose exec -T dolibarr-db mysqldump \\\n  -u root -p$DB_ROOT_PASSWORD --single-transaction \\\n  --routines --triggers dolibarr | gzip &gt; backup.sql.gz\n</code></pre>"},{"location":"docker-setup/#system-cleanup","title":"System Cleanup","text":"<pre><code># Stop all services\ndocker-compose down\n\n# Remove volumes (DESTRUCTIVE!)\ndocker-compose down -v\n\n# Clean up system\ndocker system prune -f --volumes\n</code></pre> <p>This comprehensive guide covers all aspects of Docker deployment for Dolibarr, from basic setup to production-ready configurations.</p>"},{"location":"modules-status/","title":"Dolibarr Modules Status","text":"<p>This document provides a comprehensive overview of the Dolibarr modules available in this installation, including their enablement status and associated database tables.</p>"},{"location":"modules-status/#currently-enabled-core-modules","title":"Currently Enabled Core Modules","text":"<p>Based on the database configuration (<code>llx_const</code> table), the following core modules are currently enabled:</p>"},{"location":"modules-status/#adherent-member-management","title":"\u2705 ADHERENT - Member Management","text":"<ul> <li>Status: <code>ENABLED</code></li> <li>Purpose: Manage members, subscriptions, and membership types</li> <li>Tables: </li> <li><code>llx_adherent</code> - Member records</li> <li><code>llx_adherent_extrafields</code> - Custom member fields</li> <li><code>llx_adherent_type</code> - Membership types</li> <li><code>llx_adherent_type_extrafields</code> - Custom membership type fields</li> <li><code>llx_adherent_type_lang</code> - Multi-language support</li> </ul>"},{"location":"modules-status/#fournisseur-supplier-management","title":"\u2705 FOURNISSEUR - Supplier Management","text":"<ul> <li>Status: <code>ENABLED</code></li> <li>Purpose: Manage suppliers, supplier orders, and supplier invoices</li> <li>Tables:</li> <li><code>llx_commande_fournisseur*</code> - Supplier orders</li> <li><code>llx_facture_fourn*</code> - Supplier invoices</li> <li><code>llx_supplier_proposal*</code> - Supplier proposals</li> </ul>"},{"location":"modules-status/#societe-third-party-management","title":"\u2705 SOCIETE - Third Party Management","text":"<ul> <li>Status: <code>ENABLED</code> </li> <li>Purpose: Core module for managing companies, customers, and suppliers</li> <li>Tables:</li> <li><code>llx_societe*</code> - Company records</li> <li><code>llx_socpeople</code> - Contacts within companies</li> </ul>"},{"location":"modules-status/#user-user-management","title":"\u2705 USER - User Management","text":"<ul> <li>Status: <code>ENABLED</code></li> <li>Purpose: System user accounts and permissions</li> <li>Tables:</li> <li><code>llx_user*</code> - User accounts and profiles</li> <li><code>llx_usergroup*</code> - User groups and permissions</li> </ul>"},{"location":"modules-status/#available-modules-by-category","title":"Available Modules by Category","text":"<p>Based on the database table structure analysis, the following modules are available (tables present) in this Dolibarr installation:</p>"},{"location":"modules-status/#financial-accounting-modules","title":"\ud83d\udcca Financial &amp; Accounting Modules","text":""},{"location":"modules-status/#accounting","title":"\ud83d\udcb0 Accounting","text":"<ul> <li>Tables: <code>llx_accounting_*</code> (8 tables)</li> <li>Features: Chart of accounts, bookkeeping, fiscal years, journals</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#banking-payments","title":"\ud83c\udfe6 Banking &amp; Payments","text":"<ul> <li>Tables: <code>llx_bank*</code>, <code>llx_payment*</code>, <code>llx_paiement*</code> (15+ tables)  </li> <li>Features: Bank accounts, payment tracking, reconciliation</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#invoicing-billing","title":"\ud83d\udcc4 Invoicing &amp; Billing","text":"<ul> <li>Tables: <code>llx_facture*</code>, <code>llx_facturedet*</code> (10+ tables)</li> <li>Features: Customer invoices, recurring invoices, invoice lines</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#sales-commerce-modules","title":"\ud83d\uded2 Sales &amp; Commerce Modules","text":""},{"location":"modules-status/#commercial-proposals","title":"\ud83d\udcbc Commercial Proposals","text":"<ul> <li>Tables: <code>llx_propal*</code>, <code>llx_propaldet*</code> (5+ tables)</li> <li>Features: Quotations, proposal management, conversion to orders</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#orders-commands","title":"\ud83d\udccb Orders &amp; Commands","text":"<ul> <li>Tables: <code>llx_commande*</code>, <code>llx_commandedet*</code> (6+ tables)</li> <li>Features: Customer orders, order lines, order tracking</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#expeditions-deliveries","title":"\ud83d\udce6 Expeditions &amp; Deliveries","text":"<ul> <li>Tables: <code>llx_expedition*</code>, <code>llx_delivery*</code> (8+ tables)</li> <li>Features: Shipping management, delivery tracking, packaging</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#inventory-product-modules","title":"\ud83d\udce6 Inventory &amp; Product Modules","text":""},{"location":"modules-status/#product-management","title":"\ud83c\udfed Product Management","text":"<ul> <li>Tables: <code>llx_product*</code> (25+ tables)</li> <li>Features: Product catalog, variants, pricing, stock management</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#stock-warehouse","title":"\ud83d\udcca Stock &amp; Warehouse","text":"<ul> <li>Tables: <code>llx_stock_*</code>, <code>llx_entrepot*</code>, <code>llx_inventory*</code> (10+ tables)</li> <li>Features: Inventory tracking, warehouse management, stock movements</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#stock-transfers","title":"\ud83d\udd04 Stock Transfers","text":"<ul> <li>Tables: <code>llx_stocktransfer_*</code> (4+ tables)</li> <li>Features: Inter-warehouse transfers, transfer tracking</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#crm-project-modules","title":"\ud83d\udc65 CRM &amp; Project Modules","text":""},{"location":"modules-status/#activities-communications","title":"\ud83d\udcde Activities &amp; Communications","text":"<ul> <li>Tables: <code>llx_actioncomm*</code> (4+ tables)</li> <li>Features: CRM activities, reminders, communication tracking</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#project-management","title":"\ud83c\udfaf Project Management","text":"<ul> <li>Tables: <code>llx_projet*</code>, <code>llx_projet_task*</code> (4+ tables)</li> <li>Features: Projects, tasks, time tracking, project billing</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#ticket-system","title":"\ud83c\udf9f\ufe0f Ticket System","text":"<ul> <li>Tables: <code>llx_ticket*</code> (2+ tables)</li> <li>Features: Support tickets, issue tracking, customer service</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#hr-employee-modules","title":"\ud83d\udc68\u200d\ud83d\udcbc HR &amp; Employee Modules","text":""},{"location":"modules-status/#holiday-management","title":"\ud83c\udfd6\ufe0f Holiday Management","text":"<ul> <li>Tables: <code>llx_holiday*</code> (5+ tables)</li> <li>Features: Leave requests, holiday tracking, approval workflows</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#human-resources","title":"\ud83d\udcbc Human Resources","text":"<ul> <li>Tables: <code>llx_hrm_*</code> (8+ tables)</li> <li>Features: Job positions, skills, evaluations, HR management</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#salary-expenses","title":"\ud83d\udcb0 Salary &amp; Expenses","text":"<ul> <li>Tables: <code>llx_salary*</code>, <code>llx_expensereport*</code> (8+ tables)</li> <li>Features: Payroll, expense reports, reimbursements</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#recruitment","title":"\ud83d\udc54 Recruitment","text":"<ul> <li>Tables: <code>llx_recruitment_*</code> (4+ tables)</li> <li>Features: Job positions, candidate management, recruitment process</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#manufacturing-operations","title":"\ud83c\udfed Manufacturing &amp; Operations","text":""},{"location":"modules-status/#manufacturing-mrp","title":"\ud83d\udd27 Manufacturing (MRP)","text":"<ul> <li>Tables: <code>llx_mrp_*</code>, <code>llx_bom_*</code> (8+ tables)</li> <li>Features: Manufacturing orders, bill of materials, production planning</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#workstations","title":"\ud83c\udfed Workstations","text":"<ul> <li>Tables: <code>llx_workstation_*</code> (3+ tables)</li> <li>Features: Production workstations, resource management</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#assets-management","title":"\ud83d\udc8e Assets Management","text":"<ul> <li>Tables: <code>llx_asset*</code> (8+ tables)</li> <li>Features: Fixed assets, depreciation, asset tracking</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#communication-marketing","title":"\ud83d\udce7 Communication &amp; Marketing","text":""},{"location":"modules-status/#email-marketing","title":"\ud83d\udcee Email Marketing","text":"<ul> <li>Tables: <code>llx_mailing*</code>, <code>llx_emailcollector*</code> (7+ tables)</li> <li>Features: Email campaigns, mass mailing, email collection</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#website-management","title":"\ud83c\udf10 Website Management","text":"<ul> <li>Tables: <code>llx_website*</code> (3+ tables)</li> <li>Features: Website builder, page management, web content</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#partnerships-contracts","title":"\ud83e\udd1d Partnerships &amp; Contracts","text":""},{"location":"modules-status/#partnerships","title":"\ud83e\udd1d Partnerships","text":"<ul> <li>Tables: <code>llx_partnership*</code> (2+ tables)</li> <li>Features: Partner management, partnership tracking</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#contracts-services","title":"\ud83d\udccb Contracts &amp; Services","text":"<ul> <li>Tables: <code>llx_contrat*</code>, <code>llx_fichinter*</code> (8+ tables)</li> <li>Features: Service contracts, interventions, recurring services</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#point-of-sale-retail","title":"\ud83d\udcb3 Point of Sale &amp; Retail","text":""},{"location":"modules-status/#point-of-sale-pos","title":"\ud83d\uded2 Point of Sale (POS)","text":"<ul> <li>Tables: <code>llx_pos_*</code>, <code>llx_takepos_*</code> (3+ tables)</li> <li>Features: POS interface, cash management, restaurant orders</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#advanced-features","title":"\ud83d\udcc8 Advanced Features","text":""},{"location":"modules-status/#multi-currency","title":"\ud83d\udcb1 Multi-currency","text":"<ul> <li>Tables: <code>llx_multicurrency*</code> (2+ tables)</li> <li>Features: Multiple currency support, exchange rates</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#categories-classification","title":"\ud83c\udff7\ufe0f Categories &amp; Classification","text":"<ul> <li>Tables: <code>llx_categorie*</code>, <code>llx_element_categorie</code> (15+ tables)</li> <li>Features: Hierarchical categorization for all entities</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#knowledge-management","title":"\ud83d\udcca Knowledge Management","text":"<ul> <li>Tables: <code>llx_knowledgemanagement_*</code> (2+ tables)</li> <li>Features: Knowledge base, documentation management</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#event-organization","title":"\ud83c\udfab Event Organization","text":"<ul> <li>Tables: <code>llx_eventorganization_*</code> (2+ tables)</li> <li>Features: Conference/booth management, attendee tracking</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#system-infrastructure","title":"\ud83d\udd27 System &amp; Infrastructure","text":""},{"location":"modules-status/#system-configuration","title":"\u2699\ufe0f System Configuration","text":"<ul> <li>Tables: <code>llx_const</code>, <code>llx_menu</code>, <code>llx_boxes*</code> (5+ tables)</li> <li>Features: System configuration, menu management, dashboard widgets</li> <li>Status: Core system tables (always active)</li> </ul>"},{"location":"modules-status/#document-management-ecm","title":"\ud83d\udcc1 Document Management (ECM)","text":"<ul> <li>Tables: <code>llx_ecm_*</code> (4+ tables)</li> <li>Features: Document storage, file management, directories</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#oauth-security","title":"\ud83d\udd10 OAuth &amp; Security","text":"<ul> <li>Tables: <code>llx_oauth_*</code> (2+ tables)</li> <li>Features: OAuth integration, external authentication</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#scheduled-jobs","title":"\u23f0 Scheduled Jobs","text":"<ul> <li>Tables: <code>llx_cronjob</code> (1 table)</li> <li>Features: Automated task scheduling, background jobs</li> <li>Status: Tables present (available for activation)</li> </ul>"},{"location":"modules-status/#summary-statistics","title":"Summary Statistics","text":"<ul> <li>\u2705 Enabled Modules: 4 core modules</li> <li>\ud83d\udce6 Available Modules: 35+ module categories</li> <li>\ud83d\uddc4\ufe0f Total Database Tables: 389 tables</li> <li>\ud83c\udfd7\ufe0f Architecture: Fully modular with extensible design</li> </ul>"},{"location":"modules-status/#module-activation-status","title":"Module Activation Status","text":"<pre><code>pie title Dolibarr Module Status\n    \"Enabled (Core)\" : 4\n    \"Available (Not Activated)\" : 35</code></pre>"},{"location":"modules-status/#database-coverage-by-module-category","title":"Database Coverage by Module Category","text":"<pre><code>graph LR\n    A[Dolibarr Database - 389 Tables] --&gt; B[Core Business - 45%]\n    A --&gt; C[Financial &amp; Accounting - 15%] \n    A --&gt; D[HR &amp; Employee - 10%]\n    A --&gt; E[Manufacturing - 8%]\n    A --&gt; F[CRM &amp; Projects - 8%]\n    A --&gt; G[System &amp; Config - 7%]\n    A --&gt; H[Communication - 4%]\n    A --&gt; I[POS &amp; Retail - 3%]\n\n    B --&gt; B1[Companies &amp; Contacts]\n    B --&gt; B2[Products &amp; Inventory]\n    B --&gt; B3[Orders &amp; Invoices]\n\n    C --&gt; C1[Accounting &amp; Bookkeeping]\n    C --&gt; C2[Banking &amp; Payments]\n    C --&gt; C3[Multi-currency]\n\n    D --&gt; D1[User Management \u2705]\n    D --&gt; D2[HR &amp; Payroll]\n    D --&gt; D3[Recruitment]\n\n    style B fill:#e1f5fe\n    style D1 fill:#c8e6c9</code></pre>"},{"location":"modules-status/#next-steps","title":"Next Steps","text":"<p>To activate additional modules:</p> <ol> <li>Access Dolibarr Admin Interface:</li> <li>URL: http://localhost:18080</li> <li>Login: admin</li> <li> <p>Navigate to: Setup \u2192 Modules/Applications</p> </li> <li> <p>Database Impact: </p> </li> <li>Enabling modules will populate corresponding tables with configuration data</li> <li> <p>Some modules may create additional tables dynamically</p> </li> <li> <p>Recommended Activation Order:</p> </li> <li>Products &amp; Services (if needed for inventory)</li> <li>Invoicing (for billing functionality)  </li> <li>Projects (for project management)</li> <li>CRM Activities (for sales tracking)</li> </ol> <p>This analysis was performed by examining the database structure of a live Dolibarr instance. Module availability is determined by table presence, while activation status is confirmed through configuration settings.</p>"},{"location":"task-automation/","title":"Task Automation System","text":"<p>The Dolibarr Docker setup includes a comprehensive task automation system built on Task that provides organized, efficient workflows for common operations.</p>"},{"location":"task-automation/#overview","title":"Overview","text":"<p>The task system is organized into modular files for better maintainability and logical grouping of related operations. Each category of tasks is contained in its own file within the <code>.taskfile/</code> directory.</p>"},{"location":"task-automation/#modular-structure","title":"Modular Structure","text":"<pre><code>.taskfile/\n\u251c\u2500\u2500 setup.yml        # \ud83d\ude80 Initialization and setup tasks\n\u251c\u2500\u2500 services.yml     # \u2699\ufe0f Service management (start/stop/status/logs)\n\u251c\u2500\u2500 backup.yml       # \ud83d\udcbe Backup and restore operations\n\u251c\u2500\u2500 maintenance.yml  # \ud83e\uddf9 Cleanup and maintenance tasks\n\u2514\u2500\u2500 utilities.yml    # \ud83d\udd27 Utility functions (shell, health checks)\n</code></pre>"},{"location":"task-automation/#installation","title":"Installation","text":""},{"location":"task-automation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Task: Version 3.0 or higher</li> <li>Docker &amp; Docker Compose: For service management</li> <li>Operating System: Linux, macOS, or Windows with WSL2</li> </ul>"},{"location":"task-automation/#install-task","title":"Install Task","text":"<pre><code># macOS\nbrew install go-task/tap/go-task\n\n# Linux\nsh -c \"$(curl --location https://taskfile.dev/install.sh)\" -- -d\n\n# Windows (PowerShell)\niwr -useb get.scoop.sh | iex\nscoop bucket add extras\nscoop install task\n\n# Manual installation\ncurl -sL https://github.com/go-task/task/releases/latest/download/task_linux_amd64.tar.gz | tar -xz\nsudo mv task /usr/local/bin/\n</code></pre>"},{"location":"task-automation/#verify-installation","title":"Verify Installation","text":"<pre><code>task --version\n# Should output: Task version: v3.x.x\n</code></pre>"},{"location":"task-automation/#quick-start","title":"Quick Start","text":""},{"location":"task-automation/#list-available-tasks","title":"List Available Tasks","text":"<pre><code># Show all available tasks\ntask --list\n# or\ntask\n\n# Show tasks from specific category\ntask services --list\ntask backup --list\n</code></pre>"},{"location":"task-automation/#basic-usage","title":"Basic Usage","text":"<pre><code># Initialize the environment\ntask setup:init\n\n# Start services with development tools\ntask services:start-with-tools\n\n# Check system health\ntask utilities:health\n\n# Create a backup\ntask backup:backup\n</code></pre>"},{"location":"task-automation/#task-categories","title":"Task Categories","text":""},{"location":"task-automation/#setup-initialization-setup","title":"\ud83d\ude80 Setup &amp; Initialization (<code>setup:*</code>)","text":""},{"location":"task-automation/#purpose","title":"Purpose","text":"<p>Initialize the Dolibarr environment with proper directories and permissions.</p>"},{"location":"task-automation/#available-tasks","title":"Available Tasks","text":""},{"location":"task-automation/#task-setupinit","title":"<code>task setup:init</code>","text":"<p>Description: Initialize Dolibarr setup (create directories and set permissions)</p> <p>What it does: - Creates required directories: <code>custom/</code>, <code>logs/</code>, <code>db-init/</code>, <code>backups/</code> - Sets appropriate permissions (755) for all directories - Ensures proper directory structure for Docker volume mounts</p> <p>Usage: <pre><code>task setup:init\n</code></pre></p> <p>Example Output: <pre><code>task: [setup:init] mkdir -p custom logs db-init ./backups\ntask: [setup:init] chmod 755 custom logs db-init ./backups\ntask: [setup:init] echo \"\u2705 Dolibarr directories initialized\"\n\u2705 Dolibarr directories initialized\n</code></pre></p>"},{"location":"task-automation/#service-management-services","title":"\u2699\ufe0f Service Management (<code>services:*</code>)","text":""},{"location":"task-automation/#purpose_1","title":"Purpose","text":"<p>Manage Docker services for different deployment scenarios.</p>"},{"location":"task-automation/#available-tasks_1","title":"Available Tasks","text":""},{"location":"task-automation/#task-servicesstart","title":"<code>task services:start</code>","text":"<p>Description: Start with internal database</p> <p>What it does: - Starts Dolibarr application container - Starts MariaDB database container - Uses internal database profile</p> <p>Usage: <pre><code>task services:start\n</code></pre></p>"},{"location":"task-automation/#task-servicesstart-with-tools","title":"<code>task services:start-with-tools</code>","text":"<p>Description: Start with internal database and phpMyAdmin</p> <p>What it does: - Starts Dolibarr application - Starts MariaDB database - Starts phpMyAdmin for database management - Ideal for development and administration</p> <p>Usage: <pre><code>task services:start-with-tools\n</code></pre></p> <p>Access Points: - Dolibarr: http://localhost:8080 - phpMyAdmin: http://localhost:8081</p>"},{"location":"task-automation/#task-servicesstart-external","title":"<code>task services:start-external</code>","text":"<p>Description: Start with external database</p> <p>What it does: - Starts only Dolibarr application - Connects to external database (configured in .env) - Suitable for production with existing database</p> <p>Prerequisites: - External database must be configured in <code>.env</code> - Database must be accessible from Docker network</p> <p>Usage: <pre><code>task services:start-external\n</code></pre></p>"},{"location":"task-automation/#task-servicesstop","title":"<code>task services:stop</code>","text":"<p>Description: Stop all services</p> <p>What it does: - Gracefully stops all running containers - Preserves data in volumes</p> <p>Usage: <pre><code>task services:stop\n</code></pre></p>"},{"location":"task-automation/#task-servicesstatus","title":"<code>task services:status</code>","text":"<p>Description: Show status of all services</p> <p>Usage: <pre><code>task services:status\n</code></pre></p> <p>Example Output: <pre><code>NAME                 IMAGE                         COMMAND                  CREATED       STATUS\ndolibarr_dolibarr_1  dolibarr/dolibarr:latest     \"docker-entrypoint.s\u2026\"   2 hours ago   Up 2 hours\ndolibarr_db_1        mariadb:10.11                \"docker-entrypoint.s\u2026\"   2 hours ago   Up 2 hours\n</code></pre></p>"},{"location":"task-automation/#log-management","title":"Log Management","text":""},{"location":"task-automation/#task-serviceslogs","title":"<code>task services:logs</code>","text":"<p>Description: Show logs from all services <pre><code>task services:logs\n</code></pre></p>"},{"location":"task-automation/#task-serviceslogs-app","title":"<code>task services:logs-app</code>","text":"<p>Description: Show Dolibarr application logs only <pre><code>task services:logs-app\n</code></pre></p>"},{"location":"task-automation/#task-serviceslogs-db","title":"<code>task services:logs-db</code>","text":"<p>Description: Show database logs only <pre><code>task services:logs-db\n</code></pre></p>"},{"location":"task-automation/#backup-restore-backup","title":"\ud83d\udcbe Backup &amp; Restore (<code>backup:*</code>)","text":""},{"location":"task-automation/#purpose_2","title":"Purpose","text":"<p>Comprehensive data protection with automated backup and restore capabilities.</p>"},{"location":"task-automation/#available-tasks_2","title":"Available Tasks","text":""},{"location":"task-automation/#task-backupbackup","title":"<code>task backup:backup</code>","text":"<p>Description: Create complete backup (database + application data)</p> <p>What it does: - Creates timestamped backup directory - Backs up database with mysqldump (compressed) - Backs up application data and custom modules - Stores everything in <code>./backups/</code> directory</p> <p>Usage: <pre><code>task backup:backup\n</code></pre></p> <p>Output Structure: <pre><code>backups/\n\u2514\u2500\u2500 2024-08-24_14-30-15/\n    \u251c\u2500\u2500 database_2024-08-24_14-30-15.sql.gz\n    \u2514\u2500\u2500 app_data_2024-08-24_14-30-15.tar.gz\n</code></pre></p>"},{"location":"task-automation/#task-backupbackup-db","title":"<code>task backup:backup-db</code>","text":"<p>Description: Create database backup only</p> <p>Prerequisites: - Database container must be running</p> <p>Usage: <pre><code>task backup:backup-db\n</code></pre></p>"},{"location":"task-automation/#task-backupbackup-app","title":"<code>task backup:backup-app</code>","text":"<p>Description: Create application data backup only</p> <p>What it backs up: - Document storage volume - HTML/application files volume - Custom modules directory</p> <p>Usage: <pre><code>task backup:backup-app\n</code></pre></p>"},{"location":"task-automation/#task-backuplist-backups","title":"<code>task backup:list-backups</code>","text":"<p>Description: List available backups</p> <p>Usage: <pre><code>task backup:list-backups\n</code></pre></p> <p>Example Output: <pre><code>\ud83d\udcc1 Available backups:\ntotal 24\ndrwxr-xr-x  4 user  staff  128 Aug 24 14:30 2024-08-24_14-30-15\ndrwxr-xr-x  4 user  staff  128 Aug 24 12:15 2024-08-24_12-15-30\n</code></pre></p>"},{"location":"task-automation/#restore-operations","title":"Restore Operations","text":""},{"location":"task-automation/#database-restore","title":"Database Restore","text":"<pre><code># Restore database from specific backup\ntask backup:restore-db BACKUP_FILE=backups/2024-08-24_14-30-15/database_2024-08-24_14-30-15.sql.gz\n</code></pre>"},{"location":"task-automation/#application-data-restore","title":"Application Data Restore","text":"<pre><code># Restore application data from specific backup\ntask backup:restore-app BACKUP_FILE=backups/2024-08-24_14-30-15/app_data_2024-08-24_14-30-15.tar.gz\n</code></pre> <p>\u26a0\ufe0f Important Notes: - Restore operations require services to be running - Application restore will stop services temporarily - Always test restores in development first</p>"},{"location":"task-automation/#maintenance-maintenance","title":"\ud83e\uddf9 Maintenance (<code>maintenance:*</code>)","text":""},{"location":"task-automation/#purpose_3","title":"Purpose","text":"<p>System cleanup, updates, and maintenance operations.</p>"},{"location":"task-automation/#available-tasks_3","title":"Available Tasks","text":""},{"location":"task-automation/#task-maintenancecleanup","title":"<code>task maintenance:cleanup</code>","text":"<p>Description: Clean up Docker resources</p> <p>What it does: - Removes unused Docker images - Cleans up stopped containers - Removes unused networks and volumes - Frees up disk space</p> <p>Usage: <pre><code>task maintenance:cleanup\n</code></pre></p> <p>\u26a0\ufe0f Warning: This will remove unused Docker resources. Ensure no important data is stored in unnamed volumes.</p>"},{"location":"task-automation/#task-maintenanceupdate","title":"<code>task maintenance:update</code>","text":"<p>Description: Update containers to latest versions</p> <p>What it does: - Pulls latest container images - Recreates containers with new images - Maintains data volumes</p> <p>Usage: <pre><code>task maintenance:update\n</code></pre></p>"},{"location":"task-automation/#task-maintenancereset-data","title":"<code>task maintenance:reset-data</code>","text":"<p>Description: Reset all data (DANGEROUS)</p> <p>What it does: - Stops all services - Removes all Docker volumes - Deletes all application data - \u26a0\ufe0f THIS OPERATION IS IRREVERSIBLE</p> <p>Usage: <pre><code>task maintenance:reset-data\n# Will prompt for confirmation\n</code></pre></p>"},{"location":"task-automation/#task-maintenancereset-logs","title":"<code>task maintenance:reset-logs</code>","text":"<p>Description: Clear application logs</p> <p>Usage: <pre><code>task maintenance:reset-logs\n</code></pre></p>"},{"location":"task-automation/#task-maintenancereset-custom","title":"<code>task maintenance:reset-custom</code>","text":"<p>Description: Clear custom modules</p> <p>What it does: - Removes all PHP, JS, and CSS files from custom directory - Keeps directory structure - Prompts for confirmation</p> <p>Usage: <pre><code>task maintenance:reset-custom\n# Will prompt for confirmation\n</code></pre></p>"},{"location":"task-automation/#utilities-utilities","title":"\ud83d\udd27 Utilities (<code>utilities:*</code>)","text":""},{"location":"task-automation/#purpose_4","title":"Purpose","text":"<p>System utilities for troubleshooting, monitoring, and direct access.</p>"},{"location":"task-automation/#available-tasks_4","title":"Available Tasks","text":""},{"location":"task-automation/#task-utilitieshealth","title":"<code>task utilities:health</code>","text":"<p>Description: Check health of all services</p> <p>What it does: - Shows container status - Tests web interface accessibility - Tests phpMyAdmin accessibility (if running) - Provides comprehensive system health overview</p> <p>Usage: <pre><code>task utilities:health\n</code></pre></p> <p>Example Output: <pre><code>\ud83d\udd0d Checking service health...\nNAME                 COMMAND              STATUS\ndolibarr_dolibarr_1  \"docker-entrypoint\u2026\"  Up 2 hours\ndolibarr_db_1        \"docker-entrypoint\u2026\"  Up 2 hours\n\n\ud83c\udf10 Testing web access...\nDolibarr web interface: 200\nphpMyAdmin: 200\n</code></pre></p>"},{"location":"task-automation/#task-utilitiesshell-app","title":"<code>task utilities:shell-app</code>","text":"<p>Description: Open shell in Dolibarr container</p> <p>Prerequisites: - Dolibarr container must be running</p> <p>Usage: <pre><code>task utilities:shell-app\n</code></pre></p> <p>Common Use Cases: <pre><code># Inside container shell\nls /var/www/html/                    # View application files\ntail -f /var/www/html/documents/dolibarr.log  # View logs\nchown -R www-data:www-data /var/www/html      # Fix permissions\n</code></pre></p>"},{"location":"task-automation/#task-utilitiesshell-db","title":"<code>task utilities:shell-db</code>","text":"<p>Description: Open MySQL shell in database container</p> <p>Prerequisites: - Database container must be running</p> <p>Usage: <pre><code>task utilities:shell-db\n</code></pre></p> <p>Common Use Cases: <pre><code>-- Inside MySQL shell\nSHOW DATABASES;\nUSE dolibarr;\nSHOW TABLES;\nSELECT COUNT(*) FROM llx_user;\n</code></pre></p>"},{"location":"task-automation/#task-utilitiespermissions","title":"<code>task utilities:permissions</code>","text":"<p>Description: Fix file permissions for Dolibarr</p> <p>What it does: - Sets proper ownership for web files - Sets proper ownership for document storage - Fixes common permission issues</p> <p>Prerequisites: - Dolibarr container must be running</p> <p>Usage: <pre><code>task utilities:permissions\n</code></pre></p>"},{"location":"task-automation/#advanced-usage","title":"Advanced Usage","text":""},{"location":"task-automation/#task-composition-and-workflows","title":"Task Composition and Workflows","text":""},{"location":"task-automation/#development-workflow","title":"Development Workflow","text":"<pre><code># Complete development setup\ntask setup:init\ntask services:start-with-tools\ntask utilities:health\n\n# Work on application...\n\n# Create backup before major changes\ntask backup:backup\n\n# View logs during development\ntask services:logs-app\n</code></pre>"},{"location":"task-automation/#production-deployment-workflow","title":"Production Deployment Workflow","text":"<pre><code># Production setup\ntask setup:init\ntask services:start-external\ntask utilities:health\n\n# Regular maintenance\ntask backup:backup     # Daily\ntask maintenance:cleanup  # Weekly\ntask maintenance:update   # Monthly\n</code></pre>"},{"location":"task-automation/#troubleshooting-workflow","title":"Troubleshooting Workflow","text":"<pre><code># Diagnose issues\ntask utilities:health\ntask services:status\ntask services:logs\n\n# Access containers for debugging\ntask utilities:shell-app\ntask utilities:shell-db\n\n# Fix common issues\ntask utilities:permissions\n</code></pre>"},{"location":"task-automation/#custom-task-variables","title":"Custom Task Variables","text":"<p>Tasks support environment variables and can be customized:</p> <pre><code># Use different backup directory\nBACKUP_DIR=./custom-backups task backup:backup\n\n# Use specific backup file\ntask backup:restore-db BACKUP_FILE=/path/to/specific/backup.sql.gz\n\n# Custom ports\nDOLIBARR_PORT=9080 task services:start\n</code></pre>"},{"location":"task-automation/#task-dependencies","title":"Task Dependencies","text":"<p>The task system includes intelligent dependencies:</p> <ul> <li><code>backup:backup</code> depends on both <code>backup:backup-db</code> and <code>backup:backup-app</code></li> <li>Tasks with preconditions will check prerequisites before execution</li> <li>Failed preconditions provide helpful error messages</li> </ul>"},{"location":"task-automation/#error-handling","title":"Error Handling","text":"<p>Tasks include comprehensive error handling:</p> <pre><code># Example: Trying to backup without running database\n$ task backup:backup-db\ntask: Failed to run task \"backup:backup-db\": exit status 1\nDatabase container is not running. Start with: task services:start\n</code></pre>"},{"location":"task-automation/#best-practices","title":"Best Practices","text":""},{"location":"task-automation/#1-regular-backup-schedule","title":"1. Regular Backup Schedule","text":"<pre><code># Add to crontab for automated backups\n0 2 * * * cd /path/to/dolibarr &amp;&amp; task backup:backup\n</code></pre>"},{"location":"task-automation/#2-health-monitoring","title":"2. Health Monitoring","text":"<pre><code># Regular health checks\ntask utilities:health || echo \"Services need attention\"\n</code></pre>"},{"location":"task-automation/#3-log-monitoring","title":"3. Log Monitoring","text":"<pre><code># Monitor application logs\ntask services:logs-app | grep -i error\n</code></pre>"},{"location":"task-automation/#4-safe-maintenance","title":"4. Safe Maintenance","text":"<pre><code># Always backup before maintenance\ntask backup:backup\ntask maintenance:update\ntask utilities:health\n</code></pre>"},{"location":"task-automation/#5-development-environment","title":"5. Development Environment","text":"<pre><code># Use tools profile for development\ntask services:start-with-tools\n\n# Quick restart during development\ntask services:stop &amp;&amp; task services:start-with-tools\n</code></pre>"},{"location":"task-automation/#troubleshooting-tasks","title":"Troubleshooting Tasks","text":""},{"location":"task-automation/#common-task-issues","title":"Common Task Issues","text":"<ol> <li> <p>Task not found <pre><code># Verify task installation\ntask --version\n\n# List available tasks\ntask --list\n</code></pre></p> </li> <li> <p>Permission denied <pre><code># Check Docker permissions\ndocker ps\n\n# Fix file permissions\ntask utilities:permissions\n</code></pre></p> </li> <li> <p>Service not responding <pre><code># Check service status\ntask services:status\n\n# View logs\ntask services:logs\n\n# Restart services\ntask services:stop\ntask services:start-with-tools\n</code></pre></p> </li> </ol>"},{"location":"task-automation/#task-performance","title":"Task Performance","text":"<ul> <li>Tasks are designed to be idempotent (safe to run multiple times)</li> <li>Dependencies are automatically resolved</li> <li>Preconditions prevent invalid operations</li> <li>All operations include progress feedback</li> </ul> <p>This comprehensive task system provides efficient, organized workflows for all aspects of Dolibarr Docker management.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions to common issues encountered when deploying and managing Dolibarr with Docker. Issues are organized by category with step-by-step troubleshooting procedures.</p>"},{"location":"troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":""},{"location":"troubleshooting/#health-check-commands","title":"Health Check Commands","text":"<p>Start troubleshooting with these quick diagnostic commands:</p> <pre><code># Overall system health\ntask utilities:health\n\n# Container status\ntask services:status\n\n# View recent logs\ntask services:logs-app | tail -50\ntask services:logs-db | tail -50\n\n# Check disk space\ndf -h\n\n# Check memory usage\nfree -h\n\n# Check Docker resources\ndocker system df\n</code></pre>"},{"location":"troubleshooting/#common-diagnostic-flow","title":"Common Diagnostic Flow","text":"<pre><code>flowchart TD\n    START[\ud83d\udea8 Issue Detected] --&gt; CHECK{System Health Check}\n    CHECK --&gt;|Pass| LOGS[\ud83d\udccb Check Application Logs]\n    CHECK --&gt;|Fail| CONTAINER[\ud83d\udc33 Check Container Status]\n\n    CONTAINER --&gt; RESTART{Try Container Restart}\n    RESTART --&gt;|Success| MONITOR[\u2705 Monitor System]\n    RESTART --&gt;|Fail| REBUILD[\ud83d\udd28 Rebuild Containers]\n\n    LOGS --&gt; ERROR{Error Messages Found?}\n    ERROR --&gt;|Yes| SPECIFIC[\ud83c\udfaf Specific Issue Resolution]\n    ERROR --&gt;|No| PERFORMANCE[\u26a1 Performance Analysis]\n\n    SPECIFIC --&gt; RESOLVE[\ud83d\udd27 Apply Fix]\n    RESOLVE --&gt; TEST[\u2705 Test Solution]\n\n    style START fill:#ffebee\n    style CHECK fill:#fff3e0\n    style RESOLVE fill:#e8f5e8\n    style TEST fill:#e1f5fe</code></pre>"},{"location":"troubleshooting/#container-issues","title":"Container Issues","text":""},{"location":"troubleshooting/#container-wont-start","title":"Container Won't Start","text":"<p>Symptoms: - <code>docker-compose up</code> fails - Containers exit immediately - \"Container not running\" errors</p> <p>Diagnostic Steps: <pre><code># Check container status\ndocker-compose ps\n\n# View container logs\ndocker-compose logs dolibarr\ndocker-compose logs dolibarr-db\n\n# Check for port conflicts\nnetstat -tulpn | grep -E ':(8080|3306|8081)'\n\n# Verify environment file\ncat .env | grep -v '^#' | grep -v '^$'\n</code></pre></p> <p>Common Solutions:</p> <ol> <li> <p>Port Conflicts:    <pre><code># Change ports in .env file\nDOLIBARR_PORT=8090\nPHPMYADMIN_PORT=8091\nDB_EXTERNAL_PORT=3307\n\n# Restart services\ntask services:stop\ntask services:start-with-tools\n</code></pre></p> </li> <li> <p>Environment File Issues:    <pre><code># Verify .env file exists and is properly formatted\nls -la .env\n\n# Copy from example if missing\ncp .env.example .env\n\n# Edit with proper values\nnano .env\n</code></pre></p> </li> <li> <p>Resource Constraints:    <pre><code># Check available resources\ndocker system df\ndocker system prune -f\n\n# Free up disk space\ndocker volume prune -f\ndocker image prune -f\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#container-keeps-restarting","title":"Container Keeps Restarting","text":"<p>Symptoms: - Containers start but immediately restart - High CPU usage from Docker daemon - \"Restarting\" status in <code>docker ps</code></p> <p>Diagnostic Steps: <pre><code># Check restart policy\ndocker inspect dolibarr_dolibarr_1 | grep -A 3 RestartPolicy\n\n# Monitor container behavior\ndocker logs -f dolibarr_dolibarr_1\n\n# Check container health\ndocker inspect dolibarr_dolibarr_1 | grep -A 5 Health\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Memory Issues:    <pre><code># Increase memory limits in docker-compose.yml\nservices:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n</code></pre></p> </li> <li> <p>Configuration Errors:    <pre><code># Check environment variables\ndocker-compose config\n\n# Validate configuration syntax\ndocker-compose -f docker-compose.yml config\n</code></pre></p> </li> <li> <p>Database Connection Issues:    <pre><code># Test database connectivity\ndocker-compose exec dolibarr-db mysql -u dolibarr -p$DB_PASSWORD -e \"SELECT 1\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#database-issues","title":"Database Issues","text":""},{"location":"troubleshooting/#database-connection-failed","title":"Database Connection Failed","text":"<p>Symptoms: - \"Connection refused\" errors - \"Access denied for user\" messages - Dolibarr showing database error pages</p> <p>Diagnostic Steps: <pre><code># Check database container status\ndocker-compose ps dolibarr-db\n\n# Test database connection\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SHOW DATABASES;\"\n\n# Check database logs\ndocker-compose logs dolibarr-db | tail -50\n\n# Verify environment variables\necho $DB_PASSWORD\necho $DB_ROOT_PASSWORD\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Wrong Credentials:    <pre><code># Update .env file with correct credentials\nDB_PASSWORD=your_correct_password\nDB_ROOT_PASSWORD=your_correct_root_password\n\n# Recreate containers\ndocker-compose down\ndocker-compose up -d\n</code></pre></p> </li> <li> <p>Database Not Ready:    <pre><code># Wait for database initialization\ndocker-compose logs -f dolibarr-db | grep \"ready for connections\"\n\n# Manual retry after database is ready\ndocker-compose restart dolibarr\n</code></pre></p> </li> <li> <p>Corrupted Database:    <pre><code># Stop services\ntask services:stop\n\n# Remove database volume (WARNING: DATA LOSS)\ndocker volume rm dolibarr_dolibarr-db-data\n\n# Restart services (fresh database)\ntask services:start-with-tools\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#database-performance-issues","title":"Database Performance Issues","text":"<p>Symptoms: - Slow query responses - High CPU usage from database container - Connection timeouts</p> <p>Diagnostic Steps: <pre><code># Check database resource usage\ndocker stats dolibarr_dolibarr-db_1\n\n# Check database configuration\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SHOW VARIABLES LIKE 'innodb%'\"\n\n# Monitor slow queries\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SHOW FULL PROCESSLIST\"\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Optimize Database Configuration:    <pre><code># Create db-init/mysql-tuning.cnf\n[mysqld]\ninnodb_buffer_pool_size = 512M\ninnodb_log_file_size = 128M\nquery_cache_size = 64M\nmax_connections = 50\n</code></pre></p> </li> <li> <p>Add Database Indexes:    <pre><code>-- Connect to database and add indexes for common queries\nUSE dolibarr;\nSHOW INDEX FROM llx_facture;\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#application-issues","title":"Application Issues","text":""},{"location":"troubleshooting/#web-interface-not-accessible","title":"Web Interface Not Accessible","text":"<p>Symptoms: - \"Connection refused\" on port 8080 - \"502 Bad Gateway\" errors - Blank pages or timeouts</p> <p>Diagnostic Steps: <pre><code># Test application connectivity\ncurl -I http://localhost:8080\n\n# Check application logs\ntask services:logs-app | grep -i error\n\n# Verify port mapping\ndocker-compose ps | grep 8080\n\n# Test from inside container\ndocker-compose exec dolibarr curl -I http://localhost\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Port Binding Issues:    <pre><code># Check if port is available\nnetstat -tulpn | grep :8080\n\n# Use different port\nDOLIBARR_PORT=8090\ndocker-compose up -d\n</code></pre></p> </li> <li> <p>Container Health Issues:    <pre><code># Check container health\ndocker-compose exec dolibarr ps aux\n\n# Restart web service inside container\ndocker-compose exec dolibarr service apache2 restart\n</code></pre></p> </li> <li> <p>File Permission Problems:    <pre><code># Fix file permissions\ntask utilities:permissions\n\n# Or manually\ndocker-compose exec dolibarr chown -R www-data:www-data /var/www/html\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#dolibarr-installation-wizard-issues","title":"Dolibarr Installation Wizard Issues","text":"<p>Symptoms: - Installation wizard loops - \"Database already exists\" errors - Configuration file write errors</p> <p>Solutions:</p> <ol> <li> <p>Reset Installation:    <pre><code># Remove configuration file\ndocker-compose exec dolibarr rm -f /var/www/html/conf/conf.php\n\n# Clear cache\ndocker-compose exec dolibarr rm -rf /var/www/html/documents/install.lock\n</code></pre></p> </li> <li> <p>Database Reset:    <pre><code># Complete reset (WARNING: DATA LOSS)\ntask maintenance:reset-data\n\n# Restart with fresh installation\ntask services:start-with-tools\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#high-resource-usage","title":"High Resource Usage","text":"<p>Symptoms: - High CPU or memory usage - Slow response times - System becoming unresponsive</p> <p>Diagnostic Steps: <pre><code># Monitor resource usage\ndocker stats\n\n# Check system resources\nhtop\niotop\n\n# Analyze container resource usage\ndocker-compose exec dolibarr top\ndocker-compose exec dolibarr-db top\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Set Resource Limits:    <pre><code># Add to docker-compose.yml\nservices:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n          cpus: '0.5'\n</code></pre></p> </li> <li> <p>Optimize Application:    <pre><code># Clear application cache\ndocker-compose exec dolibarr find /var/www/html/documents -name \"*.cache\" -delete\n\n# Restart services\ntask services:stop\ntask services:start\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#slow-database-queries","title":"Slow Database Queries","text":"<p>Symptoms: - Long page load times - Database timeouts - High database CPU usage</p> <p>Solutions:</p> <ol> <li> <p>Database Optimization:    <pre><code>-- Analyze table usage\nUSE dolibarr;\nANALYZE TABLE llx_societe, llx_facture, llx_product;\n\n-- Optimize tables\nOPTIMIZE TABLE llx_societe, llx_facture, llx_product;\n</code></pre></p> </li> <li> <p>Query Cache Configuration:    <pre><code># Add to db-init/query-cache.cnf\n[mysqld]\nquery_cache_type = 1\nquery_cache_size = 64M\nquery_cache_limit = 2M\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#network-issues","title":"Network Issues","text":""},{"location":"troubleshooting/#connection-timeouts","title":"Connection Timeouts","text":"<p>Symptoms: - \"Connection timed out\" errors - Intermittent connectivity - Services unreachable from outside</p> <p>Diagnostic Steps: <pre><code># Test network connectivity\ndocker network ls\ndocker network inspect dolibarr_default\n\n# Check DNS resolution\ndocker-compose exec dolibarr nslookup dolibarr-db\ndocker-compose exec dolibarr ping -c 3 dolibarr-db\n\n# Verify port accessibility\ntelnet localhost 8080\ntelnet localhost 3306\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Firewall Issues:    <pre><code># Check firewall rules\nsudo ufw status\n\n# Allow necessary ports\nsudo ufw allow 8080/tcp\nsudo ufw allow 3306/tcp\n</code></pre></p> </li> <li> <p>Docker Network Issues:    <pre><code># Recreate Docker network\ndocker-compose down\ndocker network prune -f\ndocker-compose up -d\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#storage-and-backup-issues","title":"Storage and Backup Issues","text":""},{"location":"troubleshooting/#disk-space-issues","title":"Disk Space Issues","text":"<p>Symptoms: - \"No space left on device\" errors - Backup failures - Database write errors</p> <p>Diagnostic Steps: <pre><code># Check disk usage\ndf -h\ndu -sh /var/lib/docker/\n\n# Check Docker space usage\ndocker system df\n\n# Check volume usage\ndocker volume ls\ndocker volume inspect dolibarr_dolibarr-db-data\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Clean Up Docker Resources:    <pre><code># Safe cleanup\ntask maintenance:cleanup\n\n# More aggressive cleanup\ndocker system prune -a -f --volumes\n</code></pre></p> </li> <li> <p>Move Data Location:    <pre><code># Stop services\ntask services:stop\n\n# Copy data to new location\nsudo rsync -av /var/lib/docker/volumes/ /new/location/volumes/\n\n# Update Docker daemon configuration\n# Edit /etc/docker/daemon.json\n{\n  \"data-root\": \"/new/location/docker\"\n}\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#backuprestore-failures","title":"Backup/Restore Failures","text":"<p>Symptoms: - Backup tasks fail - Restore operations incomplete - Corrupted backup files</p> <p>Diagnostic Steps: <pre><code># Test backup functionality\ntask backup:backup-db\n\n# Check backup directory permissions\nls -la ./backups/\n\n# Verify backup file integrity\ngunzip -t ./backups/*/database_*.sql.gz\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Permission Issues:    <pre><code># Fix backup directory permissions\nchmod 755 ./backups/\nchown -R $(whoami):$(whoami) ./backups/\n</code></pre></p> </li> <li> <p>Database Access Issues:    <pre><code># Test database access\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD -e \"SHOW DATABASES;\"\n\n# Restart database if needed\ndocker-compose restart dolibarr-db\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#task-automation-issues","title":"Task Automation Issues","text":""},{"location":"troubleshooting/#task-command-failures","title":"Task Command Failures","text":"<p>Symptoms: - <code>task: command not found</code> - Task execution failures - Permission denied errors</p> <p>Solutions:</p> <ol> <li> <p>Install Task:    <pre><code># macOS\nbrew install go-task/tap/go-task\n\n# Linux\ncurl -sL https://taskfile.dev/install.sh | sh\n</code></pre></p> </li> <li> <p>Fix Task Permissions:    <pre><code># Check Taskfile permissions\nls -la Taskfile.yml .taskfile/\n\n# Fix if needed\nchmod 644 Taskfile.yml .taskfile/*.yml\n</code></pre></p> </li> <li> <p>Docker Permission Issues:    <pre><code># Add user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Re-login for changes to take effect\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#security-issues","title":"Security Issues","text":""},{"location":"troubleshooting/#password-and-authentication-problems","title":"Password and Authentication Problems","text":"<p>Symptoms: - Login failures - \"Access denied\" errors - Password reset issues</p> <p>Solutions:</p> <ol> <li> <p>Reset Admin Password:    <pre><code># Access database directly\ndocker-compose exec dolibarr-db mysql -u root -p$DB_ROOT_PASSWORD dolibarr\n\n# Reset admin password (in MySQL)\nUPDATE llx_user SET pass_crypted = MD5('newpassword') WHERE login = 'admin';\n</code></pre></p> </li> <li> <p>Check User Permissions:    <pre><code>-- In MySQL/MariaDB\nUSE dolibarr;\nSELECT login, admin, statut FROM llx_user WHERE login = 'admin';\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#log-analysis","title":"Log Analysis","text":""},{"location":"troubleshooting/#important-log-locations","title":"Important Log Locations","text":"<pre><code># Application logs\ndocker-compose logs dolibarr\n\n# Database logs\ndocker-compose logs dolibarr-db\n\n# System logs\njournalctl -u docker.service\n\n# Dolibarr application logs (inside container)\ndocker-compose exec dolibarr tail -f /var/www/html/documents/dolibarr.log\n</code></pre>"},{"location":"troubleshooting/#log-analysis-commands","title":"Log Analysis Commands","text":"<pre><code># Search for errors\ndocker-compose logs | grep -i error\n\n# Search for specific patterns\ndocker-compose logs | grep -i \"database\\|connection\\|failed\"\n\n# Export logs for analysis\ndocker-compose logs &gt; dolibarr_logs_$(date +%Y%m%d_%H%M%S).txt\n</code></pre>"},{"location":"troubleshooting/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"troubleshooting/#complete-system-recovery","title":"Complete System Recovery","text":"<p>If all else fails, follow these steps for complete system recovery:</p> <pre><code># 1. Backup current data (if possible)\ntask backup:backup || echo \"Backup failed, proceeding anyway\"\n\n# 2. Stop all services\ndocker-compose down -v\n\n# 3. Clean up Docker system\ndocker system prune -a -f --volumes\n\n# 4. Restore from backup\n# (Copy backup files to appropriate locations)\n\n# 5. Restart from clean state\ntask setup:init\ntask services:start-with-tools\n\n# 6. Restore data if backup was successful\n# task backup:restore-db BACKUP_FILE=path/to/backup.sql.gz\n# task backup:restore-app BACKUP_FILE=path/to/backup.tar.gz\n</code></pre>"},{"location":"troubleshooting/#contact-points-for-additional-help","title":"Contact Points for Additional Help","text":"<ul> <li>Dolibarr Community: https://www.dolibarr.org/forum</li> <li>Docker Documentation: https://docs.docker.com/</li> <li>GitHub Issues: Create an issue in the project repository</li> <li>Docker Community: https://forums.docker.com/</li> </ul>"},{"location":"troubleshooting/#prevention-tips","title":"Prevention Tips","text":""},{"location":"troubleshooting/#regular-maintenance","title":"Regular Maintenance","text":"<pre><code># Weekly maintenance routine\ntask utilities:health           # Check system health\ntask backup:backup             # Create backup\ntask maintenance:cleanup       # Clean up resources\n\n# Monthly maintenance\ntask maintenance:update        # Update containers\ndocker system prune -f        # Clean up unused resources\n</code></pre>"},{"location":"troubleshooting/#monitoring-setup","title":"Monitoring Setup","text":"<p>Set up regular monitoring to prevent issues:</p> <pre><code># Add to crontab for regular health checks\n*/15 * * * * cd /path/to/dolibarr &amp;&amp; task utilities:health &gt; /dev/null || echo \"Health check failed\" | mail -s \"Dolibarr Alert\" admin@example.com\n</code></pre> <p>This comprehensive troubleshooting guide should help resolve most common issues encountered with the Dolibarr Docker deployment.</p>"},{"location":"use-cases/","title":"Dolibarr Docker Use Cases","text":"<p>This document outlines practical use cases for the Dolibarr Docker deployment, demonstrating how different organizations and scenarios can benefit from this setup.</p>"},{"location":"use-cases/#overview","title":"Overview","text":"<p>The Dolibarr Docker setup is designed to be flexible and scalable, supporting various business needs from small startups to larger organizations. With 13 enabled modules and comprehensive task automation, it provides a complete ERP/CRM solution.</p>"},{"location":"use-cases/#business-use-cases","title":"Business Use Cases","text":""},{"location":"use-cases/#small-business-management","title":"\ud83c\udfe2 Small Business Management","text":"<p>Scenario: A small consulting company with 5-15 employees needs integrated customer management, project tracking, and invoicing.</p> <p>Enabled Modules Used: - SOCIETE - Customer and supplier management - PROJET - Project tracking and time management - FACTURE - Invoice generation and billing - ACTIONCOMM - Calendar and meeting management - PRODUCT - Service catalog management</p> <p>Workflow: <pre><code>flowchart LR\n    PROSPECT[\ud83d\udc64 New Prospect] --&gt; CONTACT[\ud83d\udcde Initial Contact]\n    CONTACT --&gt; PROPOSAL[\ud83d\udcc4 Create Proposal]\n    PROPOSAL --&gt; PROJECT[\ud83d\udccb Start Project]\n    PROJECT --&gt; TIMETRACK[\u23f1\ufe0f Track Time]\n    TIMETRACK --&gt; INVOICE[\ud83d\udcb0 Generate Invoice]\n    INVOICE --&gt; PAYMENT[\ud83d\udcb3 Payment]</code></pre></p> <p>Setup Commands: <pre><code># Quick setup for small business\ntask config:setup-dev-environment\n\n# Enable additional modules if needed\ntask config:enable-modules\n\n# Check configuration\ntask config:show-config\n</code></pre></p>"},{"location":"use-cases/#manufacturing-inventory-management","title":"\ud83c\udfed Manufacturing &amp; Inventory Management","text":"<p>Scenario: A small manufacturing company needs to track inventory, manage suppliers, and handle product orders.</p> <p>Enabled Modules Used: - PRODUCT - Product catalog and specifications - STOCK - Inventory management - COMMANDE - Order management - FOURNISSEUR - Supplier relationship management - FACTURE - Invoice processing</p> <p>Key Features: - Real-time stock levels - Automated reorder points - Supplier comparison - Product cost tracking - Order fulfillment workflow</p>"},{"location":"use-cases/#professional-services-firm","title":"\ud83d\udcbc Professional Services Firm","text":"<p>Scenario: A law firm, accounting firm, or consultancy needing client management, project billing, and document tracking.</p> <p>Enabled Modules Used: - SOCIETE - Client management - PROJET - Case/project management - ACTIONCOMM - Client communication tracking - FACTURE - Professional billing - CATEGORIE - Client and service categorization</p> <p>Benefits: - Centralized client information - Time-based billing - Document management - Compliance tracking - Performance analytics</p>"},{"location":"use-cases/#sales-marketing-organization","title":"\ud83c\udfaf Sales &amp; Marketing Organization","text":"<p>Scenario: A sales-focused company needing CRM functionality, proposal management, and sales pipeline tracking.</p> <p>Enabled Modules Used: - SOCIETE - Lead and customer management - PROPAL - Proposal creation and tracking - COMMANDE - Order processing - ACTIONCOMM - Sales activity tracking - CATEGORIE - Lead categorization</p> <p>Sales Pipeline: <pre><code>stateDiagram-v2\n    [*] --&gt; Lead\n    Lead --&gt; Qualified : Contact &amp; Qualify\n    Qualified --&gt; Proposal : Create Proposal\n    Proposal --&gt; Negotiation : Follow-up\n    Negotiation --&gt; Won : Close Deal\n    Negotiation --&gt; Lost : Reject\n    Won --&gt; Order : Process Order\n    Order --&gt; [*]\n    Lost --&gt; [*]</code></pre></p>"},{"location":"use-cases/#non-profit-organization","title":"\ud83c\udfd8\ufe0f Non-Profit Organization","text":"<p>Scenario: A non-profit organization managing members, donations, events, and volunteer projects.</p> <p>Enabled Modules Used: - ADHERENT - Member management - ACTIONCOMM - Event planning and tracking - PROJET - Volunteer project coordination - FACTURE - Donation receipts - CATEGORIE - Member and donor categorization</p> <p>Features: - Membership tracking - Donation management - Volunteer coordination - Event planning - Grant tracking</p>"},{"location":"use-cases/#technical-use-cases","title":"Technical Use Cases","text":""},{"location":"use-cases/#development-testing-environment","title":"\ud83d\udd27 Development &amp; Testing Environment","text":"<p>Scenario: Developers need a local Dolibarr instance for testing integrations, custom modules, or API development.</p> <p>Setup: <pre><code># Start development environment\ntask services:start-with-tools\n\n# Enable API for testing\ntask config:enable-api\n\n# Load demo data for testing\ntask config:load-demo-data\n\n# Access API documentation\n# http://localhost:18080/api/index.php/explorer\n</code></pre></p> <p>Features: - API testing environment - Demo data for development - phpMyAdmin for database inspection - Custom module development support</p>"},{"location":"use-cases/#production-deployment","title":"\ud83d\ude80 Production Deployment","text":"<p>Scenario: Deploy Dolibarr for production use with external database and proper security.</p> <p>Setup Steps: <pre><code># 1. Configure external database\ncp .env.example .env\n# Edit .env with production settings\n\n# 2. Start with external database\ntask services:start-external\n\n# 3. Configure for production\ntask config:configure-company\ntask config:enable-modules\n\n# 4. Setup backup schedule\ntask backup:backup  # Add to cron\n</code></pre></p> <p>Production Checklist: - \u2705 External database configured - \u2705 Strong passwords set - \u2705 Regular backups scheduled - \u2705 SSL/TLS configured - \u2705 Monitoring enabled</p>"},{"location":"use-cases/#data-migration-integration","title":"\ud83d\udcca Data Migration &amp; Integration","text":"<p>Scenario: Migrating from another system or integrating with existing business tools.</p> <p>Approach: 1. Data Export: Export data from existing system 2. Database Preparation: Use database init scripts 3. API Integration: Use REST API for ongoing sync 4. Testing: Validate data integrity</p> <p>Tools Available: <pre><code># Database access for migration\ntask utilities:shell-db\n\n# API access for integration\n# REST API available at /api/index.php\n\n# Backup before migration\ntask backup:backup\n\n# Custom module directory\n# ./custom/ for integration modules\n</code></pre></p>"},{"location":"use-cases/#multi-environment-setup","title":"\ud83d\udd04 Multi-Environment Setup","text":"<p>Scenario: Separate development, staging, and production environments.</p> <p>Environment Structure: <pre><code>dolibarr-dev/     # Development environment\n\u251c\u2500\u2500 .env          # Dev-specific settings\n\u2514\u2500\u2500 custom/       # Development modules\n\ndolibarr-staging/ # Staging environment\n\u251c\u2500\u2500 .env          # Staging settings\n\u2514\u2500\u2500 backups/      # Staging backups\n\ndolibarr-prod/    # Production environment\n\u251c\u2500\u2500 .env          # Production settings\n\u251c\u2500\u2500 backups/      # Production backups\n\u2514\u2500\u2500 custom/       # Production modules\n</code></pre></p> <p>Management: <pre><code># Development\ncd dolibarr-dev &amp;&amp; task services:start-with-tools\n\n# Staging\ncd dolibarr-staging &amp;&amp; task services:start\n\n# Production\ncd dolibarr-prod &amp;&amp; task services:start-external\n</code></pre></p>"},{"location":"use-cases/#integration-use-cases","title":"Integration Use Cases","text":""},{"location":"use-cases/#api-first-integration","title":"\ud83d\udd17 API-First Integration","text":"<p>Scenario: Using Dolibarr as a backend service with custom frontend applications.</p> <p>Enabled Features: - API Module: REST API access - Authentication: API key management - Data Access: Complete CRUD operations</p> <p>Example Integration: <pre><code>// JavaScript example\nconst api = new DolibarrAPI('http://localhost:18080/api/index.php');\napi.setApiKey('your-api-key');\n\n// Get customers\nconst customers = await api.get('/thirdparties');\n\n// Create invoice\nconst invoice = await api.post('/invoices', {\n  socid: customerId,\n  date: '2024-01-01'\n});\n</code></pre></p>"},{"location":"use-cases/#mobile-app-backend","title":"\ud83d\udcf1 Mobile App Backend","text":"<p>Scenario: Mobile app for field sales or service teams.</p> <p>API Endpoints Used: - <code>/thirdparties</code> - Customer data - <code>/proposals</code> - Create quotes on-site - <code>/orders</code> - Order management - <code>/invoices</code> - Invoice generation - <code>/agendaevents</code> - Calendar sync</p>"},{"location":"use-cases/#e-commerce-integration","title":"\ud83d\udd04 E-commerce Integration","text":"<p>Scenario: Connect online store with Dolibarr for order management.</p> <p>Integration Flow: <pre><code>flowchart LR\n    ECOM[\ud83d\uded2 E-commerce Site] --&gt; ORDER[\ud83d\udce6 New Order]\n    ORDER --&gt; API[\ud83d\udd17 Dolibarr API]\n    API --&gt; CUSTOMER[\ud83d\udc64 Create/Update Customer]\n    API --&gt; INVOICE[\ud83d\udcb0 Generate Invoice]\n    API --&gt; STOCK[\ud83d\udcca Update Inventory]\n    STOCK --&gt; FULFILLMENT[\ud83d\udceb Fulfillment]</code></pre></p>"},{"location":"use-cases/#scaling-scenarios","title":"Scaling Scenarios","text":""},{"location":"use-cases/#growth-planning","title":"\ud83d\udcc8 Growth Planning","text":"<p>Small \u2192 Medium Business Transition:</p> <p>Phase 1: Basic Setup (1-10 users) - Internal database - Core modules - Single server</p> <p>Phase 2: Expansion (10-50 users) - External database - Additional modules - Performance optimization</p> <p>Phase 3: Enterprise (50+ users) - High availability setup - Multiple environments - Advanced monitoring</p>"},{"location":"use-cases/#multi-location-deployment","title":"\ud83c\udf10 Multi-Location Deployment","text":"<p>Scenario: Multiple offices or locations needing centralized management.</p> <p>Architecture Options: 1. Centralized: Single instance, multi-entity 2. Distributed: Multiple instances with data sync 3. Hybrid: Regional instances with central reporting</p>"},{"location":"use-cases/#best-practices-by-use-case","title":"Best Practices by Use Case","text":""},{"location":"use-cases/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":"<p>For Production Use: <pre><code># Change default passwords\n# Edit .env file with strong passwords\n\n# Remove development tools\n# Don't use --profile internal-db-tools in production\n\n# Regular updates\ntask maintenance:update\n\n# Regular backups\ntask backup:backup\n</code></pre></p>"},{"location":"use-cases/#performance-optimization","title":"\u26a1 Performance Optimization","text":"<p>For High-Volume Use: - Use external database with optimized configuration - Regular maintenance tasks - Monitor resource usage - Implement caching strategies</p>"},{"location":"use-cases/#monitoring-maintenance","title":"\ud83d\udcca Monitoring &amp; Maintenance","text":"<p>Regular Tasks: <pre><code># Health checks\ntask utilities:health\n\n# Log monitoring\ntask services:logs-app\n\n# Database optimization\ntask utilities:shell-db\n# Run OPTIMIZE TABLE commands\n\n# Backup verification\ntask backup:list-backups\n</code></pre></p>"},{"location":"use-cases/#getting-started-by-use-case","title":"Getting Started by Use Case","text":""},{"location":"use-cases/#quick-setup-matrix","title":"Quick Setup Matrix","text":"Use Case Profile Additional Modules API Needed Custom Code Small Business <code>internal-db-tools</code> \u2705 All enabled \u274c \u274c Manufacturing <code>internal-db</code> \u2705 Stock, Suppliers \u274c Maybe Development <code>internal-db-tools</code> \u2705 All enabled \u2705 \u2705 Production <code>external-db</code> \u2705 Business-specific \u2705 Maybe Integration <code>internal-db</code> \u2705 API required \u2705 \u2705"},{"location":"use-cases/#setup-commands-by-use-case","title":"Setup Commands by Use Case","text":"<pre><code># Small Business\ntask config:setup-dev-environment\ntask services:start-with-tools\n\n# Production\ntask services:start-external\ntask config:configure-company\ntask config:enable-modules\n\n# Development\ntask services:start-with-tools\ntask config:enable-api\ntask config:load-demo-data\n\n# Integration Testing\ntask services:start\ntask config:enable-api\n# Custom setup as needed\n</code></pre>"},{"location":"use-cases/#conclusion","title":"Conclusion","text":"<p>The Dolibarr Docker setup provides flexibility for various business scenarios, from simple small business management to complex enterprise integrations. The modular architecture and comprehensive task automation make it suitable for rapid deployment and easy maintenance across different use cases.</p> <p>Choose the appropriate setup based on your specific needs, and leverage the extensive module system to customize functionality for your business requirements.</p>"},{"location":"reference/","title":"Reference Documentation","text":"<p>This directory contains comprehensive reference materials for the Dolibarr Docker setup. These documents serve as detailed technical references for all components and configurations.</p>"},{"location":"reference/#reference-documents","title":"\ud83d\udcda Reference Documents","text":""},{"location":"reference/#quick-reference-cheat-sheet","title":"Quick Reference Cheat Sheet \u26a1","text":"<p>One-page reference with essential commands, configurations, and troubleshooting.</p> <ul> <li>Quick Start: Setup commands for development and production</li> <li>Essential Commands: Most-used Task commands organized by category</li> <li>Configuration Examples: Development and production <code>.env</code> templates</li> <li>Troubleshooting: Quick diagnostic commands for common issues</li> <li>Security Checklists: Development and production security requirements</li> <li>Emergency Commands: System recovery and cleanup procedures</li> </ul>"},{"location":"reference/#taskfile-commands-reference","title":"Taskfile Commands Reference","text":"<p>Complete reference of all Task commands with descriptions, parameters, and usage examples.</p> <ul> <li>Service Management: Start, stop, status commands</li> <li>Configuration: Module enablement, company setup</li> <li>Backup &amp; Maintenance: Data backup and system maintenance</li> <li>Utilities: Shell access, permissions, health checks</li> <li>Common Workflows: Step-by-step procedures</li> </ul>"},{"location":"reference/#environment-variables-reference","title":"Environment Variables Reference","text":"<p>Comprehensive guide to all environment variables used in the Docker setup.</p> <ul> <li>Database Configuration: Connection settings and credentials</li> <li>Application Settings: Dolibarr-specific configurations</li> <li>Network &amp; Ports: Port mappings and network settings</li> <li>Security Variables: Authentication and security settings</li> <li>Examples by Use Case: Development, production, cloud deployments</li> </ul>"},{"location":"reference/#docker-services-reference","title":"Docker Services Reference","text":"<p>Technical documentation of all Docker services, containers, and infrastructure.</p> <ul> <li>Service Specifications: Detailed service configurations</li> <li>Volume Management: Storage and data persistence</li> <li>Network Architecture: Inter-service communication</li> <li>Health Checks: Service monitoring and dependencies</li> <li>Scaling &amp; Performance: Resource management and optimization</li> </ul>"},{"location":"reference/#troubleshooting-reference","title":"Troubleshooting Reference","text":"<p>Comprehensive troubleshooting guide for common issues and their solutions.</p> <ul> <li>Quick Diagnostics: Immediate health check commands</li> <li>Service Issues: Container and startup problems</li> <li>Database Problems: Connection and performance issues</li> <li>Application Errors: Dolibarr-specific problems</li> <li>Network &amp; Connectivity: Access and API issues</li> <li>Error Message Reference: Common errors and solutions</li> </ul>"},{"location":"reference/#api-reference","title":"API Reference","text":"<p>Complete reference for the Dolibarr REST API with examples in multiple languages.</p> <ul> <li>Authentication: API key generation and security</li> <li>Core Endpoints: Users, companies, products, invoices</li> <li>Request/Response Formats: JSON structures and patterns</li> <li>Error Handling: HTTP status codes and error responses</li> <li>Code Examples: JavaScript, Python, PHP, Bash implementations</li> </ul>"},{"location":"reference/#configuration-reference","title":"Configuration Reference","text":"<p>Detailed reference for all configuration files and their structure.</p> <ul> <li>Docker Compose: Service definitions and overrides</li> <li>Environment Files: Variable organization and examples</li> <li>Taskfile Structure: Task organization and patterns</li> <li>Database Configuration: MariaDB settings and initialization</li> <li>Custom Modules: Module structure and development</li> <li>Production Settings: Security and performance configurations</li> </ul>"},{"location":"reference/#uri-reference","title":"URI Reference","text":"<p>Comprehensive list of all tools, technologies, and resources used in this repository.</p> <ul> <li>Core Technologies: Dolibarr, Docker, MariaDB, Task Runner</li> <li>Development Tools: phpMyAdmin, programming languages, frameworks</li> <li>Third-party Services: Cloud platforms, monitoring tools</li> <li>License Information: Open source and commercial license details</li> <li>Support Resources: Communities, documentation, security tools</li> </ul>"},{"location":"reference/#quick-reference-guide","title":"\ud83c\udfaf Quick Reference Guide","text":""},{"location":"reference/#essential-commands","title":"Essential Commands","text":"<pre><code># System health and status\ntask utilities:health\ntask services:status\n\n# Service management\ntask services:start-with-tools    # Development\ntask services:start               # Production\ntask services:stop\n\n# Configuration\ntask config:setup-dev-environment\ntask config:show-config\n\n# Backup and maintenance\ntask backup:backup\ntask maintenance:update\n</code></pre>"},{"location":"reference/#key-files","title":"Key Files","text":"<pre><code>.env                    # Environment configuration\ndocker-compose.yml      # Service definitions\nTaskfile.yml           # Task automation\ncustom/                # Custom modules\nlogs/                  # Application logs\nbackups/               # Data backups\n</code></pre>"},{"location":"reference/#important-urls","title":"Important URLs","text":"<pre><code>Dolibarr:      http://localhost:8080\nphpMyAdmin:    http://localhost:8081\nAPI Explorer:  http://localhost:8080/api/index.php/explorer\n</code></pre>"},{"location":"reference/#how-to-use-this-reference","title":"\ud83d\udd0d How to Use This Reference","text":""},{"location":"reference/#for-developers","title":"For Developers","text":"<ol> <li>Start with Taskfile Commands Reference for daily workflows</li> <li>Use Environment Variables Reference for configuration</li> <li>Consult API Reference for integration work</li> <li>Refer to Troubleshooting Reference when issues arise</li> </ol>"},{"location":"reference/#for-system-administrators","title":"For System Administrators","text":"<ol> <li>Begin with Docker Services Reference for infrastructure understanding</li> <li>Review Configuration Reference for deployment setup</li> <li>Use Troubleshooting Reference for operational issues</li> <li>Follow Environment Variables Reference for production configs</li> </ol>"},{"location":"reference/#for-devops-engineers","title":"For DevOps Engineers","text":"<ol> <li>Study Configuration Reference for CI/CD pipelines</li> <li>Use Docker Services Reference for orchestration</li> <li>Implement monitoring based on Troubleshooting Reference</li> <li>Automate tasks using Taskfile Commands Reference</li> </ol>"},{"location":"reference/#document-conventions","title":"\ud83d\udcd6 Document Conventions","text":""},{"location":"reference/#symbols-and-indicators","title":"Symbols and Indicators","text":"<ul> <li>\u2705 Required - Must be configured or installed</li> <li>\u26a0\ufe0f Important - Critical information to note</li> <li>\u274c Optional - Can be skipped or customized</li> <li>\ud83d\udfe2 Low Complexity - Suitable for beginners</li> <li>\ud83d\udfe1 Medium Complexity - Requires some experience</li> <li>\ud83d\udd34 High Complexity - Advanced configuration</li> </ul>"},{"location":"reference/#code-block-formats","title":"Code Block Formats","text":"<ul> <li><code>bash</code> - Shell commands and scripts</li> <li><code>yaml</code> - Docker Compose and configuration files</li> <li><code>env</code> - Environment variable files</li> <li><code>json</code> - API requests and responses</li> <li><code>php</code> - Dolibarr custom code</li> <li><code>sql</code> - Database queries and schemas</li> </ul>"},{"location":"reference/#command-examples","title":"Command Examples","text":"<p>All command examples use the Task runner format: <pre><code>task namespace:command-name\n</code></pre></p> <p>Direct Docker Compose commands are provided as alternatives: <pre><code>docker-compose --profile internal-db up -d\n</code></pre></p>"},{"location":"reference/#contributing-to-reference-documentation","title":"\ud83e\udd1d Contributing to Reference Documentation","text":""},{"location":"reference/#guidelines-for-updates","title":"Guidelines for Updates","text":"<ol> <li>Accuracy: Ensure all commands and configurations are tested</li> <li>Completeness: Include all necessary parameters and options</li> <li>Examples: Provide practical, working examples</li> <li>Cross-references: Link to related sections and documents</li> <li>Version Compatibility: Note version-specific features or changes</li> </ol>"},{"location":"reference/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Use clear, descriptive headings</li> <li>Include table of contents for long documents</li> <li>Provide both simple and complex examples</li> <li>Explain the \"why\" not just the \"how\"</li> <li>Keep examples current with the latest versions</li> </ul>"},{"location":"reference/#testing-documentation","title":"Testing Documentation","text":"<p>Before submitting updates: 1. Test all command examples in a clean environment 2. Verify all configuration examples work as described 3. Check that all links and cross-references are valid 4. Ensure code examples follow project conventions</p>"},{"location":"reference/#support-and-further-reading","title":"\ud83d\udcde Support and Further Reading","text":""},{"location":"reference/#getting-help","title":"Getting Help","text":"<ol> <li>Check Troubleshooting: Start with Troubleshooting Reference</li> <li>Search Documentation: Use Ctrl+F to find specific topics</li> <li>Review Examples: Look at complete examples in each reference</li> <li>Validate Configuration: Use diagnostic commands to verify setup</li> </ol>"},{"location":"reference/#external-resources","title":"External Resources","text":"<ul> <li>Dolibarr Official Documentation</li> <li>Docker Compose Documentation</li> <li>Task Runner Documentation</li> <li>MariaDB Documentation</li> </ul>"},{"location":"reference/#project-resources","title":"Project Resources","text":"<ul> <li>Main Documentation: <code>../README.md</code></li> <li>Deployment Scenarios: <code>../deployment-scenarios.md</code></li> <li>Quick Start Guide: Project root README</li> <li>Issue Tracking: Project repository issues</li> </ul> <p>This reference documentation is maintained alongside the Dolibarr Docker project. For the latest updates and additional resources, please refer to the project repository.</p>"},{"location":"reference/api-reference/","title":"Dolibarr API Reference","text":"<p>This document provides a comprehensive reference for the Dolibarr REST API, including authentication, endpoints, and usage examples.</p>"},{"location":"reference/api-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>API Overview</li> <li>Authentication</li> <li>API Explorer</li> <li>Common Patterns</li> <li>Core Endpoints</li> <li>Error Handling</li> <li>Rate Limiting</li> <li>Examples</li> <li>SDKs and Libraries</li> </ul>"},{"location":"reference/api-reference/#api-overview","title":"API Overview","text":"<p>The Dolibarr REST API provides programmatic access to most Dolibarr functionality, allowing you to integrate Dolibarr with other systems, build custom applications, or automate business processes.</p>"},{"location":"reference/api-reference/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8080/api/index.php\n</code></pre>"},{"location":"reference/api-reference/#api-version","title":"API Version","text":"<p>The API follows semantic versioning and supports multiple versions. The current version is embedded in the response headers.</p>"},{"location":"reference/api-reference/#content-type","title":"Content Type","text":"<p>All API requests and responses use JSON format: <pre><code>Content-Type: application/json\nAccept: application/json\n</code></pre></p>"},{"location":"reference/api-reference/#authentication","title":"Authentication","text":""},{"location":"reference/api-reference/#api-key-authentication","title":"API Key Authentication","text":"<p>Dolibarr uses API key authentication. Each user can have multiple API keys.</p>"},{"location":"reference/api-reference/#generating-api-keys","title":"Generating API Keys","text":"<p>Via Web Interface: 1. Login to Dolibarr as an administrator 2. Go to <code>Users &amp; Groups</code> &gt; <code>Users</code> 3. Edit a user account 4. Navigate to <code>API Keys</code> tab 5. Generate a new API key</p> <p>Via Task Command: <pre><code># Enable API module first\ntask config:enable-api\n\n# Then generate keys via web interface\necho \"API Explorer: http://localhost:${DOLIBARR_PORT:-8080}/api/index.php/explorer\"\n</code></pre></p>"},{"location":"reference/api-reference/#using-api-keys","title":"Using API Keys","text":"<p>Include the API key in the request header:</p> <pre><code>curl -X GET \"http://localhost:8080/api/index.php/users\" \\\n  -H \"Accept: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key_here\"\n</code></pre> <p>Or as a query parameter: <pre><code>curl \"http://localhost:8080/api/index.php/users?api_key=your_api_key_here\"\n</code></pre></p>"},{"location":"reference/api-reference/#security-best-practices","title":"Security Best Practices","text":"<ul> <li>Never expose API keys: Don't commit API keys to version control</li> <li>Use environment variables: Store API keys in environment variables</li> <li>Rotate keys regularly: Generate new keys and revoke old ones</li> <li>Use HTTPS: Always use HTTPS in production</li> <li>Limit permissions: Create users with minimal required permissions</li> </ul>"},{"location":"reference/api-reference/#api-explorer","title":"API Explorer","text":"<p>Dolibarr includes a built-in API explorer for testing and documentation.</p>"},{"location":"reference/api-reference/#accessing-the-explorer","title":"Accessing the Explorer","text":"<p>URL: <code>http://localhost:8080/api/index.php/explorer</code></p> <p>Prerequisites: <pre><code># Enable API module\ntask config:enable-api\n\n# Ensure services are running\ntask services:start-with-tools\n</code></pre></p>"},{"location":"reference/api-reference/#explorer-features","title":"Explorer Features","text":"<ul> <li>Interactive Documentation: Browse all available endpoints</li> <li>Try It Out: Execute API calls directly from the browser</li> <li>Schema Information: View request/response schemas</li> <li>Authentication: Test API keys directly in the interface</li> </ul>"},{"location":"reference/api-reference/#common-patterns","title":"Common Patterns","text":""},{"location":"reference/api-reference/#request-format","title":"Request Format","text":""},{"location":"reference/api-reference/#standard-get-request","title":"Standard GET Request","text":"<pre><code>curl -X GET \"http://localhost:8080/api/index.php/endpoint\" \\\n  -H \"Accept: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre>"},{"location":"reference/api-reference/#post-request-with-data","title":"POST Request with Data","text":"<pre><code>curl -X POST \"http://localhost:8080/api/index.php/endpoint\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\n    \"field1\": \"value1\",\n    \"field2\": \"value2\"\n  }'\n</code></pre>"},{"location":"reference/api-reference/#put-request-update","title":"PUT Request (Update)","text":"<pre><code>curl -X PUT \"http://localhost:8080/api/index.php/endpoint/123\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\"field1\": \"updated_value\"}'\n</code></pre>"},{"location":"reference/api-reference/#delete-request","title":"DELETE Request","text":"<pre><code>curl -X DELETE \"http://localhost:8080/api/index.php/endpoint/123\" \\\n  -H \"Accept: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre>"},{"location":"reference/api-reference/#response-format","title":"Response Format","text":""},{"location":"reference/api-reference/#success-response","title":"Success Response","text":"<pre><code>{\n  \"success\": {\n    \"code\": 200,\n    \"message\": \"Operation successful\"\n  },\n  \"data\": {\n    // Response data here\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#error-response","title":"Error Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Bad Request\",\n    \"details\": \"Specific error description\"\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#pagination","title":"Pagination","text":"<p>For endpoints that return lists, use pagination parameters:</p> <pre><code>curl \"http://localhost:8080/api/index.php/users?limit=20&amp;page=1\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre> <p>Parameters: - <code>limit</code>: Number of items per page (default: 100, max: 1000) - <code>page</code>: Page number (starts at 1) - <code>sortfield</code>: Field to sort by - <code>sortorder</code>: ASC or DESC</p>"},{"location":"reference/api-reference/#core-endpoints","title":"Core Endpoints","text":""},{"location":"reference/api-reference/#users-management","title":"Users Management","text":""},{"location":"reference/api-reference/#list-users","title":"List Users","text":"<pre><code>GET /api/index.php/users\n</code></pre> <p>Parameters: - <code>sqlfilters</code>: SQL WHERE clause conditions - <code>limit</code>: Results per page - <code>page</code>: Page number</p> <p>Example: <pre><code>curl \"http://localhost:8080/api/index.php/users?limit=10\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre></p>"},{"location":"reference/api-reference/#get-user-by-id","title":"Get User by ID","text":"<pre><code>GET /api/index.php/users/{id}\n</code></pre> <p>Example: <pre><code>curl \"http://localhost:8080/api/index.php/users/1\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre></p>"},{"location":"reference/api-reference/#create-user","title":"Create User","text":"<pre><code>POST /api/index.php/users\n</code></pre> <p>Example: <pre><code>curl -X POST \"http://localhost:8080/api/index.php/users\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\n    \"login\": \"newuser\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"pass\": \"securepassword\"\n  }'\n</code></pre></p>"},{"location":"reference/api-reference/#update-user","title":"Update User","text":"<pre><code>PUT /api/index.php/users/{id}\n</code></pre>"},{"location":"reference/api-reference/#delete-user","title":"Delete User","text":"<pre><code>DELETE /api/index.php/users/{id}\n</code></pre>"},{"location":"reference/api-reference/#third-parties-companies","title":"Third Parties (Companies)","text":""},{"location":"reference/api-reference/#list-third-parties","title":"List Third Parties","text":"<pre><code>GET /api/index.php/thirdparties\n</code></pre> <p>Parameters: - <code>sortfield</code>: Sort field (name, code, etc.) - <code>sortorder</code>: ASC or DESC - <code>limit</code>: Results per page - <code>page</code>: Page number - <code>mode</code>: 1 for customers, 2 for prospects, 3 for suppliers</p> <p>Example: <pre><code>curl \"http://localhost:8080/api/index.php/thirdparties?mode=1&amp;limit=20\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre></p>"},{"location":"reference/api-reference/#get-third-party-by-id","title":"Get Third Party by ID","text":"<pre><code>GET /api/index.php/thirdparties/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-third-party","title":"Create Third Party","text":"<pre><code>POST /api/index.php/thirdparties\n</code></pre> <p>Example: <pre><code>curl -X POST \"http://localhost:8080/api/index.php/thirdparties\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\n    \"name\": \"Acme Corp\",\n    \"client\": 1,\n    \"email\": \"contact@acme.com\",\n    \"phone\": \"+1-555-0123\",\n    \"address\": \"123 Business St\",\n    \"zip\": \"12345\",\n    \"town\": \"Business City\",\n    \"country_code\": \"US\"\n  }'\n</code></pre></p>"},{"location":"reference/api-reference/#update-third-party","title":"Update Third Party","text":"<pre><code>PUT /api/index.php/thirdparties/{id}\n</code></pre>"},{"location":"reference/api-reference/#delete-third-party","title":"Delete Third Party","text":"<pre><code>DELETE /api/index.php/thirdparties/{id}\n</code></pre>"},{"location":"reference/api-reference/#contacts","title":"Contacts","text":""},{"location":"reference/api-reference/#list-contacts","title":"List Contacts","text":"<pre><code>GET /api/index.php/contacts\n</code></pre>"},{"location":"reference/api-reference/#get-contact-by-id","title":"Get Contact by ID","text":"<pre><code>GET /api/index.php/contacts/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-contact","title":"Create Contact","text":"<pre><code>POST /api/index.php/contacts\n</code></pre> <p>Example: <pre><code>curl -X POST \"http://localhost:8080/api/index.php/contacts\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\n    \"firstname\": \"Jane\",\n    \"lastname\": \"Smith\",\n    \"email\": \"jane.smith@example.com\",\n    \"phone\": \"+1-555-0124\",\n    \"socid\": 1,\n    \"poste\": \"Manager\"\n  }'\n</code></pre></p>"},{"location":"reference/api-reference/#productsservices","title":"Products/Services","text":""},{"location":"reference/api-reference/#list-products","title":"List Products","text":"<pre><code>GET /api/index.php/products\n</code></pre> <p>Parameters: - <code>type</code>: 0 for products, 1 for services - <code>category</code>: Filter by category ID - <code>limit</code>: Results per page</p>"},{"location":"reference/api-reference/#get-product-by-id","title":"Get Product by ID","text":"<pre><code>GET /api/index.php/products/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-product","title":"Create Product","text":"<pre><code>POST /api/index.php/products\n</code></pre> <p>Example: <pre><code>curl -X POST \"http://localhost:8080/api/index.php/products\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\n    \"ref\": \"PROD001\",\n    \"label\": \"Premium Widget\",\n    \"description\": \"High-quality widget for professional use\",\n    \"price\": 29.99,\n    \"type\": 0,\n    \"status\": 1\n  }'\n</code></pre></p>"},{"location":"reference/api-reference/#update-product-stock","title":"Update Product Stock","text":"<pre><code>POST /api/index.php/products/{id}/stock\n</code></pre>"},{"location":"reference/api-reference/#invoices","title":"Invoices","text":""},{"location":"reference/api-reference/#list-invoices","title":"List Invoices","text":"<pre><code>GET /api/index.php/invoices\n</code></pre> <p>Parameters: - <code>thirdparty_ids</code>: Filter by third party ID(s) - <code>status</code>: Filter by status - <code>sqlfilters</code>: Custom SQL filters</p>"},{"location":"reference/api-reference/#get-invoice-by-id","title":"Get Invoice by ID","text":"<pre><code>GET /api/index.php/invoices/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-invoice","title":"Create Invoice","text":"<pre><code>POST /api/index.php/invoices\n</code></pre> <p>Example: <pre><code>curl -X POST \"http://localhost:8080/api/index.php/invoices\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"DOLAPIKEY: your_api_key\" \\\n  -d '{\n    \"socid\": 1,\n    \"date\": \"2024-01-15\",\n    \"lines\": [\n      {\n        \"fk_product\": 1,\n        \"qty\": 2,\n        \"subprice\": 29.99,\n        \"description\": \"Premium Widget\"\n      }\n    ]\n  }'\n</code></pre></p>"},{"location":"reference/api-reference/#validate-invoice","title":"Validate Invoice","text":"<pre><code>POST /api/index.php/invoices/{id}/validate\n</code></pre>"},{"location":"reference/api-reference/#add-payment-to-invoice","title":"Add Payment to Invoice","text":"<pre><code>POST /api/index.php/invoices/{id}/payments\n</code></pre>"},{"location":"reference/api-reference/#orders","title":"Orders","text":""},{"location":"reference/api-reference/#list-orders","title":"List Orders","text":"<pre><code>GET /api/index.php/orders\n</code></pre>"},{"location":"reference/api-reference/#get-order-by-id","title":"Get Order by ID","text":"<pre><code>GET /api/index.php/orders/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-order","title":"Create Order","text":"<pre><code>POST /api/index.php/orders\n</code></pre>"},{"location":"reference/api-reference/#update-order-status","title":"Update Order Status","text":"<pre><code>POST /api/index.php/orders/{id}/status\n</code></pre>"},{"location":"reference/api-reference/#proposalsquotes","title":"Proposals/Quotes","text":""},{"location":"reference/api-reference/#list-proposals","title":"List Proposals","text":"<pre><code>GET /api/index.php/proposals\n</code></pre>"},{"location":"reference/api-reference/#get-proposal-by-id","title":"Get Proposal by ID","text":"<pre><code>GET /api/index.php/proposals/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-proposal","title":"Create Proposal","text":"<pre><code>POST /api/index.php/proposals\n</code></pre>"},{"location":"reference/api-reference/#set-proposal-status","title":"Set Proposal Status","text":"<pre><code>POST /api/index.php/proposals/{id}/status\n</code></pre>"},{"location":"reference/api-reference/#projects","title":"Projects","text":""},{"location":"reference/api-reference/#list-projects","title":"List Projects","text":"<pre><code>GET /api/index.php/projects\n</code></pre>"},{"location":"reference/api-reference/#get-project-by-id","title":"Get Project by ID","text":"<pre><code>GET /api/index.php/projects/{id}\n</code></pre>"},{"location":"reference/api-reference/#create-project","title":"Create Project","text":"<pre><code>POST /api/index.php/projects\n</code></pre>"},{"location":"reference/api-reference/#add-task-to-project","title":"Add Task to Project","text":"<pre><code>POST /api/index.php/projects/{id}/tasks\n</code></pre>"},{"location":"reference/api-reference/#error-handling","title":"Error Handling","text":""},{"location":"reference/api-reference/#http-status-codes","title":"HTTP Status Codes","text":"Code Meaning Description 200 OK Request successful 201 Created Resource created successfully 204 No Content Request successful, no content returned 400 Bad Request Invalid request format or parameters 401 Unauthorized Invalid or missing API key 403 Forbidden Insufficient permissions 404 Not Found Resource not found 409 Conflict Resource conflict (e.g., duplicate key) 500 Internal Server Error Server error"},{"location":"reference/api-reference/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Validation failed\",\n    \"details\": {\n      \"field\": \"email\",\n      \"message\": \"Invalid email format\"\n    }\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#common-errors","title":"Common Errors","text":""},{"location":"reference/api-reference/#authentication-errors","title":"Authentication Errors","text":"<pre><code>{\n  \"error\": {\n    \"code\": 401,\n    \"message\": \"Access denied. Wrong API key.\"\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#validation-errors","title":"Validation Errors","text":"<pre><code>{\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Bad parameters\",\n    \"details\": \"Required field 'name' is missing\"\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#permission-errors","title":"Permission Errors","text":"<pre><code>{\n  \"error\": {\n    \"code\": 403,\n    \"message\": \"Forbidden: You don't have permission to access this resource\"\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#rate-limiting","title":"Rate Limiting","text":""},{"location":"reference/api-reference/#default-limits","title":"Default Limits","text":"<p>Dolibarr doesn't enforce strict rate limits by default, but it's recommended to implement reasonable request patterns:</p> <ul> <li>Recommended: Max 100 requests per minute per API key</li> <li>Bulk Operations: Use batch endpoints when available</li> <li>Long Operations: Implement exponential backoff for retries</li> </ul>"},{"location":"reference/api-reference/#best-practices","title":"Best Practices","text":"<pre><code>// Example with exponential backoff\nasync function apiRequest(url, options, retries = 3) {\n  for (let i = 0; i &lt; retries; i++) {\n    try {\n      const response = await fetch(url, options);\n      if (response.ok) return response;\n\n      if (response.status === 429) {\n        // Rate limited, wait and retry\n        await sleep(Math.pow(2, i) * 1000);\n        continue;\n      }\n\n      throw new Error(`HTTP ${response.status}`);\n    } catch (error) {\n      if (i === retries - 1) throw error;\n      await sleep(Math.pow(2, i) * 1000);\n    }\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#examples","title":"Examples","text":""},{"location":"reference/api-reference/#javascriptnodejs-example","title":"JavaScript/Node.js Example","text":"<pre><code>const axios = require('axios');\n\nclass DolibarrAPI {\n  constructor(baseUrl, apiKey) {\n    this.baseUrl = baseUrl;\n    this.apiKey = apiKey;\n\n    this.client = axios.create({\n      baseURL: `${baseUrl}/api/index.php`,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'DOLAPIKEY': apiKey\n      }\n    });\n  }\n\n  // Get all third parties\n  async getThirdParties(params = {}) {\n    try {\n      const response = await this.client.get('/thirdparties', { params });\n      return response.data;\n    } catch (error) {\n      console.error('API Error:', error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  // Create a new third party\n  async createThirdParty(data) {\n    try {\n      const response = await this.client.post('/thirdparties', data);\n      return response.data;\n    } catch (error) {\n      console.error('API Error:', error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  // Create invoice\n  async createInvoice(invoiceData) {\n    try {\n      const response = await this.client.post('/invoices', invoiceData);\n      return response.data;\n    } catch (error) {\n      console.error('API Error:', error.response?.data || error.message);\n      throw error;\n    }\n  }\n}\n\n// Usage\nconst api = new DolibarrAPI('http://localhost:8080', 'your_api_key');\n\n// Example usage\nasync function example() {\n  try {\n    // Create a company\n    const company = await api.createThirdParty({\n      name: 'Tech Solutions Inc',\n      client: 1,\n      email: 'contact@techsolutions.com',\n      phone: '+1-555-0199'\n    });\n\n    console.log('Created company:', company);\n\n    // Create an invoice\n    const invoice = await api.createInvoice({\n      socid: company.id,\n      date: new Date().toISOString().split('T')[0],\n      lines: [\n        {\n          description: 'Consulting Services',\n          qty: 10,\n          subprice: 150.00\n        }\n      ]\n    });\n\n    console.log('Created invoice:', invoice);\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nexample();\n</code></pre>"},{"location":"reference/api-reference/#python-example","title":"Python Example","text":"<pre><code>import requests\nimport json\nfrom datetime import datetime\n\nclass DolibarrAPI:\n    def __init__(self, base_url, api_key):\n        self.base_url = f\"{base_url}/api/index.php\"\n        self.headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            'DOLAPIKEY': api_key\n        }\n\n    def _request(self, method, endpoint, data=None, params=None):\n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n\n        try:\n            response = requests.request(\n                method=method,\n                url=url,\n                headers=self.headers,\n                json=data,\n                params=params\n            )\n            response.raise_for_status()\n            return response.json() if response.content else None\n        except requests.RequestException as e:\n            print(f\"API Error: {e}\")\n            if hasattr(e.response, 'json'):\n                print(f\"Error details: {e.response.json()}\")\n            raise\n\n    def get_thirdparties(self, **params):\n        return self._request('GET', '/thirdparties', params=params)\n\n    def create_thirdparty(self, data):\n        return self._request('POST', '/thirdparties', data=data)\n\n    def get_products(self, **params):\n        return self._request('GET', '/products', params=params)\n\n    def create_invoice(self, data):\n        return self._request('POST', '/invoices', data=data)\n\n# Usage example\nif __name__ == \"__main__\":\n    api = DolibarrAPI('http://localhost:8080', 'your_api_key')\n\n    try:\n        # Create a new company\n        company_data = {\n            'name': 'Python Solutions Ltd',\n            'client': 1,\n            'email': 'info@pythonsolutions.com',\n            'country_code': 'US'\n        }\n\n        company = api.create_thirdparty(company_data)\n        print(f\"Created company: {company}\")\n\n        # Get list of products\n        products = api.get_products(limit=5)\n        print(f\"Products: {products}\")\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n</code></pre>"},{"location":"reference/api-reference/#php-example","title":"PHP Example","text":"<pre><code>&lt;?php\n\nclass DolibarrAPI {\n    private $baseUrl;\n    private $apiKey;\n    private $httpHeaders;\n\n    public function __construct($baseUrl, $apiKey) {\n        $this-&gt;baseUrl = rtrim($baseUrl, '/') . '/api/index.php';\n        $this-&gt;apiKey = $apiKey;\n        $this-&gt;httpHeaders = [\n            'Content-Type: application/json',\n            'Accept: application/json',\n            'DOLAPIKEY: ' . $apiKey\n        ];\n    }\n\n    private function request($method, $endpoint, $data = null) {\n        $url = $this-&gt;baseUrl . '/' . ltrim($endpoint, '/');\n\n        $ch = curl_init();\n        curl_setopt_array($ch, [\n            CURLOPT_URL =&gt; $url,\n            CURLOPT_RETURNTRANSFER =&gt; true,\n            CURLOPT_HTTPHEADER =&gt; $this-&gt;httpHeaders,\n            CURLOPT_CUSTOMREQUEST =&gt; $method\n        ]);\n\n        if ($data !== null) {\n            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n        }\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if ($httpCode &gt;= 400) {\n            throw new Exception(\"HTTP Error $httpCode: $response\");\n        }\n\n        return json_decode($response, true);\n    }\n\n    public function getThirdParties($params = []) {\n        $query = http_build_query($params);\n        $endpoint = '/thirdparties' . ($query ? \"?$query\" : '');\n        return $this-&gt;request('GET', $endpoint);\n    }\n\n    public function createThirdParty($data) {\n        return $this-&gt;request('POST', '/thirdparties', $data);\n    }\n\n    public function createInvoice($data) {\n        return $this-&gt;request('POST', '/invoices', $data);\n    }\n}\n\n// Usage\ntry {\n    $api = new DolibarrAPI('http://localhost:8080', 'your_api_key');\n\n    // Create a company\n    $companyData = [\n        'name' =&gt; 'PHP Web Services',\n        'client' =&gt; 1,\n        'email' =&gt; 'contact@phpweb.com'\n    ];\n\n    $company = $api-&gt;createThirdParty($companyData);\n    echo \"Created company: \" . json_encode($company) . \"\\n\";\n\n    // Get companies\n    $companies = $api-&gt;getThirdParties(['limit' =&gt; 10]);\n    echo \"Companies: \" . json_encode($companies) . \"\\n\";\n\n} catch (Exception $e) {\n    echo \"Error: \" . $e-&gt;getMessage() . \"\\n\";\n}\n?&gt;\n</code></pre>"},{"location":"reference/api-reference/#bashcurl-example","title":"Bash/cURL Example","text":"<pre><code>#!/bin/bash\n\nAPI_KEY=\"your_api_key_here\"\nBASE_URL=\"http://localhost:8080/api/index.php\"\n\n# Function to make API requests\napi_request() {\n    local method=$1\n    local endpoint=$2\n    local data=$3\n\n    curl -s -X \"$method\" \\\n        -H \"Content-Type: application/json\" \\\n        -H \"Accept: application/json\" \\\n        -H \"DOLAPIKEY: $API_KEY\" \\\n        ${data:+-d \"$data\"} \\\n        \"$BASE_URL/$endpoint\"\n}\n\n# Get all third parties\necho \"=== Getting Third Parties ===\"\napi_request \"GET\" \"thirdparties?limit=5\" | jq .\n\n# Create a new third party\necho -e \"\\n=== Creating Third Party ===\"\nCOMPANY_DATA='{\n    \"name\": \"Bash Automation Co\",\n    \"client\": 1,\n    \"email\": \"admin@bashautomation.com\",\n    \"phone\": \"+1-555-BASH\"\n}'\n\nCOMPANY_RESPONSE=$(api_request \"POST\" \"thirdparties\" \"$COMPANY_DATA\")\necho \"$COMPANY_RESPONSE\" | jq .\n\n# Extract company ID for invoice creation\nCOMPANY_ID=$(echo \"$COMPANY_RESPONSE\" | jq -r '.id // empty')\n\nif [ ! -z \"$COMPANY_ID\" ]; then\n    echo -e \"\\n=== Creating Invoice ===\"\n    INVOICE_DATA=\"{\n        \\\"socid\\\": $COMPANY_ID,\n        \\\"date\\\": \\\"$(date +%Y-%m-%d)\\\",\n        \\\"lines\\\": [\n            {\n                \\\"description\\\": \\\"Automation Services\\\",\n                \\\"qty\\\": 5,\n                \\\"subprice\\\": 200.00\n            }\n        ]\n    }\"\n\n    api_request \"POST\" \"invoices\" \"$INVOICE_DATA\" | jq .\nfi\n</code></pre>"},{"location":"reference/api-reference/#sdks-and-libraries","title":"SDKs and Libraries","text":""},{"location":"reference/api-reference/#official-libraries","title":"Official Libraries","text":"<p>Currently, Dolibarr doesn't provide official SDKs, but the REST API is standard and works with any HTTP client.</p>"},{"location":"reference/api-reference/#community-libraries","title":"Community Libraries","text":""},{"location":"reference/api-reference/#nodejs","title":"Node.js","text":"<pre><code>npm install axios  # HTTP client\nnpm install dolibarr-api-client  # Community wrapper (if available)\n</code></pre>"},{"location":"reference/api-reference/#python","title":"Python","text":"<pre><code>pip install requests  # HTTP client\npip install dolibarr-python  # Community wrapper (if available)\n</code></pre>"},{"location":"reference/api-reference/#php","title":"PHP","text":"<pre><code>// Use cURL or Guzzle HTTP client\ncomposer require guzzlehttp/guzzle\n</code></pre>"},{"location":"reference/api-reference/#creating-your-own-sdk","title":"Creating Your Own SDK","text":"<p>When creating an SDK wrapper, consider implementing:</p> <ol> <li>Authentication handling: Automatic API key inclusion</li> <li>Error handling: Consistent error response parsing</li> <li>Rate limiting: Built-in request throttling</li> <li>Pagination: Helper methods for paginated results</li> <li>Type safety: Strong typing for request/response objects</li> <li>Logging: Request/response logging for debugging</li> </ol>"},{"location":"reference/api-reference/#testing-and-development","title":"Testing and Development","text":""},{"location":"reference/api-reference/#enable-api-for-development","title":"Enable API for Development","text":"<pre><code># Start services with tools\ntask services:start-with-tools\n\n# Enable API module\ntask config:enable-api\n\n# Check API status\ncurl -I \"http://localhost:${DOLIBARR_PORT:-8080}/api/index.php/users\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n</code></pre>"},{"location":"reference/api-reference/#api-testing-tools","title":"API Testing Tools","text":"<ol> <li>Built-in Explorer: <code>http://localhost:8080/api/index.php/explorer</code></li> <li>Postman: Create collections for API testing</li> <li>cURL: Command-line testing</li> <li>HTTPie: User-friendly HTTP client</li> </ol>"},{"location":"reference/api-reference/#development-best-practices","title":"Development Best Practices","text":"<ol> <li>Use Development Environment: Test against development instances</li> <li>Version Control API Keys: Never commit API keys</li> <li>Error Handling: Always handle API errors gracefully</li> <li>Logging: Log API requests for debugging</li> <li>Testing: Write automated tests for API integrations</li> <li>Documentation: Document your API usage and endpoints used</li> </ol>"},{"location":"reference/api-reference/#debugging-api-issues","title":"Debugging API Issues","text":"<pre><code># Check if API module is enabled\ntask config:list-modules | grep API\n\n# Test API connectivity\ncurl -v \"http://localhost:8080/api/index.php/users\" \\\n  -H \"DOLAPIKEY: your_api_key\"\n\n# Check application logs\ntask services:logs-app | grep -i api\n\n# Verify database permissions\ntask utilities:shell-db\n&gt; SELECT * FROM llx_user_api_keys WHERE api_key = 'your_api_key';\n</code></pre> <p>Remember to always test API integrations thoroughly and implement proper error handling in production applications!</p>"},{"location":"reference/cheat-sheet/","title":"Dolibarr Docker - Quick Reference Cheat Sheet","text":"<p>One-page reference for essential commands, configurations, and troubleshooting.</p>"},{"location":"reference/cheat-sheet/#quick-start-commands","title":"\ud83d\ude80 Quick Start Commands","text":"<pre><code># Initial Setup\ngit clone &lt;repository&gt; dolibarr-project &amp;&amp; cd dolibarr-project\ncp .env.example .env    # Edit with your settings\ntask setup:init         # Create directories\n\n# Development Environment\ntask services:start-with-tools     # Start with phpMyAdmin\ntask config:setup-dev-environment  # Configure for development\ntask utilities:health              # Check system health\n\n# Production Environment  \ntask services:start                 # Start production services\ntask config:configure-company      # Setup company info\ntask config:enable-modules         # Enable essential modules\n</code></pre>"},{"location":"reference/cheat-sheet/#essential-environment-variables","title":"\u2699\ufe0f Essential Environment Variables","text":"Variable Default Description Example <code>DOLIBARR_PORT</code> <code>8080</code> Web interface port <code>18080</code> <code>DB_PASSWORD</code> - Database password (required) <code>secure-db-pass</code> <code>DB_ROOT_PASSWORD</code> - Root password (required) <code>secure-root-pass</code> <code>DOLIBARR_ADMIN_PASSWORD</code> - Admin password (required) <code>admin-secure-pass</code> <code>TIMEZONE</code> <code>Europe/Paris</code> PHP timezone <code>America/New_York</code> <code>PHPMYADMIN_PORT</code> <code>8081</code> phpMyAdmin port <code>18081</code>"},{"location":"reference/cheat-sheet/#docker-profiles","title":"\ud83d\udc33 Docker Profiles","text":"Profile Command Services Use Case Internal DB <code>task services:start</code> Dolibarr + MariaDB Production Internal DB + Tools <code>task services:start-with-tools</code> + phpMyAdmin Development External DB <code>task services:start-external</code> Dolibarr only Enterprise"},{"location":"reference/cheat-sheet/#essential-task-commands","title":"\ud83d\udccb Essential Task Commands","text":""},{"location":"reference/cheat-sheet/#service-management","title":"Service Management","text":"<pre><code>task services:start                 # Start with internal database\ntask services:start-with-tools      # Start with development tools  \ntask services:start-external        # Start with external database\ntask services:stop                  # Stop all services\ntask services:status                # Show service status\ntask services:logs                  # View all logs\ntask services:logs-app              # View application logs only\n</code></pre>"},{"location":"reference/cheat-sheet/#configuration","title":"Configuration","text":"<pre><code>task config:setup-dev-environment   # Complete dev setup\ntask config:enable-modules          # Enable essential modules\ntask config:enable-api              # Enable REST API\ntask config:configure-company       # Setup company information\ntask config:show-config             # Display current config\ntask config:list-modules            # List enabled modules\n</code></pre>"},{"location":"reference/cheat-sheet/#backup-maintenance","title":"Backup &amp; Maintenance","text":"<pre><code>task backup:backup                  # Complete backup (DB + files)\ntask backup:backup-db               # Database backup only\ntask backup:list-backups            # List available backups\ntask maintenance:update             # Update containers\ntask maintenance:cleanup            # Clean Docker resources\n</code></pre>"},{"location":"reference/cheat-sheet/#utilities","title":"Utilities","text":"<pre><code>task utilities:health               # System health check\ntask utilities:shell-app            # Shell into application\ntask utilities:shell-db             # MySQL shell\ntask utilities:permissions          # Fix file permissions\n</code></pre>"},{"location":"reference/cheat-sheet/#access-urls","title":"\ud83c\udf10 Access URLs","text":"Service URL Purpose Dolibarr <code>http://localhost:8080</code> Main application phpMyAdmin <code>http://localhost:8081</code> Database management API Explorer <code>http://localhost:8080/api/index.php/explorer</code> API testing <p>Adjust ports based on your <code>.env</code> configuration</p>"},{"location":"reference/cheat-sheet/#common-configurations","title":"\ud83d\udd27 Common Configurations","text":""},{"location":"reference/cheat-sheet/#development-env","title":"Development .env","text":"<pre><code>DOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\nDB_PASSWORD=dev-secure-password\nDB_ROOT_PASSWORD=dev-secure-root-password\nDOLIBARR_ADMIN_PASSWORD=dev-admin-password\nTIMEZONE=America/New_York\n</code></pre>"},{"location":"reference/cheat-sheet/#production-env","title":"Production .env","text":"<pre><code>DOLIBARR_PORT=8080\nDB_PASSWORD=your-very-secure-password\nDB_ROOT_PASSWORD=your-very-secure-root-password\nDOLIBARR_ADMIN_PASSWORD=your-admin-password\nDOLIBARR_URL_ROOT=https://erp.yourcompany.com\nDOLIBARR_HTTPS=1\nTIMEZONE=UTC\n# Don't expose these in production:\n# PHPMYADMIN_PORT=8081\n# DB_EXTERNAL_PORT=3306\n</code></pre>"},{"location":"reference/cheat-sheet/#quick-troubleshooting","title":"\ud83d\udea8 Quick Troubleshooting","text":""},{"location":"reference/cheat-sheet/#service-wont-start","title":"Service Won't Start","text":"<pre><code># Check what's using the port\nlsof -i :8080\n\n# Check Docker status\ndocker version &amp;&amp; docker-compose version\n\n# View detailed logs\ntask services:logs\n\n# Reset everything (DANGEROUS - loses data)\ntask maintenance:reset-data\n</code></pre>"},{"location":"reference/cheat-sheet/#database-issues","title":"Database Issues","text":"<pre><code># Check database health\ndocker-compose exec dolibarr-db mysqladmin ping\n\n# Test database connection\ndocker-compose exec dolibarr nc -zv dolibarr-db 3306\n\n# View database logs\ntask services:logs-db\n</code></pre>"},{"location":"reference/cheat-sheet/#application-issues","title":"Application Issues","text":"<pre><code># Check web server status\ncurl -I http://localhost:8080\n\n# Fix file permissions\ntask utilities:permissions\n\n# Check configuration\ntask config:show-config\n</code></pre>"},{"location":"reference/cheat-sheet/#api-issues","title":"API Issues","text":"<pre><code># Enable API module\ntask config:enable-api\n\n# Test API connectivity\ncurl http://localhost:8080/api/index.php/explorer\n\n# Check API configuration\ntask config:list-modules | grep API\n</code></pre>"},{"location":"reference/cheat-sheet/#security-checklist","title":"\ud83d\udd10 Security Checklist","text":""},{"location":"reference/cheat-sheet/#development","title":"Development","text":"<ul> <li>[ ] Use secure passwords (min 16 chars)</li> <li>[ ] Don't commit <code>.env</code> files</li> <li>[ ] Use development ports (18xxx)</li> <li>[ ] Keep CSRF protection enabled</li> </ul>"},{"location":"reference/cheat-sheet/#production","title":"Production","text":"<ul> <li>[ ] Change all default passwords</li> <li>[ ] Use HTTPS (set <code>DOLIBARR_HTTPS=1</code>)</li> <li>[ ] Don't expose phpMyAdmin</li> <li>[ ] Don't expose database port</li> <li>[ ] Use external database for HA</li> <li>[ ] Enable regular backups</li> <li>[ ] Setup reverse proxy with SSL</li> </ul>"},{"location":"reference/cheat-sheet/#health-check-commands","title":"\ud83d\udcca Health Check Commands","text":"<pre><code># Quick system check\ntask utilities:health\n\n# Service status\ntask services:status\n\n# Resource usage\ndocker stats --no-stream\n\n# Disk usage\ndf -h &amp;&amp; docker system df\n\n# Network connectivity\ncurl -f http://localhost:8080/index.php\n</code></pre>"},{"location":"reference/cheat-sheet/#common-workflows","title":"\ud83d\udd04 Common Workflows","text":""},{"location":"reference/cheat-sheet/#first-time-setup","title":"First Time Setup","text":"<pre><code>task setup:init\ntask services:start-with-tools\ntask config:setup-dev-environment\ntask utilities:health\n</code></pre>"},{"location":"reference/cheat-sheet/#daily-development","title":"Daily Development","text":"<pre><code>task services:start-with-tools\n# Work on your project\ntask services:logs-app           # Check logs\ntask config:show-config         # Verify config\ntask services:stop              # Stop when done\n</code></pre>"},{"location":"reference/cheat-sheet/#production-deployment","title":"Production Deployment","text":"<pre><code># Setup production environment\ntask services:start\ntask config:configure-company\ntask config:enable-modules\ntask backup:backup\ntask utilities:health\n</code></pre>"},{"location":"reference/cheat-sheet/#backup-update","title":"Backup &amp; Update","text":"<pre><code>task backup:backup              # Create backup first\ntask maintenance:update         # Update containers\ntask utilities:health           # Verify health\n</code></pre>"},{"location":"reference/cheat-sheet/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>dolibarr-project/\n\u251c\u2500\u2500 .env                        # Environment configuration\n\u251c\u2500\u2500 .env.example               # Environment template\n\u251c\u2500\u2500 docker-compose.yml         # Service definitions\n\u251c\u2500\u2500 Taskfile.yml              # Task automation\n\u251c\u2500\u2500 custom/                    # Custom modules\n\u251c\u2500\u2500 logs/                      # Application logs\n\u251c\u2500\u2500 backups/                   # Data backups\n\u251c\u2500\u2500 db-init/                   # Database init scripts\n\u2514\u2500\u2500 docs/                      # Documentation\n    \u251c\u2500\u2500 reference/             # Technical references\n    \u251c\u2500\u2500 deployment-scenarios.md\n    \u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"reference/cheat-sheet/#emergency-commands","title":"\ud83c\udd98 Emergency Commands","text":"<pre><code># System completely broken?\ntask maintenance:reset-data     # DANGER: Deletes all data!\ntask setup:init\ntask services:start-with-tools\n\n# Database corrupted?\ntask services:stop\ndocker volume rm dolibarr_dolibarr-db-data\ntask services:start\n\n# Out of disk space?\ntask maintenance:cleanup\ndocker system prune -a\n\n# Container won't stop?\ndocker-compose kill\ndocker-compose down --remove-orphans\n</code></pre>"},{"location":"reference/cheat-sheet/#getting-help","title":"\ud83d\udcde Getting Help","text":""},{"location":"reference/cheat-sheet/#documentation","title":"Documentation","text":"<ul> <li>Reference Docs: <code>docs/reference/README.md</code></li> <li>Troubleshooting: <code>docs/reference/troubleshooting.md</code></li> <li>API Guide: <code>docs/reference/api-reference.md</code></li> </ul>"},{"location":"reference/cheat-sheet/#online-resources","title":"Online Resources","text":"<ul> <li>Dolibarr Forum: https://www.dolibarr.org/forum</li> <li>Docker Docs: https://docs.docker.com/</li> <li>Task Docs: https://taskfile.dev/</li> </ul>"},{"location":"reference/cheat-sheet/#stack-overflow","title":"Stack Overflow","text":"<ul> <li>Tag: <code>dolibarr</code> <code>docker</code> <code>docker-compose</code> <code>mariadb</code></li> </ul> <p>\ud83d\udca1 Pro Tip: Bookmark this page and keep your <code>.env</code> file secure! </p> <p>\ud83d\udd17 Quick Links: Full Reference | Troubleshooting | API Guide</p>"},{"location":"reference/configuration-reference/","title":"Configuration Reference","text":"<p>This document provides a comprehensive reference for all configuration files, their structure, and common settings used in the Dolibarr Docker setup.</p>"},{"location":"reference/configuration-reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Configuration Files Overview</li> <li>Docker Compose Configuration</li> <li>Environment Configuration</li> <li>Taskfile Configuration</li> <li>Database Configuration</li> <li>Dolibarr Configuration</li> <li>Custom Module Configuration</li> <li>Backup Configuration</li> <li>Development Overrides</li> <li>Production Configuration</li> </ul>"},{"location":"reference/configuration-reference/#configuration-files-overview","title":"Configuration Files Overview","text":"<p>The Dolibarr Docker setup uses multiple configuration files that work together:</p> File Purpose Format Required <code>.env</code> Environment variables Key=Value \u2705 Yes <code>.env.example</code> Environment template Key=Value \u26a0\ufe0f Template <code>docker-compose.yml</code> Service definitions YAML \u2705 Yes <code>docker-compose.override.yml</code> Local overrides YAML \u274c Optional <code>Taskfile.yml</code> Task definitions YAML \u2705 Yes <code>.taskfile/*.yml</code> Task modules YAML \u2705 Yes"},{"location":"reference/configuration-reference/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>The configuration system follows this precedence order (highest to lowest):</p> <ol> <li>Environment variables (runtime)</li> <li>docker-compose.override.yml (local overrides)</li> <li>docker-compose.yml (base configuration)</li> <li>Default values (built into images)</li> </ol>"},{"location":"reference/configuration-reference/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"reference/configuration-reference/#main-configuration-file-docker-composeyml","title":"Main Configuration File: <code>docker-compose.yml</code>","text":"<pre><code>services:\n  # Dolibarr Application Service\n  dolibarr:\n    image: dolibarr/dolibarr:latest\n    container_name: dolibarr-app\n    restart: unless-stopped\n\n    # Port mapping\n    ports:\n      - \"${DOLIBARR_PORT:-8080}:80\"\n\n    # Environment configuration\n    environment:\n      # Database settings\n      DOLI_DB_TYPE: ${DB_TYPE:-mysqli}\n      DOLI_DB_HOST: ${DB_HOST:-dolibarr-db}\n      DOLI_DB_PORT: ${DB_PORT:-3306}\n      DOLI_DB_NAME: ${DB_NAME:-dolibarr}\n      DOLI_DB_USER: ${DB_USER:-dolibarr}\n      DOLI_DB_PASSWORD: ${DB_PASSWORD}\n      DOLI_DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-}\n\n      # Application settings\n      DOLI_ADMIN_LOGIN: ${DOLIBARR_ADMIN_LOGIN:-admin}\n      DOLI_ADMIN_PASSWORD: ${DOLIBARR_ADMIN_PASSWORD}\n      DOLI_URL_ROOT: ${DOLIBARR_URL_ROOT:-http://localhost:8080}\n      DOLI_NOCSRFCHECK: ${DOLIBARR_NOCSRFCHECK:-0}\n      DOLI_HTTPS: ${DOLIBARR_HTTPS:-0}\n\n      # PHP settings\n      PHP_INI_DATE_TIMEZONE: ${TIMEZONE:-Europe/Paris}\n\n    # Volume mounts\n    volumes:\n      - dolibarr-html:/var/www/html\n      - dolibarr-documents:/var/www/documents\n      - ./custom:/var/www/html/custom\n      - ./logs:/var/www/html/documents/admin/temp\n\n    # Service dependencies\n    depends_on:\n      dolibarr-db:\n        condition: service_healthy\n        required: false\n\n    # Network configuration\n    networks:\n      - dolibarr-network\n\n  # MariaDB Database Service\n  dolibarr-db:\n    image: mariadb:10.11\n    container_name: dolibarr-db\n    restart: unless-stopped\n\n    # Port mapping (optional)\n    ports:\n      - \"${DB_EXTERNAL_PORT:-3306}:3306\"\n\n    # Database environment\n    environment:\n      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\n      MYSQL_DATABASE: ${DB_NAME:-dolibarr}\n      MYSQL_USER: ${DB_USER:-dolibarr}\n      MYSQL_PASSWORD: ${DB_PASSWORD}\n      MYSQL_CHARSET: utf8mb4\n      MYSQL_COLLATION: utf8mb4_unicode_ci\n\n    # Data persistence\n    volumes:\n      - dolibarr-db-data:/var/lib/mysql\n      - ./db-init:/docker-entrypoint-initdb.d\n\n    # Health check configuration\n    healthcheck:\n      test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n      start_period: 10s\n      interval: 10s\n      timeout: 5s\n      retries: 3\n\n    networks:\n      - dolibarr-network\n\n    # Profile-based activation\n    profiles:\n      - internal-db\n\n  # phpMyAdmin Service (Development)\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    container_name: dolibarr-phpmyadmin\n    restart: unless-stopped\n\n    ports:\n      - \"${PHPMYADMIN_PORT:-8081}:80\"\n\n    environment:\n      PMA_HOST: dolibarr-db\n      PMA_PORT: 3306\n      PMA_USER: ${DB_USER:-dolibarr}\n      PMA_PASSWORD: ${DB_PASSWORD}\n      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\n\n    depends_on:\n      dolibarr-db:\n        condition: service_healthy\n\n    networks:\n      - dolibarr-network\n\n    profiles:\n      - internal-db-tools\n\n# Volume definitions\nvolumes:\n  dolibarr-html:\n    driver: local\n  dolibarr-documents:\n    driver: local\n  dolibarr-db-data:\n    driver: local\n\n# Network definitions\nnetworks:\n  dolibarr-network:\n    driver: bridge\n</code></pre>"},{"location":"reference/configuration-reference/#key-configuration-sections","title":"Key Configuration Sections","text":""},{"location":"reference/configuration-reference/#service-configuration","title":"Service Configuration","text":"<p>Dolibarr Service Settings: <pre><code>dolibarr:\n  image: dolibarr/dolibarr:latest    # Container image\n  container_name: dolibarr-app       # Fixed container name\n  restart: unless-stopped            # Restart policy\n</code></pre></p> <p>Database Service Settings: <pre><code>dolibarr-db:\n  image: mariadb:10.11              # MariaDB version\n  restart: unless-stopped            # Restart policy\n  profiles: [internal-db]            # Profile activation\n</code></pre></p>"},{"location":"reference/configuration-reference/#environment-variable-mapping","title":"Environment Variable Mapping","text":"<p>Variables are passed from <code>.env</code> to container environment:</p> <pre><code>environment:\n  DOLI_DB_HOST: ${DB_HOST:-dolibarr-db}     # Default fallback\n  DOLI_DB_PASSWORD: ${DB_PASSWORD}          # Required variable\n  DOLI_ADMIN_LOGIN: ${DOLIBARR_ADMIN_LOGIN:-admin}  # Optional with default\n</code></pre>"},{"location":"reference/configuration-reference/#volume-configuration","title":"Volume Configuration","text":"<p>Named Volumes (managed by Docker): <pre><code>volumes:\n  - dolibarr-html:/var/www/html         # Application files\n  - dolibarr-documents:/var/www/documents # User documents\n  - dolibarr-db-data:/var/lib/mysql     # Database files\n</code></pre></p> <p>Bind Mounts (host directories): <pre><code>volumes:\n  - ./custom:/var/www/html/custom       # Custom modules\n  - ./logs:/var/www/html/documents/admin/temp # Application logs\n  - ./db-init:/docker-entrypoint-initdb.d # DB initialization scripts\n</code></pre></p>"},{"location":"reference/configuration-reference/#environment-configuration","title":"Environment Configuration","text":""},{"location":"reference/configuration-reference/#environment-file-env","title":"Environment File: <code>.env</code>","text":"<p>The <code>.env</code> file contains all configurable parameters:</p> <pre><code># Database Configuration\nDB_TYPE=mysqli\nDB_HOST=dolibarr-db\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr\nDB_PASSWORD=your-secure-database-password\nDB_ROOT_PASSWORD=your-secure-root-password\nDB_EXTERNAL_PORT=3306\n\n# Dolibarr Application Configuration\nDOLIBARR_PORT=8080\nDOLIBARR_ADMIN_LOGIN=admin\nDOLIBARR_ADMIN_PASSWORD=your-secure-admin-password\nDOLIBARR_URL_ROOT=http://localhost:8080\nDOLIBARR_NOCSRFCHECK=0\nDOLIBARR_HTTPS=0\n\n# PHP Configuration\nTIMEZONE=Europe/Paris\n\n# Optional Tools Configuration\nPHPMYADMIN_PORT=8081\n</code></pre>"},{"location":"reference/configuration-reference/#environment-template-envexample","title":"Environment Template: <code>.env.example</code>","text":"<p>Template file with documentation and examples:</p> <pre><code># Database Configuration\n# Database type: mysqli for MySQL/MariaDB, pgsql for PostgreSQL\nDB_TYPE=mysqli\n\n# Database connection settings\n# For internal database, use: dolibarr-db\n# For external database, use: your-db-host.com\nDB_HOST=dolibarr-db\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr\n\n# REQUIRED: Set secure passwords\nDB_PASSWORD=change-this-secure-db-password\nDB_ROOT_PASSWORD=change-this-secure-root-password\n\n# External port for database access (comment out for production)\nDB_EXTERNAL_PORT=3306\n\n# Dolibarr Application Configuration\n# Port for web interface\nDOLIBARR_PORT=8080\n\n# Initial admin user credentials\nDOLIBARR_ADMIN_LOGIN=admin\nDOLIBARR_ADMIN_PASSWORD=change-this-secure-admin-password\n\n# Base URL for the application\nDOLIBARR_URL_ROOT=http://localhost:8080\n\n# Security settings\nDOLIBARR_NOCSRFCHECK=0  # 0=enabled (recommended), 1=disabled\nDOLIBARR_HTTPS=0        # 0=HTTP, 1=HTTPS (when behind SSL proxy)\n\n# PHP Configuration\n# See: https://www.php.net/manual/en/timezones.php\nTIMEZONE=Europe/Paris\n\n# Optional Tools\n# Port for phpMyAdmin (comment out for production)\nPHPMYADMIN_PORT=8081\n\n# Profile-based Database Configuration\n# \n# For INTERNAL database (default): docker-compose --profile internal-db up -d\n# For EXTERNAL database: Configure variables below and use --profile external-db\n#\n# When using EXTERNAL database profile, configure these variables:\n# DB_HOST=your-external-db-host\n# DB_PORT=3306\n# DB_NAME=dolibarr\n# DB_USER=dolibarr_user\n# DB_PASSWORD=your-external-db-password\n# DB_ROOT_PASSWORD=  # Leave empty for external database\n\n# Security Notes:\n# - Change all default passwords before production use\n# - Use strong passwords (minimum 16 characters)\n# - Consider using Docker secrets for sensitive data in production\n# - Restrict database external port access in production\n# - When using external database, ensure network security between containers and database\n</code></pre>"},{"location":"reference/configuration-reference/#environment-variable-categories","title":"Environment Variable Categories","text":""},{"location":"reference/configuration-reference/#database-variables","title":"Database Variables","text":"<pre><code>DB_TYPE=mysqli                    # Database driver\nDB_HOST=dolibarr-db              # Database hostname\nDB_PORT=3306                     # Database port\nDB_NAME=dolibarr                 # Database name\nDB_USER=dolibarr                 # Application database user\nDB_PASSWORD=secure-password      # Application user password\nDB_ROOT_PASSWORD=root-password   # Database root password (internal DB only)\nDB_EXTERNAL_PORT=3306           # Host port mapping (optional)\n</code></pre>"},{"location":"reference/configuration-reference/#application-variables","title":"Application Variables","text":"<pre><code>DOLIBARR_PORT=8080                        # Host port for web interface\nDOLIBARR_ADMIN_LOGIN=admin                # Initial admin username\nDOLIBARR_ADMIN_PASSWORD=admin-password    # Initial admin password\nDOLIBARR_URL_ROOT=http://localhost:8080   # Base application URL\nDOLIBARR_NOCSRFCHECK=0                    # CSRF protection (0=on, 1=off)\nDOLIBARR_HTTPS=0                          # HTTPS mode (0=HTTP, 1=HTTPS)\n</code></pre>"},{"location":"reference/configuration-reference/#system-variables","title":"System Variables","text":"<pre><code>TIMEZONE=Europe/Paris            # PHP timezone\nPHPMYADMIN_PORT=8081            # phpMyAdmin port (development)\n</code></pre>"},{"location":"reference/configuration-reference/#taskfile-configuration","title":"Taskfile Configuration","text":""},{"location":"reference/configuration-reference/#main-taskfile-taskfileyml","title":"Main Taskfile: <code>Taskfile.yml</code>","text":"<pre><code>version: '3'\n\n# Include sub-taskfiles for organization\nincludes:\n  setup:\n    taskfile: .taskfile/setup.yml\n  services:\n    taskfile: .taskfile/services.yml\n  config:\n    taskfile: .taskfile/config.yml\n  backup:\n    taskfile: .taskfile/backup.yml\n  maintenance:\n    taskfile: .taskfile/maintenance.yml\n  utilities:\n    taskfile: .taskfile/utilities.yml\n\n# Global variables available to all tasks\nvars:\n  BACKUP_DIR: ./backups\n  TIMESTAMP: '{{now | date \"2006-01-02_15-04-05\"}}'\n  COMPOSE_FILE: docker-compose.yml\n\n# Default task\ntasks:\n  default:\n    desc: Show available tasks\n    cmds:\n      - task --list\n</code></pre>"},{"location":"reference/configuration-reference/#task-module-structure","title":"Task Module Structure","text":"<p>Each module in <code>.taskfile/</code> contains related tasks:</p> <p>Setup Tasks (<code>.taskfile/setup.yml</code>): <pre><code>version: '3'\n\ntasks:\n  init:\n    desc: Initialize Dolibarr setup (create directories and set permissions)\n    cmds:\n      - mkdir -p custom logs db-init {{.BACKUP_DIR}}\n      - chmod 755 custom logs db-init {{.BACKUP_DIR}}\n      - echo \"\u2705 Dolibarr directories initialized\"\n</code></pre></p> <p>Service Tasks (<code>.taskfile/services.yml</code>): <pre><code>version: '3'\n\ntasks:\n  start:\n    desc: Start Dolibarr with internal database\n    cmds:\n      - docker-compose --profile internal-db up -d\n      - echo \"\u2705 Dolibarr started with internal database\"\n\n  start-with-tools:\n    desc: Start Dolibarr with internal database and phpMyAdmin\n    cmds:\n      - docker-compose --profile internal-db --profile internal-db-tools up -d\n      - echo \"\u2705 Dolibarr started with internal database and phpMyAdmin\"\n\n  start-external:\n    desc: Start Dolibarr with external database\n    cmds:\n      - docker-compose --profile external-db up -d\n      - echo \"\u2705 Dolibarr started with external database\"\n\n  stop:\n    desc: Stop all Dolibarr services\n    cmds:\n      - docker-compose down\n      - echo \"\u2705 Dolibarr services stopped\"\n</code></pre></p>"},{"location":"reference/configuration-reference/#task-configuration-patterns","title":"Task Configuration Patterns","text":""},{"location":"reference/configuration-reference/#task-with-preconditions","title":"Task with Preconditions","text":"<pre><code>task-name:\n  desc: Task description\n  preconditions:\n    - sh: docker-compose ps dolibarr | grep -q \"Up\"\n      msg: \"Dolibarr container is not running. Start with: task services:start\"\n  cmds:\n    - echo \"Task commands here\"\n</code></pre>"},{"location":"reference/configuration-reference/#task-with-dependencies","title":"Task with Dependencies","text":"<pre><code>backup:\n  desc: Create complete backup\n  deps: [backup-db, backup-app]    # Run these tasks first\n  cmds:\n    - echo \"\u2705 Complete backup created in {{.BACKUP_DIR}}/{{.TIMESTAMP}}\"\n</code></pre>"},{"location":"reference/configuration-reference/#task-with-variables","title":"Task with Variables","text":"<pre><code>backup-db:\n  desc: Create database backup\n  vars:\n    BACKUP_FILE: \"database_{{.TIMESTAMP}}.sql.gz\"\n  cmds:\n    - mkdir -p {{.BACKUP_DIR}}/{{.TIMESTAMP}}\n    - docker-compose exec -T dolibarr-db mysqldump ... | gzip &gt; {{.BACKUP_DIR}}/{{.TIMESTAMP}}/{{.BACKUP_FILE}}\n</code></pre>"},{"location":"reference/configuration-reference/#database-configuration","title":"Database Configuration","text":""},{"location":"reference/configuration-reference/#mariadb-configuration","title":"MariaDB Configuration","text":"<p>The database service uses environment variables for configuration:</p> <pre><code>environment:\n  # Required settings\n  MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}      # Root user password\n  MYSQL_DATABASE: ${DB_NAME:-dolibarr}          # Database to create\n  MYSQL_USER: ${DB_USER:-dolibarr}              # Application user\n  MYSQL_PASSWORD: ${DB_PASSWORD}                # Application password\n\n  # Character set settings\n  MYSQL_CHARSET: utf8mb4                        # UTF-8 character set\n  MYSQL_COLLATION: utf8mb4_unicode_ci          # Unicode collation\n</code></pre>"},{"location":"reference/configuration-reference/#database-initialization","title":"Database Initialization","text":"<p>Scripts in <code>./db-init/</code> are executed when the database container first starts:</p> <p>Example initialization script (<code>db-init/01-custom-settings.sql</code>): <pre><code>-- Custom database settings\nSET GLOBAL innodb_buffer_pool_size = 268435456;  -- 256MB\nSET GLOBAL max_connections = 100;\nSET GLOBAL query_cache_size = 16777216;          -- 16MB\n\n-- Create additional users if needed\n-- CREATE USER 'readonly'@'%' IDENTIFIED BY 'readonly_password';\n-- GRANT SELECT ON dolibarr.* TO 'readonly'@'%';\n</code></pre></p> <p>Shell script example (<code>db-init/02-setup.sh</code>): <pre><code>#!/bin/bash\necho \"Running custom database setup...\"\n\n# Wait for database to be fully ready\nuntil mysql -u root -p\"$MYSQL_ROOT_PASSWORD\" -e \"SELECT 1\"; do\n  echo \"Waiting for database...\"\n  sleep 5\ndone\n\necho \"Database setup completed\"\n</code></pre></p>"},{"location":"reference/configuration-reference/#database-health-check","title":"Database Health Check","text":"<p>The health check ensures the database is ready before starting dependent services:</p> <pre><code>healthcheck:\n  test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n  start_period: 10s    # Wait 10 seconds before first check\n  interval: 10s        # Check every 10 seconds\n  timeout: 5s          # 5 second timeout per check\n  retries: 3           # Retry 3 times before marking unhealthy\n</code></pre>"},{"location":"reference/configuration-reference/#dolibarr-configuration","title":"Dolibarr Configuration","text":""},{"location":"reference/configuration-reference/#application-environment-variables","title":"Application Environment Variables","text":"<p>Variables passed to the Dolibarr container:</p> <pre><code>environment:\n  # Database connection\n  DOLI_DB_TYPE: ${DB_TYPE:-mysqli}              # Database driver\n  DOLI_DB_HOST: ${DB_HOST:-dolibarr-db}         # Database host\n  DOLI_DB_PORT: ${DB_PORT:-3306}                # Database port\n  DOLI_DB_NAME: ${DB_NAME:-dolibarr}            # Database name\n  DOLI_DB_USER: ${DB_USER:-dolibarr}            # Database user\n  DOLI_DB_PASSWORD: ${DB_PASSWORD}              # Database password\n  DOLI_DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-}  # Root password (optional)\n\n  # Application settings\n  DOLI_ADMIN_LOGIN: ${DOLIBARR_ADMIN_LOGIN:-admin}           # Admin username\n  DOLI_ADMIN_PASSWORD: ${DOLIBARR_ADMIN_PASSWORD}            # Admin password\n  DOLI_URL_ROOT: ${DOLIBARR_URL_ROOT:-http://localhost:8080} # Base URL\n  DOLI_NOCSRFCHECK: ${DOLIBARR_NOCSRFCHECK:-0}               # CSRF protection\n  DOLI_HTTPS: ${DOLIBARR_HTTPS:-0}                           # HTTPS mode\n\n  # PHP settings\n  PHP_INI_DATE_TIMEZONE: ${TIMEZONE:-Europe/Paris}           # Timezone\n</code></pre>"},{"location":"reference/configuration-reference/#dolibarr-configuration-files","title":"Dolibarr Configuration Files","text":"<p>After initialization, Dolibarr creates configuration files inside the container:</p> <p>Main configuration (<code>/var/www/html/conf/conf.php</code>): <pre><code>&lt;?php\n// Database settings\n$dolibarr_main_url_root='http://localhost:8080';\n$dolibarr_main_document_root='/var/www/html';\n$dolibarr_main_url_root_alt='/custom';\n$dolibarr_main_document_root_alt='/var/www/html/custom';\n$dolibarr_main_data_root='/var/www/documents';\n$dolibarr_main_db_host='dolibarr-db';\n$dolibarr_main_db_port='3306';\n$dolibarr_main_db_name='dolibarr';\n$dolibarr_main_db_prefix='llx_';\n$dolibarr_main_db_user='dolibarr';\n$dolibarr_main_db_pass='password_hash';\n$dolibarr_main_db_type='mysqli';\n$dolibarr_main_db_character_set='utf8mb4';\n$dolibarr_main_db_collation='utf8mb4_unicode_ci';\n?&gt;\n</code></pre></p>"},{"location":"reference/configuration-reference/#module-configuration","title":"Module Configuration","text":"<p>Module enablement is stored in the database (<code>llx_const</code> table):</p> <pre><code>-- Examples of module constants\nINSERT INTO llx_const (name, value, type, visible, note, entity) VALUES\n('MAIN_MODULE_SOCIETE', '1', 'chaine', 0, 'To enable module Third parties', 1),\n('MAIN_MODULE_FACTURE', '1', 'chaine', 0, 'To enable module Invoices', 1),\n('MAIN_MODULE_API', '1', 'chaine', 0, 'To enable module API', 1);\n</code></pre>"},{"location":"reference/configuration-reference/#custom-module-configuration","title":"Custom Module Configuration","text":""},{"location":"reference/configuration-reference/#custom-module-structure","title":"Custom Module Structure","text":"<p>Custom modules are placed in the <code>./custom/</code> directory:</p> <pre><code>custom/\n\u251c\u2500\u2500 mymodule/                    # Module directory\n\u2502   \u251c\u2500\u2500 core/                   # Core module files\n\u2502   \u251c\u2500\u2500 admin/                  # Administration pages\n\u2502   \u251c\u2500\u2500 class/                  # PHP classes\n\u2502   \u251c\u2500\u2500 lang/                   # Language files\n\u2502   \u251c\u2500\u2500 img/                    # Images and icons\n\u2502   \u251c\u2500\u2500 js/                     # JavaScript files\n\u2502   \u251c\u2500\u2500 css/                    # CSS stylesheets\n\u2502   \u251c\u2500\u2500 mymodule.php           # Main module descriptor\n\u2502   \u2514\u2500\u2500 README.md              # Module documentation\n\u2514\u2500\u2500 README.md                   # Custom modules documentation\n</code></pre>"},{"location":"reference/configuration-reference/#module-descriptor-example","title":"Module Descriptor Example","text":"<p>mymodule/mymodule.php: <pre><code>&lt;?php\ninclude_once DOL_DOCUMENT_ROOT.'/core/modules/DolibarrModules.class.php';\n\nclass modMyModule extends DolibarrModules\n{\n    public function __construct($db)\n    {\n        parent::__construct($db);\n\n        $this-&gt;numero = 104000;\n        $this-&gt;rights_class = 'mymodule';\n        $this-&gt;family = \"other\";\n        $this-&gt;name = 'MyModule';\n        $this-&gt;description = 'My Custom Module';\n        $this-&gt;descriptionlong = 'Extended description of my custom module';\n        $this-&gt;version = '1.0.0';\n        $this-&gt;const_name = 'MAIN_MODULE_MYMODULE';\n\n        // Dependencies\n        $this-&gt;depends = array('modSociete');\n        $this-&gt;requiredby = array();\n\n        // Configuration\n        $this-&gt;config_page_url = array('admin/setup.php@mymodule');\n\n        // Menu entries\n        $this-&gt;menu = array();\n\n        // Permissions\n        $this-&gt;rights = array();\n\n        // Database tables\n        $this-&gt;boxes = array();\n    }\n}\n?&gt;\n</code></pre></p>"},{"location":"reference/configuration-reference/#backup-configuration","title":"Backup Configuration","text":""},{"location":"reference/configuration-reference/#backup-task-configuration","title":"Backup Task Configuration","text":"<p>Backup tasks are defined in <code>.taskfile/backup.yml</code>:</p> <pre><code>version: '3'\n\ntasks:\n  backup:\n    desc: Create complete backup (database + application data)\n    deps: [backup-db, backup-app]\n    cmds:\n      - echo \"\u2705 Complete backup created in {{.BACKUP_DIR}}/{{.TIMESTAMP}}\"\n\n  backup-db:\n    desc: Create database backup\n    preconditions:\n      - sh: docker-compose ps dolibarr-db | grep -q \"Up\"\n        msg: \"Database container is not running. Start with: task services:start\"\n    cmds:\n      - mkdir -p {{.BACKUP_DIR}}/{{.TIMESTAMP}}\n      - docker-compose exec -T dolibarr-db mysqldump -u root -p$DB_ROOT_PASSWORD --single-transaction --routines --triggers dolibarr | gzip &gt; {{.BACKUP_DIR}}/{{.TIMESTAMP}}/database_{{.TIMESTAMP}}.sql.gz\n      - echo \"\u2705 Database backup created\"\n\n  backup-app:\n    desc: Create application data backup\n    cmds:\n      - mkdir -p {{.BACKUP_DIR}}/{{.TIMESTAMP}}\n      - docker run --rm -v dolibarr_dolibarr-documents:/source/documents:ro -v dolibarr_dolibarr-html:/source/html:ro -v $(pwd)/custom:/source/custom:ro -v $(pwd)/{{.BACKUP_DIR}}/{{.TIMESTAMP}}:/backup alpine:latest sh -c 'cd /backup &amp;&amp; tar -czf app_data_{{.TIMESTAMP}}.tar.gz -C /source documents html custom'\n      - echo \"\u2705 Application backup created\"\n</code></pre>"},{"location":"reference/configuration-reference/#backup-directory-structure","title":"Backup Directory Structure","text":"<pre><code>backups/\n\u251c\u2500\u2500 2024-01-15_14-30-45/\n\u2502   \u251c\u2500\u2500 database_2024-01-15_14-30-45.sql.gz    # Database dump\n\u2502   \u2514\u2500\u2500 app_data_2024-01-15_14-30-45.tar.gz    # Application files\n\u251c\u2500\u2500 2024-01-14_10-15-22/\n\u2502   \u251c\u2500\u2500 database_2024-01-14_10-15-22.sql.gz\n\u2502   \u2514\u2500\u2500 app_data_2024-01-14_10-15-22.tar.gz\n\u2514\u2500\u2500 README.md                                    # Backup documentation\n</code></pre>"},{"location":"reference/configuration-reference/#development-overrides","title":"Development Overrides","text":""},{"location":"reference/configuration-reference/#docker-compose-override-docker-composeoverrideyml","title":"Docker Compose Override: <code>docker-compose.override.yml</code>","text":"<p>This file allows local customizations without modifying the main configuration:</p> <pre><code>version: '3.8'\n\nservices:\n  dolibarr:\n    # Development-specific environment variables\n    environment:\n      # Enable debug mode\n      DOLI_DEBUG: 1\n\n      # Disable CSRF for easier API testing\n      DOLI_NOCSRFCHECK: 1\n\n      # PHP development settings\n      PHP_DISPLAY_ERRORS: 1\n      PHP_LOG_ERRORS: 1\n      PHP_ERROR_REPORTING: E_ALL\n\n    # Additional volumes for development\n    volumes:\n      # Mount source code for live editing\n      - ./src:/var/www/html/custom/dev\n\n      # Development tools\n      - ./dev-tools:/var/www/html/dev-tools\n\n    # Labels for development tools\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.dolibarr-dev.rule=Host(`dolibarr.localhost`)\"\n\n  dolibarr-db:\n    # Development database settings\n    environment:\n      # Enable query logging\n      MYSQL_GENERAL_LOG: 1\n      MYSQL_GENERAL_LOG_FILE: /var/lib/mysql/general.log\n\n      # Performance settings for development\n      MYSQL_INNODB_BUFFER_POOL_SIZE: 128M\n\n    # Expose additional ports for debugging\n    ports:\n      - \"3307:3306\"\n\n  # Additional development services\n  mailhog:\n    image: mailhog/mailhog:latest\n    container_name: dolibarr-mailhog\n    ports:\n      - \"1025:1025\"   # SMTP\n      - \"8025:8025\"   # Web UI\n    networks:\n      - dolibarr-network\n\n  redis:\n    image: redis:alpine\n    container_name: dolibarr-redis\n    ports:\n      - \"6379:6379\"\n    networks:\n      - dolibarr-network\n</code></pre>"},{"location":"reference/configuration-reference/#development-environment-variables","title":"Development Environment Variables","text":"<p>Development .env: <pre><code># Development-specific settings\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\n\n# Relaxed security for development\nDOLIBARR_NOCSRFCHECK=1\n\n# Development URLs\nDOLIBARR_URL_ROOT=http://localhost:18080\n\n# Development database settings\nDB_PASSWORD=dev-password\nDB_ROOT_PASSWORD=dev-root-password\nDOLIBARR_ADMIN_PASSWORD=dev-admin-password\n\n# Development timezone\nTIMEZONE=America/New_York\n</code></pre></p>"},{"location":"reference/configuration-reference/#production-configuration","title":"Production Configuration","text":""},{"location":"reference/configuration-reference/#production-docker-compose","title":"Production Docker Compose","text":"<p>docker-compose.prod.yml: <pre><code>version: '3.8'\n\nservices:\n  dolibarr:\n    # Production image with specific version\n    image: dolibarr/dolibarr:19.0.0\n\n    # Always restart in production\n    restart: always\n\n    # Production environment\n    environment:\n      # Security settings\n      DOLI_NOCSRFCHECK: 0\n      DOLI_HTTPS: 1\n\n      # Performance settings\n      PHP_MEMORY_LIMIT: 512M\n      PHP_MAX_EXECUTION_TIME: 300\n      PHP_UPLOAD_MAX_FILESIZE: 100M\n\n    # Production volumes (external storage)\n    volumes:\n      - dolibarr-html:/var/www/html\n      - /mnt/shared-storage/dolibarr/documents:/var/www/documents\n      - /opt/dolibarr/custom:/var/www/html/custom:ro\n      - /var/log/dolibarr:/var/www/html/documents/admin/temp\n\n    # Resource limits\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n\n    # Structured logging\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n\n    # Security labels\n    labels:\n      - \"com.example.environment=production\"\n      - \"com.example.application=dolibarr\"\n\n  # Remove database for external DB in production\n  dolibarr-db:\n    profiles:\n      - disabled\n\n  # Remove development tools\n  phpmyadmin:\n    profiles:\n      - disabled\n\n# Production volumes\nvolumes:\n  dolibarr-html:\n    driver: local\n    driver_opts:\n      type: nfs\n      o: addr=nfs.company.com,rw\n      device: \":/mnt/dolibarr/html\"\n\n# Production networks\nnetworks:\n  dolibarr-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/24\n</code></pre></p>"},{"location":"reference/configuration-reference/#production-environment-variables","title":"Production Environment Variables","text":"<p>Production .env: <pre><code># Production Database (External)\nDB_TYPE=mysqli\nDB_HOST=dolibarr-prod.cluster-abc123.rds.amazonaws.com\nDB_PORT=3306\nDB_NAME=dolibarr_production\nDB_USER=dolibarr_app_user\nDB_PASSWORD=${SECRET_DB_PASSWORD}\n# DB_ROOT_PASSWORD not needed for external database\n\n# Production Application\nDOLIBARR_PORT=8080\nDOLIBARR_ADMIN_LOGIN=admin\nDOLIBARR_ADMIN_PASSWORD=${SECRET_ADMIN_PASSWORD}\nDOLIBARR_URL_ROOT=https://erp.company.com\nDOLIBARR_HTTPS=1\nDOLIBARR_NOCSRFCHECK=0\n\n# Production PHP Settings\nTIMEZONE=UTC\n\n# Production Security\n# Don't expose database port\n# DB_EXTERNAL_PORT not set\n\n# Don't expose development tools\n# PHPMYADMIN_PORT not set\n</code></pre></p>"},{"location":"reference/configuration-reference/#production-security-configuration","title":"Production Security Configuration","text":"<p>Security headers (Nginx reverse proxy): <pre><code>server {\n    listen 443 ssl http2;\n    server_name erp.company.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/company.crt;\n    ssl_certificate_key /etc/ssl/private/company.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options DENY;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\";\n\n    # CSP header\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\";\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # File upload limits\n        client_max_body_size 100M;\n    }\n}\n</code></pre></p>"},{"location":"reference/configuration-reference/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"reference/configuration-reference/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Strong Passwords: Use minimum 16 characters with mixed complexity</li> <li>Secrets Management: Use Docker secrets or external secret management</li> <li>Port Exposure: Only expose necessary ports</li> <li>HTTPS: Always use HTTPS in production</li> <li>Regular Updates: Keep configurations and images updated</li> </ol>"},{"location":"reference/configuration-reference/#environment-management","title":"Environment Management","text":"<ol> <li>Environment Separation: Use different configurations for different environments</li> <li>Configuration Validation: Validate configurations before deployment</li> <li>Version Control: Track configuration changes (excluding secrets)</li> <li>Documentation: Document all custom configurations</li> <li>Backup: Include configuration files in backup strategies</li> </ol>"},{"location":"reference/configuration-reference/#performance-configuration","title":"Performance Configuration","text":"<ol> <li>Resource Limits: Set appropriate CPU and memory limits</li> <li>Volume Strategy: Use appropriate volume types for data</li> <li>Network Optimization: Configure networks for performance</li> <li>Monitoring: Implement configuration monitoring</li> <li>Tuning: Regular performance tuning based on usage patterns</li> </ol> <p>Remember to always test configuration changes in a development environment before applying them to production!</p>"},{"location":"reference/docker-services/","title":"Docker Services Reference","text":"<p>This document provides a comprehensive reference of all Docker services, containers, volumes, and networks used in the Dolibarr Docker setup.</p>"},{"location":"reference/docker-services/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Service Overview</li> <li>Service Profiles</li> <li>Service Specifications</li> <li>Volumes and Storage</li> <li>Networks</li> <li>Port Mappings</li> <li>Health Checks</li> <li>Dependencies</li> <li>Configuration Examples</li> </ul>"},{"location":"reference/docker-services/#service-overview","title":"Service Overview","text":"<p>The Dolibarr Docker setup consists of three main services that can be deployed in different combinations based on your needs:</p> Service Image Purpose Required <code>dolibarr</code> <code>dolibarr/dolibarr:latest</code> Main application server \u2705 Always <code>dolibarr-db</code> <code>mariadb:10.11</code> Internal database \u26a0\ufe0f Profile-based <code>phpmyadmin</code> <code>phpmyadmin/phpmyadmin:latest</code> Database management \u274c Optional"},{"location":"reference/docker-services/#service-profiles","title":"Service Profiles","text":"<p>Docker Compose profiles control which services are started based on your deployment scenario:</p>"},{"location":"reference/docker-services/#profile-internal-db","title":"Profile: <code>internal-db</code>","text":"<p>Services: <code>dolibarr</code> + <code>dolibarr-db</code> Use case: Production with internal database, development without tools <pre><code>docker-compose --profile internal-db up -d\n# OR\ntask services:start\n</code></pre></p>"},{"location":"reference/docker-services/#profile-internal-db-tools","title":"Profile: <code>internal-db-tools</code>","text":"<p>Services: <code>dolibarr</code> + <code>dolibarr-db</code> + <code>phpmyadmin</code> Use case: Development with database management tools <pre><code>docker-compose --profile internal-db --profile internal-db-tools up -d\n# OR\ntask services:start-with-tools\n</code></pre></p>"},{"location":"reference/docker-services/#profile-external-db","title":"Profile: <code>external-db</code>","text":"<p>Services: <code>dolibarr</code> only Use case: Production with external/managed database <pre><code>docker-compose --profile external-db up -d\n# OR\ntask services:start-external\n</code></pre></p>"},{"location":"reference/docker-services/#service-specifications","title":"Service Specifications","text":""},{"location":"reference/docker-services/#dolibarr-service","title":"dolibarr Service","text":"<p>Container Name: <code>dolibarr-app</code> Image: <code>dolibarr/dolibarr:latest</code> Restart Policy: <code>unless-stopped</code></p>"},{"location":"reference/docker-services/#port-configuration","title":"Port Configuration","text":"<p><pre><code>ports:\n  - \"${DOLIBARR_PORT:-8080}:80\"\n</code></pre> - Host Port: Configurable via <code>DOLIBARR_PORT</code> environment variable - Container Port: 80 (HTTP) - Default Host Port: 8080</p>"},{"location":"reference/docker-services/#environment-variables","title":"Environment Variables","text":"<pre><code>environment:\n  # Database configuration\n  DOLI_DB_TYPE: ${DB_TYPE:-mysqli}\n  DOLI_DB_HOST: ${DB_HOST:-dolibarr-db}\n  DOLI_DB_PORT: ${DB_PORT:-3306}\n  DOLI_DB_NAME: ${DB_NAME:-dolibarr}\n  DOLI_DB_USER: ${DB_USER:-dolibarr}\n  DOLI_DB_PASSWORD: ${DB_PASSWORD}\n  DOLI_DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-}\n\n  # Application configuration\n  DOLI_ADMIN_LOGIN: ${DOLIBARR_ADMIN_LOGIN:-admin}\n  DOLI_ADMIN_PASSWORD: ${DOLIBARR_ADMIN_PASSWORD}\n  DOLI_URL_ROOT: ${DOLIBARR_URL_ROOT:-http://localhost:8080}\n  DOLI_NOCSRFCHECK: ${DOLIBARR_NOCSRFCHECK:-0}\n  DOLI_HTTPS: ${DOLIBARR_HTTPS:-0}\n\n  # PHP configuration\n  PHP_INI_DATE_TIMEZONE: ${TIMEZONE:-Europe/Paris}\n</code></pre>"},{"location":"reference/docker-services/#volume-mounts","title":"Volume Mounts","text":"<pre><code>volumes:\n  - dolibarr-html:/var/www/html          # Application files\n  - dolibarr-documents:/var/www/documents # Documents and uploads\n  - ./custom:/var/www/html/custom         # Custom modules (bind mount)\n  - ./logs:/var/www/html/documents/admin/temp # Application logs (bind mount)\n</code></pre>"},{"location":"reference/docker-services/#dependencies","title":"Dependencies","text":"<pre><code>depends_on:\n  dolibarr-db:\n    condition: service_healthy  # Waits for database health check\n    required: false             # Optional dependency for external DB\n</code></pre>"},{"location":"reference/docker-services/#networks","title":"Networks","text":"<ul> <li><code>dolibarr-network</code></li> </ul>"},{"location":"reference/docker-services/#dolibarr-db-service","title":"dolibarr-db Service","text":"<p>Container Name: <code>dolibarr-db</code> Image: <code>mariadb:10.11</code> Restart Policy: <code>unless-stopped</code> Profile: <code>internal-db</code></p>"},{"location":"reference/docker-services/#port-configuration_1","title":"Port Configuration","text":"<p><pre><code>ports:\n  - \"${DB_EXTERNAL_PORT:-3306}:3306\"\n</code></pre> - Host Port: Configurable via <code>DB_EXTERNAL_PORT</code> - Container Port: 3306 (MySQL) - Default Host Port: 3306</p>"},{"location":"reference/docker-services/#environment-variables_1","title":"Environment Variables","text":"<pre><code>environment:\n  MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}      # Root password\n  MYSQL_DATABASE: ${DB_NAME:-dolibarr}          # Database name\n  MYSQL_USER: ${DB_USER:-dolibarr}              # Application user\n  MYSQL_PASSWORD: ${DB_PASSWORD}                # Application password\n  MYSQL_CHARSET: utf8mb4                        # Character set\n  MYSQL_COLLATION: utf8mb4_unicode_ci           # Collation\n</code></pre>"},{"location":"reference/docker-services/#volume-mounts_1","title":"Volume Mounts","text":"<pre><code>volumes:\n  - dolibarr-db-data:/var/lib/mysql        # Database files\n  - ./db-init:/docker-entrypoint-initdb.d  # Initialization scripts\n</code></pre>"},{"location":"reference/docker-services/#health-check","title":"Health Check","text":"<pre><code>healthcheck:\n  test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n  start_period: 10s    # Grace period before first check\n  interval: 10s        # Check interval\n  timeout: 5s          # Timeout per check\n  retries: 3           # Maximum retries\n</code></pre>"},{"location":"reference/docker-services/#networks_1","title":"Networks","text":"<ul> <li><code>dolibarr-network</code></li> </ul>"},{"location":"reference/docker-services/#phpmyadmin-service","title":"phpmyadmin Service","text":"<p>Container Name: <code>dolibarr-phpmyadmin</code> Image: <code>phpmyadmin/phpmyadmin:latest</code> Restart Policy: <code>unless-stopped</code> Profile: <code>internal-db-tools</code></p>"},{"location":"reference/docker-services/#port-configuration_2","title":"Port Configuration","text":"<p><pre><code>ports:\n  - \"${PHPMYADMIN_PORT:-8081}:80\"\n</code></pre> - Host Port: Configurable via <code>PHPMYADMIN_PORT</code> - Container Port: 80 (HTTP) - Default Host Port: 8081</p>"},{"location":"reference/docker-services/#environment-variables_2","title":"Environment Variables","text":"<pre><code>environment:\n  PMA_HOST: dolibarr-db                # Target database host\n  PMA_PORT: 3306                       # Target database port\n  PMA_USER: ${DB_USER:-dolibarr}       # Default login user\n  PMA_PASSWORD: ${DB_PASSWORD}         # Default login password\n  MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} # Root password for admin\n</code></pre>"},{"location":"reference/docker-services/#dependencies_1","title":"Dependencies","text":"<pre><code>depends_on:\n  dolibarr-db:\n    condition: service_healthy  # Waits for database to be ready\n</code></pre>"},{"location":"reference/docker-services/#networks_2","title":"Networks","text":"<ul> <li><code>dolibarr-network</code></li> </ul>"},{"location":"reference/docker-services/#volumes-and-storage","title":"Volumes and Storage","text":""},{"location":"reference/docker-services/#named-volumes","title":"Named Volumes","text":""},{"location":"reference/docker-services/#dolibarr-html","title":"<code>dolibarr-html</code>","text":"<ul> <li>Purpose: Stores Dolibarr application files</li> <li>Mount Point: <code>/var/www/html</code></li> <li>Driver: <code>local</code></li> <li>Persistence: Survives container recreation</li> <li>Contents: PHP files, configuration, web assets</li> </ul>"},{"location":"reference/docker-services/#dolibarr-documents","title":"<code>dolibarr-documents</code>","text":"<ul> <li>Purpose: Stores user documents and uploads</li> <li>Mount Point: <code>/var/www/documents</code></li> <li>Driver: <code>local</code></li> <li>Persistence: Survives container recreation</li> <li>Contents: User uploads, generated PDFs, attachments</li> </ul>"},{"location":"reference/docker-services/#dolibarr-db-data","title":"<code>dolibarr-db-data</code>","text":"<ul> <li>Purpose: Stores database files</li> <li>Mount Point: <code>/var/lib/mysql</code></li> <li>Driver: <code>local</code></li> <li>Persistence: Survives container recreation</li> <li>Contents: MySQL/MariaDB data files</li> </ul>"},{"location":"reference/docker-services/#bind-mounts","title":"Bind Mounts","text":""},{"location":"reference/docker-services/#custom","title":"<code>./custom</code>","text":"<ul> <li>Purpose: Custom modules and extensions</li> <li>Mount Point: <code>/var/www/html/custom</code></li> <li>Type: Bind mount (host directory)</li> <li>Persistence: Always persistent on host</li> <li>Contents: Custom Dolibarr modules, themes</li> </ul>"},{"location":"reference/docker-services/#logs","title":"<code>./logs</code>","text":"<ul> <li>Purpose: Application logs</li> <li>Mount Point: <code>/var/www/html/documents/admin/temp</code></li> <li>Type: Bind mount (host directory)</li> <li>Persistence: Always persistent on host</li> <li>Contents: Error logs, access logs, debug information</li> </ul>"},{"location":"reference/docker-services/#db-init","title":"<code>./db-init</code>","text":"<ul> <li>Purpose: Database initialization scripts</li> <li>Mount Point: <code>/docker-entrypoint-initdb.d</code></li> <li>Type: Bind mount (host directory)</li> <li>Contents: SQL scripts, shell scripts for database initialization</li> </ul>"},{"location":"reference/docker-services/#networks_3","title":"Networks","text":""},{"location":"reference/docker-services/#dolibarr-network","title":"dolibarr-network","text":"<ul> <li>Driver: <code>bridge</code></li> <li>Purpose: Internal communication between services</li> <li>Connectivity: All services can communicate using service names as hostnames</li> <li>Isolation: Services are isolated from other Docker networks</li> </ul>"},{"location":"reference/docker-services/#network-communication","title":"Network Communication","text":"<pre><code>dolibarr-app:80 \u2190\u2192 dolibarr-db:3306\ndolibarr-app:80 \u2190\u2192 dolibarr-phpmyadmin:80\ndolibarr-phpmyadmin:80 \u2190\u2192 dolibarr-db:3306\n</code></pre>"},{"location":"reference/docker-services/#port-mappings","title":"Port Mappings","text":""},{"location":"reference/docker-services/#default-port-configuration","title":"Default Port Configuration","text":"Service Internal Port Default Host Port Environment Variable Dolibarr 80 8080 <code>DOLIBARR_PORT</code> Database 3306 3306 <code>DB_EXTERNAL_PORT</code> phpMyAdmin 80 8081 <code>PHPMYADMIN_PORT</code>"},{"location":"reference/docker-services/#port-conflict-resolution","title":"Port Conflict Resolution","text":"<p>When default ports conflict with existing services:</p>"},{"location":"reference/docker-services/#development-environment","title":"Development Environment","text":"<pre><code># Use high ports to avoid conflicts\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\n</code></pre>"},{"location":"reference/docker-services/#production-environment","title":"Production Environment","text":"<pre><code># Use standard ports with reverse proxy\nDOLIBARR_PORT=8080\n# Don't expose database port\n# DB_EXTERNAL_PORT=3306  # Comment out\n# Don't expose phpMyAdmin\n# PHPMYADMIN_PORT=8081   # Comment out\n</code></pre>"},{"location":"reference/docker-services/#health-checks","title":"Health Checks","text":""},{"location":"reference/docker-services/#database-health-check","title":"Database Health Check","text":"<p>The MariaDB service includes a comprehensive health check:</p> <pre><code>healthcheck:\n  test: [\"CMD\", \"healthcheck.sh\", \"--connect\", \"--innodb_initialized\"]\n  start_period: 10s\n  interval: 10s\n  timeout: 5s\n  retries: 3\n</code></pre>"},{"location":"reference/docker-services/#health-check-states","title":"Health Check States","text":"<ul> <li>starting: Initial grace period (10 seconds)</li> <li>healthy: Database is ready to accept connections</li> <li>unhealthy: Failed health checks (after 3 retries)</li> </ul>"},{"location":"reference/docker-services/#manual-health-check","title":"Manual Health Check","text":"<pre><code># Check health status\ndocker-compose ps\n\n# View health check logs\ndocker inspect dolibarr-db --format='{{json .State.Health}}'\n</code></pre>"},{"location":"reference/docker-services/#application-health-monitoring","title":"Application Health Monitoring","text":"<p>While the Dolibarr container doesn't have built-in health checks, you can monitor it:</p> <pre><code># Check if web server is responding\ncurl -f http://localhost:${DOLIBARR_PORT:-8080}/index.php\n\n# Check container logs\ndocker-compose logs dolibarr\n\n# Check process status inside container\ndocker-compose exec dolibarr ps aux\n</code></pre>"},{"location":"reference/docker-services/#dependencies_2","title":"Dependencies","text":""},{"location":"reference/docker-services/#service-dependency-graph","title":"Service Dependency Graph","text":"<pre><code>graph TD\n    A[dolibarr] --&gt; B[dolibarr-db]\n    C[phpmyadmin] --&gt; B[dolibarr-db]\n\n    B --&gt;|health check| D[Database Ready]\n    D --&gt; E[Services Start]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#e0f2f1</code></pre>"},{"location":"reference/docker-services/#startup-sequence","title":"Startup Sequence","text":"<ol> <li>Network Creation: <code>dolibarr-network</code> is created</li> <li>Volume Creation: Named volumes are created if they don't exist</li> <li>Database Start: <code>dolibarr-db</code> container starts (if using internal database)</li> <li>Health Check Wait: System waits for database health check to pass</li> <li>Application Start: <code>dolibarr</code> container starts after database is healthy</li> <li>Tools Start: <code>phpmyadmin</code> starts after database is healthy (if enabled)</li> </ol>"},{"location":"reference/docker-services/#dependency-handling","title":"Dependency Handling","text":""},{"location":"reference/docker-services/#soft-dependencies","title":"Soft Dependencies","text":"<p>The Dolibarr service uses soft dependencies: <pre><code>depends_on:\n  dolibarr-db:\n    condition: service_healthy\n    required: false  # Allows external database usage\n</code></pre></p> <p>This allows the same configuration to work with both internal and external databases.</p>"},{"location":"reference/docker-services/#configuration-examples","title":"Configuration Examples","text":""},{"location":"reference/docker-services/#development-configuration","title":"Development Configuration","text":"<p>Complete docker-compose override for development:</p> <pre><code># docker-compose.override.yml\nversion: '3.8'\n\nservices:\n  dolibarr:\n    environment:\n      # Development-specific settings\n      DOLI_NOCSRFCHECK: 1  # Disable CSRF for testing\n    volumes:\n      # Additional development volumes\n      - ./debug:/var/www/html/debug\n    labels:\n      # Labels for development tools\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.dolibarr-dev.rule=Host(`dolibarr.localhost`)\"\n\n  dolibarr-db:\n    environment:\n      # Development database settings\n      MYSQL_GENERAL_LOG: 1\n      MYSQL_GENERAL_LOG_FILE: /var/lib/mysql/general.log\n    ports:\n      # Expose additional ports for debugging\n      - \"13306:3306\"\n\n  # Additional development services\n  mailhog:\n    image: mailhog/mailhog:latest\n    ports:\n      - \"18025:8025\"  # Web interface\n      - \"11025:1025\"  # SMTP\n    networks:\n      - dolibarr-network\n</code></pre>"},{"location":"reference/docker-services/#production-configuration","title":"Production Configuration","text":"<p>Production-optimized configuration:</p> <pre><code># docker-compose.prod.yml\nversion: '3.8'\n\nservices:\n  dolibarr:\n    restart: always\n    environment:\n      # Production security settings\n      DOLI_NOCSRFCHECK: 0\n      DOLI_HTTPS: 1\n    volumes:\n      # Production-specific volumes\n      - /mnt/shared/dolibarr/documents:/var/www/documents\n      - /mnt/shared/dolibarr/html:/var/www/html\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1'\n        reservations:\n          memory: 512M\n          cpus: '0.5'\n\n  # Remove database service for external database\n  dolibarr-db:\n    profiles:\n      - disabled  # Effectively disables the service\n\n  # Remove phpMyAdmin for production\n  phpmyadmin:\n    profiles:\n      - disabled  # Effectively disables the service\n</code></pre>"},{"location":"reference/docker-services/#high-availability-configuration","title":"High Availability Configuration","text":"<p>Multi-instance setup for high availability:</p> <pre><code># docker-compose.ha.yml\nversion: '3.8'\n\nservices:\n  dolibarr-1:\n    extends:\n      file: docker-compose.yml\n      service: dolibarr\n    container_name: dolibarr-app-1\n    environment:\n      - INSTANCE_ID=1\n    volumes:\n      # Shared storage\n      - nfs-documents:/var/www/documents\n      - nfs-html:/var/www/html\n\n  dolibarr-2:\n    extends:\n      file: docker-compose.yml\n      service: dolibarr\n    container_name: dolibarr-app-2\n    environment:\n      - INSTANCE_ID=2\n    volumes:\n      # Shared storage\n      - nfs-documents:/var/www/documents\n      - nfs-html:/var/www/html\n    ports:\n      - \"8081:80\"  # Different port for second instance\n\n  # Load balancer\n  haproxy:\n    image: haproxy:latest\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro\n      - ./ssl:/etc/ssl/certs:ro\n    depends_on:\n      - dolibarr-1\n      - dolibarr-2\n    networks:\n      - dolibarr-network\n\nvolumes:\n  nfs-documents:\n    driver: local\n    driver_opts:\n      type: nfs\n      o: addr=nfs.example.com,rw\n      device: \":/mnt/dolibarr/documents\"\n\n  nfs-html:\n    driver: local\n    driver_opts:\n      type: nfs\n      o: addr=nfs.example.com,rw\n      device: \":/mnt/dolibarr/html\"\n</code></pre>"},{"location":"reference/docker-services/#service-management-commands","title":"Service Management Commands","text":""},{"location":"reference/docker-services/#starting-services","title":"Starting Services","text":"<pre><code># Start with internal database\ndocker-compose --profile internal-db up -d\ntask services:start\n\n# Start with development tools\ndocker-compose --profile internal-db --profile internal-db-tools up -d\ntask services:start-with-tools\n\n# Start with external database\ndocker-compose --profile external-db up -d\ntask services:start-external\n</code></pre>"},{"location":"reference/docker-services/#stopping-services","title":"Stopping Services","text":"<pre><code># Stop all services\ndocker-compose down\ntask services:stop\n\n# Stop and remove volumes (DANGEROUS)\ndocker-compose down -v\ntask maintenance:reset-data\n</code></pre>"},{"location":"reference/docker-services/#service-status","title":"Service Status","text":"<pre><code># Check service status\ndocker-compose ps\ntask services:status\n\n# Check service logs\ndocker-compose logs -f\ntask services:logs\n\n# Check specific service logs\ndocker-compose logs -f dolibarr\ntask services:logs-app\n</code></pre>"},{"location":"reference/docker-services/#service-scaling","title":"Service Scaling","text":"<pre><code># Scale Dolibarr service (for load balancing)\ndocker-compose --profile external-db up -d --scale dolibarr=3\n\n# Note: Requires external database and shared storage\n</code></pre>"},{"location":"reference/docker-services/#troubleshooting-services","title":"Troubleshooting Services","text":""},{"location":"reference/docker-services/#common-service-issues","title":"Common Service Issues","text":""},{"location":"reference/docker-services/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Check database health\ndocker-compose exec dolibarr-db mysqladmin ping -h localhost\n\n# Test database connection from app\ndocker-compose exec dolibarr nc -zv dolibarr-db 3306\n\n# Check database logs\ndocker-compose logs dolibarr-db\n</code></pre>"},{"location":"reference/docker-services/#application-startup-issues","title":"Application Startup Issues","text":"<pre><code># Check application logs\ndocker-compose logs dolibarr\n\n# Check if web server is running\ndocker-compose exec dolibarr ps aux | grep apache\n\n# Check file permissions\ndocker-compose exec dolibarr ls -la /var/www/html\n</code></pre>"},{"location":"reference/docker-services/#network-issues","title":"Network Issues","text":"<pre><code># Check network connectivity\ndocker network ls | grep dolibarr\ndocker network inspect dolibarr_dolibarr-network\n\n# Test service-to-service communication\ndocker-compose exec dolibarr ping dolibarr-db\n</code></pre>"},{"location":"reference/docker-services/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Monitor resource usage\ndocker stats\n\n# Monitor specific service\ndocker stats dolibarr-app\n\n# Check volume usage\ndocker system df -v\n</code></pre>"},{"location":"reference/docker-services/#best-practices","title":"Best Practices","text":""},{"location":"reference/docker-services/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Port Exposure: Only expose necessary ports to the host</li> <li>Secrets Management: Use Docker secrets for sensitive data in production</li> <li>Network Isolation: Use custom networks to isolate services</li> <li>Resource Limits: Set memory and CPU limits for production</li> <li>Regular Updates: Keep container images updated</li> </ol>"},{"location":"reference/docker-services/#performance-best-practices","title":"Performance Best Practices","text":"<ol> <li>Volume Strategy: Use named volumes for data that needs persistence</li> <li>Resource Allocation: Allocate appropriate CPU and memory resources</li> <li>Health Checks: Implement proper health checks for reliability</li> <li>Logging: Configure appropriate logging drivers and retention</li> <li>Monitoring: Implement monitoring for production deployments</li> </ol>"},{"location":"reference/docker-services/#maintenance-best-practices","title":"Maintenance Best Practices","text":"<ol> <li>Backup Strategy: Regular backups of volumes and configurations</li> <li>Update Process: Planned update process with rollback capabilities</li> <li>Monitoring: Continuous monitoring of service health and performance</li> <li>Documentation: Keep service documentation up to date</li> <li>Testing: Test configuration changes in development first</li> </ol>"},{"location":"reference/environment-variables/","title":"Environment Variables Reference","text":"<p>This document provides a comprehensive reference of all environment variables used in the Dolibarr Docker setup.</p>"},{"location":"reference/environment-variables/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Database Configuration</li> <li>Dolibarr Application Configuration</li> <li>Network and Port Configuration</li> <li>PHP Configuration</li> <li>Optional Tools Configuration</li> <li>Profile-Based Variables</li> <li>Security Configuration</li> <li>Examples by Use Case</li> </ul>"},{"location":"reference/environment-variables/#database-configuration","title":"Database Configuration","text":""},{"location":"reference/environment-variables/#db_type","title":"<code>DB_TYPE</code>","text":"<p>Purpose: Database type for Dolibarr Required: No Default: <code>mysqli</code> Valid values: <code>mysqli</code>, <code>pgsql</code></p> <p>Description: Specifies the database driver to use. Currently supports MySQL/MariaDB (<code>mysqli</code>) and PostgreSQL (<code>pgsql</code>).</p> <p>Example: <pre><code>DB_TYPE=mysqli\n</code></pre></p>"},{"location":"reference/environment-variables/#db_host","title":"<code>DB_HOST</code>","text":"<p>Purpose: Database server hostname or IP address Required: Yes (for external database) Default: <code>dolibarr-db</code></p> <p>Description: The hostname or IP address of the database server. For internal database setups, this should be <code>dolibarr-db</code> (the Docker service name). For external databases, use the actual hostname or IP.</p> <p>Examples: <pre><code># Internal database\nDB_HOST=dolibarr-db\n\n# External database\nDB_HOST=mysql.example.com\nDB_HOST=192.168.1.100\n\n# Cloud database\nDB_HOST=mysql-cluster-abc123.us-west-2.rds.amazonaws.com\n</code></pre></p>"},{"location":"reference/environment-variables/#db_port","title":"<code>DB_PORT</code>","text":"<p>Purpose: Database server port Required: No Default: <code>3306</code></p> <p>Description: The port number on which the database server is listening.</p> <p>Examples: <pre><code># Standard MySQL/MariaDB port\nDB_PORT=3306\n\n# Custom port\nDB_PORT=3307\n\n# PostgreSQL\nDB_PORT=5432\n</code></pre></p>"},{"location":"reference/environment-variables/#db_name","title":"<code>DB_NAME</code>","text":"<p>Purpose: Database name for Dolibarr Required: No Default: <code>dolibarr</code></p> <p>Description: The name of the database that Dolibarr will use to store its data.</p> <p>Examples: <pre><code># Default database name\nDB_NAME=dolibarr\n\n# Custom database name\nDB_NAME=my_company_erp\n\n# Environment-specific naming\nDB_NAME=dolibarr_production\nDB_NAME=dolibarr_staging\n</code></pre></p>"},{"location":"reference/environment-variables/#db_user","title":"<code>DB_USER</code>","text":"<p>Purpose: Database username for Dolibarr Required: No Default: <code>dolibarr</code></p> <p>Description: The username that Dolibarr will use to connect to the database. This user should have full privileges on the specified database.</p> <p>Examples: <pre><code># Default username\nDB_USER=dolibarr\n\n# Custom username\nDB_USER=dolibarr_app\n\n# Environment-specific username\nDB_USER=dolibarr_prod_user\n</code></pre></p>"},{"location":"reference/environment-variables/#db_password","title":"<code>DB_PASSWORD</code>","text":"<p>Purpose: Database password for Dolibarr user Required: Yes Default: None</p> <p>Description: The password for the database user. This should be a strong password for security.</p> <p>Security Notes: - Use a strong password (minimum 16 characters) - Include uppercase, lowercase, numbers, and special characters - Never commit real passwords to version control - Consider using Docker secrets in production</p> <p>Examples: <pre><code># Strong password example\nDB_PASSWORD=MySecureP@ssw0rd2024!\n\n# For development (still use strong passwords)\nDB_PASSWORD=dev-secure-password-123\n</code></pre></p>"},{"location":"reference/environment-variables/#db_root_password","title":"<code>DB_ROOT_PASSWORD</code>","text":"<p>Purpose: Root password for internal database Required: Yes (for internal database) Default: None</p> <p>Description: The root password for the internal MariaDB database. Only required when using the internal database profile. Leave empty or undefined for external databases.</p> <p>Usage: - Internal Database: Required for database initialization and administration - External Database: Should be empty or undefined</p> <p>Examples: <pre><code># Internal database\nDB_ROOT_PASSWORD=MySecureRootP@ssw0rd2024!\n\n# External database (leave empty)\nDB_ROOT_PASSWORD=\n</code></pre></p>"},{"location":"reference/environment-variables/#db_external_port","title":"<code>DB_EXTERNAL_PORT</code>","text":"<p>Purpose: External port for database access Required: No Default: <code>3306</code></p> <p>Description: The port on the host machine that will be mapped to the database container. Only applies to internal database setups.</p> <p>Examples: <pre><code># Standard port\nDB_EXTERNAL_PORT=3306\n\n# Alternative port to avoid conflicts\nDB_EXTERNAL_PORT=13306\n\n# Development environment\nDB_EXTERNAL_PORT=3307\n</code></pre></p>"},{"location":"reference/environment-variables/#dolibarr-application-configuration","title":"Dolibarr Application Configuration","text":""},{"location":"reference/environment-variables/#dolibarr_admin_login","title":"<code>DOLIBARR_ADMIN_LOGIN</code>","text":"<p>Purpose: Initial admin username for Dolibarr Required: No Default: <code>admin</code></p> <p>Description: The username for the initial administrator account that will be created during Dolibarr setup.</p> <p>Examples: <pre><code># Default admin username\nDOLIBARR_ADMIN_LOGIN=admin\n\n# Custom admin username\nDOLIBARR_ADMIN_LOGIN=administrator\n\n# Company-specific admin\nDOLIBARR_ADMIN_LOGIN=company_admin\n</code></pre></p>"},{"location":"reference/environment-variables/#dolibarr_admin_password","title":"<code>DOLIBARR_ADMIN_PASSWORD</code>","text":"<p>Purpose: Password for the initial admin account Required: Yes Default: None</p> <p>Description: The password for the initial administrator account. This should be changed after first login.</p> <p>Security Notes: - Use a strong password - Change the password after first login - Consider enabling two-factor authentication - Never use default passwords in production</p> <p>Examples: <pre><code># Strong password example\nDOLIBARR_ADMIN_PASSWORD=AdminSecureP@ss2024!\n\n# Development password (still secure)\nDOLIBARR_ADMIN_PASSWORD=dev-admin-password-123\n</code></pre></p>"},{"location":"reference/environment-variables/#dolibarr_url_root","title":"<code>DOLIBARR_URL_ROOT</code>","text":"<p>Purpose: Base URL for Dolibarr application Required: No Default: <code>http://localhost:8080</code></p> <p>Description: The base URL where Dolibarr will be accessible. This is used for generating links and should match your actual access URL.</p> <p>Examples: <pre><code># Local development\nDOLIBARR_URL_ROOT=http://localhost:8080\n\n# Custom port\nDOLIBARR_URL_ROOT=http://localhost:18080\n\n# Domain-based\nDOLIBARR_URL_ROOT=https://dolibarr.example.com\n\n# Subdirectory\nDOLIBARR_URL_ROOT=https://example.com/dolibarr\n</code></pre></p>"},{"location":"reference/environment-variables/#dolibarr_nocsrfcheck","title":"<code>DOLIBARR_NOCSRFCHECK</code>","text":"<p>Purpose: Disable CSRF protection (not recommended) Required: No Default: <code>0</code> Valid values: <code>0</code> (enabled), <code>1</code> (disabled)</p> <p>Description: Controls CSRF (Cross-Site Request Forgery) protection. Should only be disabled for development or testing purposes.</p> <p>Security Warning: Never disable CSRF protection in production environments.</p> <p>Examples: <pre><code># Production - CSRF protection enabled (recommended)\nDOLIBARR_NOCSRFCHECK=0\n\n# Development - CSRF protection disabled (only for testing)\nDOLIBARR_NOCSRFCHECK=1\n</code></pre></p>"},{"location":"reference/environment-variables/#dolibarr_https","title":"<code>DOLIBARR_HTTPS</code>","text":"<p>Purpose: Enable HTTPS mode Required: No Default: <code>0</code> Valid values: <code>0</code> (HTTP), <code>1</code> (HTTPS)</p> <p>Description: Indicates whether Dolibarr is running behind HTTPS. Set to 1 when using a reverse proxy with SSL termination.</p> <p>Examples: <pre><code># HTTP mode\nDOLIBARR_HTTPS=0\n\n# HTTPS mode (with reverse proxy)\nDOLIBARR_HTTPS=1\n</code></pre></p>"},{"location":"reference/environment-variables/#network-and-port-configuration","title":"Network and Port Configuration","text":""},{"location":"reference/environment-variables/#dolibarr_port","title":"<code>DOLIBARR_PORT</code>","text":"<p>Purpose: Host port for Dolibarr web interface Required: No Default: <code>8080</code></p> <p>Description: The port on the host machine where Dolibarr will be accessible.</p> <p>Examples: <pre><code># Standard port\nDOLIBARR_PORT=8080\n\n# Alternative port\nDOLIBARR_PORT=18080\n\n# Production port (with reverse proxy)\nDOLIBARR_PORT=80\n</code></pre></p>"},{"location":"reference/environment-variables/#php-configuration","title":"PHP Configuration","text":""},{"location":"reference/environment-variables/#timezone","title":"<code>TIMEZONE</code>","text":"<p>Purpose: PHP timezone setting Required: No Default: <code>Europe/Paris</code></p> <p>Description: Sets the PHP timezone for the Dolibarr application. This affects date/time display and calculations.</p> <p>Valid values: Any valid PHP timezone identifier (see PHP Timezones)</p> <p>Examples: <pre><code># European timezones\nTIMEZONE=Europe/Paris\nTIMEZONE=Europe/London\nTIMEZONE=Europe/Berlin\n\n# American timezones\nTIMEZONE=America/New_York\nTIMEZONE=America/Chicago\nTIMEZONE=America/Los_Angeles\n\n# Asian timezones\nTIMEZONE=Asia/Tokyo\nTIMEZONE=Asia/Shanghai\nTIMEZONE=Asia/Dubai\n\n# UTC\nTIMEZONE=UTC\n</code></pre></p>"},{"location":"reference/environment-variables/#optional-tools-configuration","title":"Optional Tools Configuration","text":""},{"location":"reference/environment-variables/#phpmyadmin_port","title":"<code>PHPMYADMIN_PORT</code>","text":"<p>Purpose: Host port for phpMyAdmin interface Required: No (only when using internal-db-tools profile) Default: <code>8081</code></p> <p>Description: The port on the host machine where phpMyAdmin will be accessible. Only used when the <code>internal-db-tools</code> profile is active.</p> <p>Examples: <pre><code># Standard port\nPHPMYADMIN_PORT=8081\n\n# Alternative port\nPHPMYADMIN_PORT=18081\n\n# Custom port to avoid conflicts\nPHPMYADMIN_PORT=9081\n</code></pre></p>"},{"location":"reference/environment-variables/#profile-based-variables","title":"Profile-Based Variables","text":"<p>The following variables change behavior based on the Docker Compose profile used:</p>"},{"location":"reference/environment-variables/#internal-database-profile-internal-db","title":"Internal Database Profile (<code>internal-db</code>)","text":"<p>Required variables: - <code>DB_PASSWORD</code> - Database user password - <code>DB_ROOT_PASSWORD</code> - Database root password - <code>DOLIBARR_ADMIN_PASSWORD</code> - Admin password</p> <p>Optional variables: - <code>DB_NAME</code> - Database name (default: dolibarr) - <code>DB_USER</code> - Database username (default: dolibarr) - <code>DB_EXTERNAL_PORT</code> - External database port (default: 3306)</p> <p>Example configuration: <pre><code># Internal database profile\nDB_PASSWORD=secure-db-password-123\nDB_ROOT_PASSWORD=secure-root-password-456\nDOLIBARR_ADMIN_PASSWORD=secure-admin-password-789\nDOLIBARR_PORT=8080\nPHPMYADMIN_PORT=8081\n</code></pre></p>"},{"location":"reference/environment-variables/#external-database-profile-external-db","title":"External Database Profile (<code>external-db</code>)","text":"<p>Required variables: - <code>DB_HOST</code> - External database host - <code>DB_PASSWORD</code> - Database user password - <code>DOLIBARR_ADMIN_PASSWORD</code> - Admin password</p> <p>Optional variables: - <code>DB_PORT</code> - Database port (default: 3306) - <code>DB_NAME</code> - Database name (default: dolibarr) - <code>DB_USER</code> - Database username (default: dolibarr)</p> <p>Important: <code>DB_ROOT_PASSWORD</code> should be empty or undefined for external databases.</p> <p>Example configuration: <pre><code># External database profile\nDB_HOST=mysql.example.com\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr_user\nDB_PASSWORD=secure-db-password-123\nDOLIBARR_ADMIN_PASSWORD=secure-admin-password-789\nDOLIBARR_PORT=8080\n# DB_ROOT_PASSWORD should be empty for external database\n</code></pre></p>"},{"location":"reference/environment-variables/#security-configuration","title":"Security Configuration","text":""},{"location":"reference/environment-variables/#production-security-variables","title":"Production Security Variables","text":"<p>For production environments, ensure these security-focused variables are properly configured:</p> <pre><code># Strong passwords (minimum 16 characters)\nDB_PASSWORD=ComplexP@ssw0rd!2024SecureDB\nDB_ROOT_PASSWORD=RootP@ssw0rd!2024VerySecure\nDOLIBARR_ADMIN_PASSWORD=AdminP@ssw0rd!2024SuperSecure\n\n# HTTPS configuration\nDOLIBARR_HTTPS=1\nDOLIBARR_URL_ROOT=https://dolibarr.yourcompany.com\n\n# CSRF protection enabled\nDOLIBARR_NOCSRFCHECK=0\n\n# Restrict database external access\n# Don't expose DB_EXTERNAL_PORT in production\n# DB_EXTERNAL_PORT=3306  # Comment out for production\n\n# Don't expose phpMyAdmin in production\n# PHPMYADMIN_PORT=8081   # Comment out for production\n</code></pre>"},{"location":"reference/environment-variables/#development-security-variables","title":"Development Security Variables","text":"<p>For development environments, you can use simpler passwords but should still maintain good security practices:</p> <pre><code># Development passwords (still secure)\nDB_PASSWORD=dev-secure-db-password\nDB_ROOT_PASSWORD=dev-secure-root-password\nDOLIBARR_ADMIN_PASSWORD=dev-secure-admin-password\n\n# Development URL\nDOLIBARR_URL_ROOT=http://localhost:18080\n\n# Development ports\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\n\n# CSRF can be disabled for testing (if needed)\nDOLIBARR_NOCSRFCHECK=0  # Keep enabled even in development\n</code></pre>"},{"location":"reference/environment-variables/#examples-by-use-case","title":"Examples by Use Case","text":""},{"location":"reference/environment-variables/#1-local-development-setup","title":"1. Local Development Setup","text":"<p>Perfect for developers working on Dolibarr customizations or learning the system.</p> <pre><code># Database Configuration\nDB_TYPE=mysqli\nDB_HOST=dolibarr-db\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr\nDB_PASSWORD=dev-secure-password-123\nDB_ROOT_PASSWORD=dev-secure-root-password-456\nDB_EXTERNAL_PORT=13306\n\n# Dolibarr Configuration\nDOLIBARR_PORT=18080\nDOLIBARR_ADMIN_LOGIN=admin\nDOLIBARR_ADMIN_PASSWORD=dev-admin-password-789\nDOLIBARR_URL_ROOT=http://localhost:18080\nDOLIBARR_NOCSRFCHECK=0\nDOLIBARR_HTTPS=0\n\n# PHP Configuration\nTIMEZONE=America/New_York\n\n# Optional Tools\nPHPMYADMIN_PORT=18081\n</code></pre> <p>Usage:  <pre><code>task services:start-with-tools\n</code></pre></p>"},{"location":"reference/environment-variables/#2-small-business-production","title":"2. Small Business Production","text":"<p>Simple production setup with internal database for small companies.</p> <pre><code># Database Configuration\nDB_TYPE=mysqli\nDB_HOST=dolibarr-db\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr\nDB_PASSWORD=MyCompanySecureDBPassword2024!\nDB_ROOT_PASSWORD=MyCompanySecureRootPassword2024!\n# DB_EXTERNAL_PORT not set for security\n\n# Dolibarr Configuration\nDOLIBARR_PORT=8080\nDOLIBARR_ADMIN_LOGIN=admin\nDOLIBARR_ADMIN_PASSWORD=MyCompanyAdminPassword2024!\nDOLIBARR_URL_ROOT=https://erp.mycompany.com\nDOLIBARR_NOCSRFCHECK=0\nDOLIBARR_HTTPS=1\n\n# PHP Configuration\nTIMEZONE=Europe/Paris\n\n# Optional Tools - Disabled for production\n# PHPMYADMIN_PORT not set for security\n</code></pre> <p>Usage:  <pre><code>task services:start\n</code></pre></p>"},{"location":"reference/environment-variables/#3-enterprise-production-with-external-database","title":"3. Enterprise Production with External Database","text":"<p>High-availability setup using external managed database.</p> <pre><code># External Database Configuration\nDB_TYPE=mysqli\nDB_HOST=dolibarr-prod.cluster-abc123.us-west-2.rds.amazonaws.com\nDB_PORT=3306\nDB_NAME=dolibarr_production\nDB_USER=dolibarr_app_user\nDB_PASSWORD=${SECRET_DB_PASSWORD}  # From secrets management\n# DB_ROOT_PASSWORD empty for external database\n\n# Dolibarr Configuration\nDOLIBARR_PORT=8080\nDOLIBARR_ADMIN_LOGIN=sysadmin\nDOLIBARR_ADMIN_PASSWORD=${SECRET_ADMIN_PASSWORD}  # From secrets management\nDOLIBARR_URL_ROOT=https://erp.enterprise.com\nDOLIBARR_NOCSRFCHECK=0\nDOLIBARR_HTTPS=1\n\n# PHP Configuration\nTIMEZONE=UTC\n\n# Optional Tools - Not used in production\n</code></pre> <p>Usage:  <pre><code>task services:start-external\n</code></pre></p>"},{"location":"reference/environment-variables/#4-multi-environment-setup","title":"4. Multi-Environment Setup","text":"<p>Development environment configuration for multi-stage deployments.</p>"},{"location":"reference/environment-variables/#development-environment","title":"Development Environment:","text":"<pre><code># Development Database\nDB_HOST=dolibarr-db\nDB_PASSWORD=dev-secure-password\nDB_ROOT_PASSWORD=dev-secure-root-password\nDOLIBARR_ADMIN_PASSWORD=dev-admin-password\n\n# Development Ports\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\n\n# Development Settings\nDOLIBARR_URL_ROOT=http://localhost:18080\nTIMEZONE=America/New_York\n</code></pre>"},{"location":"reference/environment-variables/#staging-environment","title":"Staging Environment:","text":"<pre><code># Staging Database (External)\nDB_HOST=dolibarr-staging.company.internal\nDB_PASSWORD=${STAGING_DB_PASSWORD}\nDOLIBARR_ADMIN_PASSWORD=${STAGING_ADMIN_PASSWORD}\n\n# Staging Ports\nDOLIBARR_PORT=28080\n\n# Staging Settings\nDOLIBARR_URL_ROOT=https://dolibarr-staging.company.internal\nDOLIBARR_HTTPS=1\nTIMEZONE=UTC\n</code></pre>"},{"location":"reference/environment-variables/#production-environment","title":"Production Environment:","text":"<pre><code># Production Database (External)\nDB_HOST=dolibarr-prod.company.internal\nDB_PASSWORD=${PROD_DB_PASSWORD}\nDOLIBARR_ADMIN_PASSWORD=${PROD_ADMIN_PASSWORD}\n\n# Production Ports\nDOLIBARR_PORT=8080\n\n# Production Settings\nDOLIBARR_URL_ROOT=https://erp.company.com\nDOLIBARR_HTTPS=1\nTIMEZONE=UTC\n</code></pre>"},{"location":"reference/environment-variables/#5-cloud-deployment-aws","title":"5. Cloud Deployment (AWS)","text":"<p>Configuration for cloud deployment with managed database services.</p> <pre><code># AWS RDS Database\nDB_TYPE=mysqli\nDB_HOST=dolibarr-db.cluster-xyz.us-west-2.rds.amazonaws.com\nDB_PORT=3306\nDB_NAME=dolibarr\nDB_USER=dolibarr_app\n# DB_PASSWORD loaded from AWS Secrets Manager\n# DB_ROOT_PASSWORD not needed for managed database\n\n# Application Configuration\nDOLIBARR_PORT=8080\nDOLIBARR_ADMIN_LOGIN=admin\n# DOLIBARR_ADMIN_PASSWORD loaded from AWS Secrets Manager\nDOLIBARR_URL_ROOT=https://dolibarr.mycompany.com\nDOLIBARR_HTTPS=1\nDOLIBARR_NOCSRFCHECK=0\n\n# Regional Configuration\nTIMEZONE=America/Los_Angeles\n</code></pre>"},{"location":"reference/environment-variables/#variable-validation","title":"Variable Validation","text":""},{"location":"reference/environment-variables/#required-variables-check","title":"Required Variables Check","text":"<p>Before starting Dolibarr, ensure these variables are set:</p> <p>Always Required: - <code>DOLIBARR_ADMIN_PASSWORD</code></p> <p>Internal Database Profile: - <code>DB_PASSWORD</code> - <code>DB_ROOT_PASSWORD</code></p> <p>External Database Profile: - <code>DB_HOST</code> - <code>DB_PASSWORD</code></p>"},{"location":"reference/environment-variables/#validation-commands","title":"Validation Commands","text":"<p>You can validate your environment variables using these commands:</p> <pre><code># Check if required variables are set\necho \"DB_PASSWORD: ${DB_PASSWORD:+SET}\"\necho \"DOLIBARR_ADMIN_PASSWORD: ${DOLIBARR_ADMIN_PASSWORD:+SET}\"\n\n# Display current configuration (without passwords)\necho \"DB_HOST: ${DB_HOST}\"\necho \"DB_PORT: ${DB_PORT}\"\necho \"DB_NAME: ${DB_NAME}\"\necho \"DOLIBARR_PORT: ${DOLIBARR_PORT}\"\necho \"TIMEZONE: ${TIMEZONE}\"\n\n# Check password strength (length only)\necho \"DB_PASSWORD length: ${#DB_PASSWORD}\"\necho \"DOLIBARR_ADMIN_PASSWORD length: ${#DOLIBARR_ADMIN_PASSWORD}\"\n</code></pre>"},{"location":"reference/environment-variables/#best-practices","title":"Best Practices","text":""},{"location":"reference/environment-variables/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Strong Passwords: Use minimum 16 characters with mixed case, numbers, and symbols</li> <li>Secrets Management: Use Docker secrets or external secret management in production</li> <li>Environment Separation: Use different passwords for different environments</li> <li>Port Security: Don't expose database ports in production</li> <li>HTTPS: Always use HTTPS in production environments</li> </ol>"},{"location":"reference/environment-variables/#configuration-best-practices","title":"Configuration Best Practices","text":"<ol> <li>Environment Files: Use <code>.env</code> files for environment-specific configurations</li> <li>Version Control: Never commit <code>.env</code> files with real passwords</li> <li>Documentation: Document any custom variables or configurations</li> <li>Validation: Validate configuration before deployment</li> <li>Backup: Include environment configuration in backup procedures</li> </ol>"},{"location":"reference/environment-variables/#development-best-practices","title":"Development Best Practices","text":"<ol> <li>Consistent Ports: Use consistent port schemes across environments</li> <li>Clear Naming: Use descriptive names for custom databases/users</li> <li>Tool Access: Enable development tools only in development environments</li> <li>Logging: Use appropriate timezone settings for log analysis</li> <li>Testing: Test configuration changes in development first</li> </ol>"},{"location":"reference/taskfile-commands/","title":"Taskfile Commands Reference","text":"<p>This document provides a comprehensive reference of all available Task commands for managing your Dolibarr Docker installation.</p>"},{"location":"reference/taskfile-commands/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Setup Commands</li> <li>Service Management</li> <li>Configuration Commands</li> <li>Backup Commands</li> <li>Maintenance Commands</li> <li>Utility Commands</li> </ul>"},{"location":"reference/taskfile-commands/#setup-commands","title":"Setup Commands","text":""},{"location":"reference/taskfile-commands/#task-setupinit","title":"<code>task setup:init</code>","text":"<p>Description: Initialize Dolibarr setup by creating required directories and setting permissions</p> <p>Usage: <pre><code>task setup:init\n</code></pre></p> <p>What it does: - Creates required directories: <code>custom/</code>, <code>logs/</code>, <code>db-init/</code>, <code>backups/</code> - Sets proper permissions (755) on all directories - Prepares the environment for first-time setup</p> <p>When to use: Run this command after cloning the repository and before starting services for the first time</p> <p>Example output: <pre><code>\u2705 Dolibarr directories initialized\n</code></pre></p>"},{"location":"reference/taskfile-commands/#service-management","title":"Service Management","text":""},{"location":"reference/taskfile-commands/#task-servicesstart","title":"<code>task services:start</code>","text":"<p>Description: Start Dolibarr with internal database</p> <p>Usage: <pre><code>task services:start\n</code></pre></p> <p>What it does: - Starts Dolibarr application container - Starts internal MariaDB database container - Uses <code>internal-db</code> profile</p> <p>Ports opened: - Dolibarr: <code>${DOLIBARR_PORT}</code> (default: 8080) - Database: <code>${DB_EXTERNAL_PORT}</code> (default: 3306)</p> <p>Example output: <pre><code>\u2705 Dolibarr started with internal database\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-servicesstart-with-tools","title":"<code>task services:start-with-tools</code>","text":"<p>Description: Start Dolibarr with internal database and phpMyAdmin for development</p> <p>Usage: <pre><code>task services:start-with-tools\n</code></pre></p> <p>What it does: - Starts Dolibarr application container - Starts internal MariaDB database container - Starts phpMyAdmin container for database management - Uses <code>internal-db</code> and <code>internal-db-tools</code> profiles</p> <p>Ports opened: - Dolibarr: <code>${DOLIBARR_PORT}</code> (default: 8080) - phpMyAdmin: <code>${PHPMYADMIN_PORT}</code> (default: 8081) - Database: <code>${DB_EXTERNAL_PORT}</code> (default: 3306)</p> <p>Example output: <pre><code>\u2705 Dolibarr started with internal database and phpMyAdmin\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-servicesstart-external","title":"<code>task services:start-external</code>","text":"<p>Description: Start Dolibarr with external database connection</p> <p>Usage: <pre><code>task services:start-external\n</code></pre></p> <p>What it does: - Starts only Dolibarr application container - Connects to external database specified in environment variables - Uses <code>external-db</code> profile</p> <p>Prerequisites:  - External database must be accessible - Configure <code>DB_HOST</code>, <code>DB_PORT</code>, <code>DB_NAME</code>, <code>DB_USER</code>, <code>DB_PASSWORD</code> in <code>.env</code></p> <p>Example output: <pre><code>\u2705 Dolibarr started with external database\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-servicesstop","title":"<code>task services:stop</code>","text":"<p>Description: Stop all Dolibarr services</p> <p>Usage: <pre><code>task services:stop\n</code></pre></p> <p>What it does: - Stops all running containers - Removes containers but preserves volumes and data</p> <p>Example output: <pre><code>\u2705 Dolibarr services stopped\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-servicesstatus","title":"<code>task services:status</code>","text":"<p>Description: Show status of all services</p> <p>Usage: <pre><code>task services:status\n</code></pre></p> <p>What it does: - Displays current status of all Docker Compose services - Shows container names, states, and port mappings</p> <p>Example output: <pre><code>NAME                  IMAGE                          COMMAND                  SERVICE         STATUS          PORTS\ndolibarr-app         dolibarr/dolibarr:latest       \"docker-php-entrypoi\u2026\"   dolibarr        running         0.0.0.0:8080-&gt;80/tcp\ndolibarr-db          mariadb:10.11                  \"docker-entrypoint.s\u2026\"   dolibarr-db     running         0.0.0.0:3306-&gt;3306/tcp\ndolibarr-phpmyadmin  phpmyadmin/phpmyadmin:latest   \"/docker-entrypoint.\u2026\"   phpmyadmin      running         0.0.0.0:8081-&gt;80/tcp\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-serviceslogs","title":"<code>task services:logs</code>","text":"<p>Description: Show logs from all services with real-time following</p> <p>Usage: <pre><code>task services:logs\n</code></pre></p> <p>What it does: - Displays logs from all running containers - Follows logs in real-time (similar to <code>tail -f</code>) - Press <code>Ctrl+C</code> to stop following</p> <p>Use cases: - Monitor application startup - Debug service issues - Monitor real-time activity</p>"},{"location":"reference/taskfile-commands/#task-serviceslogs-app","title":"<code>task services:logs-app</code>","text":"<p>Description: Show Dolibarr application logs only</p> <p>Usage: <pre><code>task services:logs-app\n</code></pre></p> <p>What it does: - Displays logs only from the Dolibarr application container - Follows logs in real-time - Useful for application-specific debugging</p>"},{"location":"reference/taskfile-commands/#task-serviceslogs-db","title":"<code>task services:logs-db</code>","text":"<p>Description: Show database logs only</p> <p>Usage: <pre><code>task services:logs-db\n</code></pre></p> <p>What it does: - Displays logs only from the database container - Follows logs in real-time - Useful for database-specific debugging</p>"},{"location":"reference/taskfile-commands/#configuration-commands","title":"Configuration Commands","text":""},{"location":"reference/taskfile-commands/#task-configenable-modules","title":"<code>task config:enable-modules</code>","text":"<p>Description: Enable essential Dolibarr modules for full functionality</p> <p>Usage: <pre><code>task config:enable-modules\n</code></pre></p> <p>Prerequisites: Dolibarr must be running (<code>task services:start</code>)</p> <p>Modules enabled: - Third parties (<code>MAIN_MODULE_SOCIETE</code>) - Invoices (<code>MAIN_MODULE_FACTURE</code>) - Orders (<code>MAIN_MODULE_COMMANDE</code>) - Proposals (<code>MAIN_MODULE_PROPAL</code>) - Products/Services (<code>MAIN_MODULE_PRODUCT</code>) - Stock (<code>MAIN_MODULE_STOCK</code>) - Projects (<code>MAIN_MODULE_PROJET</code>) - Events/Agenda (<code>MAIN_MODULE_ACTIONCOMM</code>) - Categories (<code>MAIN_MODULE_CATEGORIE</code>)</p> <p>Example output: <pre><code>Enabling essential Dolibarr modules...\nEssential modules enabled successfully\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-configenable-api","title":"<code>task config:enable-api</code>","text":"<p>Description: Enable REST API module and configure API access</p> <p>Usage: <pre><code>task config:enable-api\n</code></pre></p> <p>Prerequisites: Dolibarr must be running</p> <p>What it does: - Enables the REST API module (<code>MAIN_MODULE_API</code>) - Provides information about API key generation - Shows API documentation URL</p> <p>Post-configuration: - Generate API keys via: Users &amp; Groups &gt; Users &gt; Edit User &gt; API Keys - API Documentation: <code>http://localhost:${DOLIBARR_PORT}/api/index.php/explorer</code></p> <p>Example output: <pre><code>Enabling REST API module...\nAPI enabled. Generate API keys via Users &amp; Groups &gt; Users &gt; Edit User &gt; API Keys\nAPI Documentation available at http://localhost:18080/api/index.php/explorer\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-configlist-modules","title":"<code>task config:list-modules</code>","text":"<p>Description: List all available and enabled modules</p> <p>Usage: <pre><code>task config:list-modules\n</code></pre></p> <p>Prerequisites: Dolibarr must be running</p> <p>What it does: - Queries the database for all module configurations - Shows module names and their status (Enabled/Disabled) - Sorted alphabetically by module name</p> <p>Example output: <pre><code>Listing Dolibarr modules...\n+--------------------+-----------+\n| Module             | Status    |\n+--------------------+-----------+\n| ACTIONCOMM         | Enabled   |\n| API                | Enabled   |\n| CATEGORIE          | Enabled   |\n| COMMANDE           | Enabled   |\n| FACTURE            | Enabled   |\n| PRODUCT            | Enabled   |\n| PROPAL             | Enabled   |\n| PROJET             | Enabled   |\n| SOCIETE            | Enabled   |\n| STOCK              | Enabled   |\n+--------------------+-----------+\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-configconfigure-company","title":"<code>task config:configure-company</code>","text":"<p>Description: Configure company information and settings</p> <p>Usage: <pre><code>task config:configure-company\n</code></pre></p> <p>Prerequisites: Dolibarr must be running</p> <p>What it configures: - Company name: \"Demo Company Inc.\" - Company email: \"contact@demo-company.com\" - Currency: \"EUR\"</p> <p>Customization: Edit the task in <code>.taskfile/config.yml</code> to set your own company information</p> <p>Example output: <pre><code>Configuring company information...\nCompany information configured successfully\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-configsetup-dev-environment","title":"<code>task config:setup-dev-environment</code>","text":"<p>Description: Complete development environment setup</p> <p>Usage: <pre><code>task config:setup-dev-environment\n</code></pre></p> <p>Prerequisites: Dolibarr must be running with tools (<code>task services:start-with-tools</code>)</p> <p>What it does: - Runs <code>task config:enable-modules</code> - Runs <code>task config:enable-api</code> - Runs <code>task config:configure-company</code> - Provides access URLs</p> <p>Example output: <pre><code>Setting up development environment...\nEnabling essential Dolibarr modules...\nEssential modules enabled successfully\nEnabling REST API module...\nAPI enabled. Generate API keys via Users &amp; Groups &gt; Users &gt; Edit User &gt; API Keys\nAPI Documentation available at http://localhost:18080/api/index.php/explorer\nConfiguring company information...\nCompany information configured successfully\nDevelopment environment setup completed!\nDolibarr http://localhost:18080\nAPI Explorer http://localhost:18080/api/index.php/explorer\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-configshow-config","title":"<code>task config:show-config</code>","text":"<p>Description: Display current Dolibarr configuration status</p> <p>Usage: <pre><code>task config:show-config\n</code></pre></p> <p>Prerequisites: Dolibarr must be running</p> <p>What it shows: - List of enabled modules - Company information settings - Current configuration values</p> <p>Example output: <pre><code>Current Dolibarr Configuration Status\n\nEnabled Modules\n+--------------------+\n| Module             |\n+--------------------+\n| ACTIONCOMM         |\n| API                |\n| CATEGORIE          |\n| COMMANDE           |\n| FACTURE            |\n| PRODUCT            |\n| PROPAL             |\n| PROJET             |\n| SOCIETE            |\n| STOCK              |\n+--------------------+\n\nCompany Information\n+-------------------------+------------------------+\n| Setting                 | Value                  |\n+-------------------------+------------------------+\n| MAIN_INFO_SOCIETE_MAIL  | contact@demo-company.com |\n| MAIN_INFO_SOCIETE_NOM   | Demo Company Inc.      |\n| MAIN_MONNAIE           | EUR                    |\n+-------------------------+------------------------+\n</code></pre></p>"},{"location":"reference/taskfile-commands/#backup-commands","title":"Backup Commands","text":""},{"location":"reference/taskfile-commands/#task-backupbackup","title":"<code>task backup:backup</code>","text":"<p>Description: Create complete backup (database + application data)</p> <p>Usage: <pre><code>task backup:backup\n</code></pre></p> <p>Prerequisites: Services must be running</p> <p>What it creates: - Database backup (compressed SQL dump) - Application data backup (documents, custom modules) - Timestamped backup directory</p> <p>Dependencies:  - Calls <code>task backup:backup-db</code> - Calls <code>task backup:backup-app</code></p> <p>Backup location: <code>./backups/YYYY-MM-DD_HH-MM-SS/</code></p> <p>Example output: <pre><code>\u2705 Database backup created\n\u2705 Application backup created\n\u2705 Complete backup created in ./backups/2024-01-15_14-30-45\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-backupbackup-db","title":"<code>task backup:backup-db</code>","text":"<p>Description: Create database backup only</p> <p>Usage: <pre><code>task backup:backup-db\n</code></pre></p> <p>Prerequisites: Database container must be running</p> <p>What it creates: - Compressed SQL dump of the database - Includes routines and triggers - Uses single-transaction for consistency</p> <p>File format: <code>database_YYYY-MM-DD_HH-MM-SS.sql.gz</code></p> <p>Example output: <pre><code>\u2705 Database backup created\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-backupbackup-app","title":"<code>task backup:backup-app</code>","text":"<p>Description: Create application data backup (documents, custom modules)</p> <p>Usage: <pre><code>task backup:backup-app\n</code></pre></p> <p>What it backs up: - <code>/var/www/documents</code> (uploaded files, generated documents) - <code>/var/www/html</code> (application files) - <code>./custom/</code> (custom modules)</p> <p>File format: <code>app_data_YYYY-MM-DD_HH-MM-SS.tar.gz</code></p> <p>Example output: <pre><code>\u2705 Application backup created\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-backuplist-backups","title":"<code>task backup:list-backups</code>","text":"<p>Description: List available backups</p> <p>Usage: <pre><code>task backup:list-backups\n</code></pre></p> <p>What it shows: - All backup directories with timestamps - File sizes and creation dates - Handles case when no backups exist</p> <p>Example output: <pre><code>\ud83d\udcc1 Available backups:\ndrwxr-xr-x  4 user  staff   128 Jan 15 14:30 2024-01-15_14-30-45\ndrwxr-xr-x  4 user  staff   128 Jan 14 10:15 2024-01-14_10-15-22\n-rw-r--r--  1 user  staff  1.2M Jan 15 14:30 database_2024-01-15_14-30-45.sql.gz\n-rw-r--r--  1 user  staff  5.8M Jan 15 14:30 app_data_2024-01-15_14-30-45.tar.gz\n</code></pre></p>"},{"location":"reference/taskfile-commands/#maintenance-commands","title":"Maintenance Commands","text":""},{"location":"reference/taskfile-commands/#task-maintenancereset-data","title":"<code>task maintenance:reset-data</code>","text":"<p>Description: Reset all data (DANGEROUS - removes all volumes and data)</p> <p>Usage: <pre><code>task maintenance:reset-data\n</code></pre></p> <p>\u26a0\ufe0f WARNING: This command will delete ALL Dolibarr data including database and documents</p> <p>What it does: - Prompts for confirmation - Stops all services - Removes all Docker volumes - Prunes Docker volumes - Clears application logs</p> <p>Use cases: - Start fresh installation - Clean development environment - Remove all test data</p> <p>Example output: <pre><code>This will delete ALL Dolibarr data including database and documents. Continue? [y/N]\n\u2705 All data reset. Use 'task services:start' to initialize fresh installation\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-maintenancereset-logs","title":"<code>task maintenance:reset-logs</code>","text":"<p>Description: Clear application logs</p> <p>Usage: <pre><code>task maintenance:reset-logs\n</code></pre></p> <p>What it does: - Removes all files from <code>logs/</code> directory - Recreates the logs directory structure</p> <p>Example output: <pre><code>\u2705 Application logs cleared\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-maintenancereset-custom","title":"<code>task maintenance:reset-custom</code>","text":"<p>Description: Clear custom modules (keeps directory structure)</p> <p>Usage: <pre><code>task maintenance:reset-custom\n</code></pre></p> <p>What it does: - Prompts for confirmation - Removes all <code>.php</code>, <code>.js</code>, and <code>.css</code> files from <code>custom/</code> directory - Removes empty directories - Preserves the <code>custom/</code> directory structure</p> <p>Example output: <pre><code>This will delete all custom Dolibarr modules. Continue? [y/N]\n\u2705 Custom modules cleared\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-maintenancecleanup","title":"<code>task maintenance:cleanup</code>","text":"<p>Description: Clean up Docker resources (images, containers, networks)</p> <p>Usage: <pre><code>task maintenance:cleanup\n</code></pre></p> <p>What it does: - Stops and removes containers - Removes locally built images - Removes volumes and orphaned containers - Prunes Docker system resources</p> <p>Use cases: - Free up disk space - Clean development environment - Remove unused Docker resources</p> <p>Example output: <pre><code>\u2705 Docker cleanup completed\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-maintenanceupdate","title":"<code>task maintenance:update</code>","text":"<p>Description: Update Dolibarr containers to latest versions</p> <p>Usage: <pre><code>task maintenance:update\n</code></pre></p> <p>What it does: - Pulls latest container images - Recreates containers with new images - Maintains data persistence</p> <p>Recommendation: Create a backup before updating</p> <p>Example output: <pre><code>\u2705 Containers updated and restarted\n</code></pre></p>"},{"location":"reference/taskfile-commands/#utility-commands","title":"Utility Commands","text":""},{"location":"reference/taskfile-commands/#task-utilitiesshell-app","title":"<code>task utilities:shell-app</code>","text":"<p>Description: Open shell in Dolibarr application container</p> <p>Usage: <pre><code>task utilities:shell-app\n</code></pre></p> <p>Prerequisites: Dolibarr container must be running</p> <p>What it does: - Opens an interactive bash shell inside the Dolibarr container - Useful for debugging, file inspection, and manual configuration</p> <p>Shell access: - Working directory: <code>/var/www/html</code> - User: <code>www-data</code> - Available tools: PHP CLI, composer, basic Linux utilities</p> <p>Example usage: <pre><code>task utilities:shell-app\n# Inside container:\nwww-data@container:/var/www/html$ ls -la\nwww-data@container:/var/www/html$ php -v\nwww-data@container:/var/www/html$ exit\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-utilitiesshell-db","title":"<code>task utilities:shell-db</code>","text":"<p>Description: Open MySQL shell in database container</p> <p>Usage: <pre><code>task utilities:shell-db\n</code></pre></p> <p>Prerequisites: Database container must be running (internal database only)</p> <p>What it does: - Opens MySQL command-line interface - Automatically connects to the Dolibarr database - Uses root credentials from environment variables</p> <p>Example usage: <pre><code>task utilities:shell-db\n# Inside MySQL shell:\nMariaDB [dolibarr]&gt; SHOW TABLES;\nMariaDB [dolibarr]&gt; SELECT * FROM llx_const WHERE name LIKE 'MAIN_MODULE_%';\nMariaDB [dolibarr]&gt; exit\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-utilitiespermissions","title":"<code>task utilities:permissions</code>","text":"<p>Description: Fix file permissions for Dolibarr</p> <p>Usage: <pre><code>task utilities:permissions\n</code></pre></p> <p>Prerequisites: Dolibarr container must be running</p> <p>What it does: - Sets correct ownership for web files (<code>www-data:www-data</code>) - Fixes permissions for <code>/var/www/html</code> directory - Fixes permissions for <code>/var/www/documents</code> directory</p> <p>When to use: - After manual file modifications - When encountering permission errors - After restoring from backup</p> <p>Example output: <pre><code>\u2705 File permissions fixed\n</code></pre></p>"},{"location":"reference/taskfile-commands/#task-utilitieshealth","title":"<code>task utilities:health</code>","text":"<p>Description: Check health of all services</p> <p>Usage: <pre><code>task utilities:health\n</code></pre></p> <p>What it checks: - Docker container status - Web interface accessibility - phpMyAdmin accessibility (if running)</p> <p>Example output: <pre><code>\ud83d\udd0d Checking service health...\nNAME                  IMAGE                          COMMAND                  SERVICE         STATUS          PORTS\ndolibarr-app         dolibarr/dolibarr:latest       \"docker-php-entrypoi\u2026\"   dolibarr        running         0.0.0.0:8080-&gt;80/tcp\ndolibarr-db          mariadb:10.11                  \"docker-entrypoint.s\u2026\"   dolibarr-db     running         0.0.0.0:3306-&gt;3306/tcp\n\n\ud83c\udf10 Testing web access...\nDolibarr web interface: 200\nphpMyAdmin: 200\n</code></pre></p> <p>HTTP Status Codes: - <code>200</code>: Service is accessible and working - <code>unreachable</code> or <code>not available</code>: Service is not accessible</p>"},{"location":"reference/taskfile-commands/#global-command-task","title":"Global Command: <code>task</code>","text":"<p>Description: Show all available tasks</p> <p>Usage: <pre><code>task\n# or\ntask --list\n</code></pre></p> <p>What it shows: - All available tasks grouped by namespace - Brief descriptions for each task</p> <p>Example output: <pre><code>task: Available tasks for this project:\n\n* backup:backup:                Create complete backup (database + application data)\n* backup:backup-app:            Create application data backup (documents, custom modules)\n* backup:backup-db:             Create database backup\n* backup:list-backups:          List available backups\n* config:configure-company:     Configure company information and settings\n* config:enable-api:            Enable REST API module and configure API access\n* config:enable-modules:        Enable essential Dolibarr modules for full functionality\n* config:list-modules:          List all available and enabled modules\n* config:setup-dev-environment: Complete development environment setup\n* config:show-config:           Display current Dolibarr configuration status\n* default:                      Show available tasks\n* maintenance:cleanup:          Clean up Docker resources (images, containers, networks)\n* maintenance:reset-custom:     Clear custom modules (keeps directory structure)\n* maintenance:reset-data:       Reset all data (DANGEROUS - removes all volumes and data)\n* maintenance:reset-logs:       Clear application logs\n* maintenance:update:           Update Dolibarr containers to latest versions\n* services:logs:                Show logs from all services\n* services:logs-app:            Show Dolibarr application logs\n* services:logs-db:             Show database logs\n* services:start:               Start Dolibarr with internal database\n* services:start-external:      Start Dolibarr with external database\n* services:start-with-tools:    Start Dolibarr with internal database and phpMyAdmin\n* services:status:              Show status of all services\n* services:stop:                Stop all Dolibarr services\n* setup:init:                   Initialize Dolibarr setup (create directories and set permissions)\n* utilities:health:             Check health of all services\n* utilities:permissions:        Fix file permissions for Dolibarr\n* utilities:shell-app:          Open shell in Dolibarr application container\n* utilities:shell-db:           Open MySQL shell in database container\n</code></pre></p>"},{"location":"reference/taskfile-commands/#common-workflows","title":"Common Workflows","text":""},{"location":"reference/taskfile-commands/#first-time-setup","title":"First Time Setup","text":"<pre><code># 1. Initialize directories\ntask setup:init\n\n# 2. Start with development tools\ntask services:start-with-tools\n\n# 3. Configure development environment\ntask config:setup-dev-environment\n\n# 4. Check health\ntask utilities:health\n</code></pre>"},{"location":"reference/taskfile-commands/#daily-development","title":"Daily Development","text":"<pre><code># Start development environment\ntask services:start-with-tools\n\n# View logs\ntask services:logs-app\n\n# Make changes...\n\n# Check configuration\ntask config:show-config\n\n# Stop when done\ntask services:stop\n</code></pre>"},{"location":"reference/taskfile-commands/#production-deployment","title":"Production Deployment","text":"<pre><code># Start production services (without tools)\ntask services:start\n\n# Configure for business\ntask config:configure-company\ntask config:enable-modules\n\n# Create backup\ntask backup:backup\n\n# Check health\ntask utilities:health\n</code></pre>"},{"location":"reference/taskfile-commands/#maintenance-tasks","title":"Maintenance Tasks","text":"<pre><code># Create backup before maintenance\ntask backup:backup\n\n# Update containers\ntask maintenance:update\n\n# Clean up if needed\ntask maintenance:cleanup\n\n# Verify after maintenance\ntask utilities:health\n</code></pre>"},{"location":"reference/troubleshooting/","title":"Troubleshooting Reference","text":"<p>This document provides comprehensive troubleshooting guidance for common issues encountered with the Dolibarr Docker setup.</p>"},{"location":"reference/troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Quick Diagnostics</li> <li>Service Issues</li> <li>Database Issues</li> <li>Application Issues</li> <li>Network and Connectivity Issues</li> <li>Performance Issues</li> <li>Configuration Issues</li> <li>File and Permission Issues</li> <li>Backup and Recovery Issues</li> <li>Development and Custom Module Issues</li> <li>Error Message Reference</li> <li>Log Analysis</li> </ul>"},{"location":"reference/troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":"<p>When encountering any issue, start with these quick diagnostic commands:</p>"},{"location":"reference/troubleshooting/#system-health-check","title":"System Health Check","text":"<pre><code># Overall health check\ntask utilities:health\n\n# Service status\ntask services:status\n\n# Check logs for errors\ntask services:logs | tail -50\n</code></pre>"},{"location":"reference/troubleshooting/#environment-validation","title":"Environment Validation","text":"<pre><code># Check required environment variables\necho \"DB_PASSWORD: ${DB_PASSWORD:+SET}\"\necho \"DOLIBARR_ADMIN_PASSWORD: ${DOLIBARR_ADMIN_PASSWORD:+SET}\"\n\n# Verify .env file exists and is readable\nls -la .env\ncat .env | grep -v PASSWORD\n</code></pre>"},{"location":"reference/troubleshooting/#container-status","title":"Container Status","text":"<pre><code># Check container states\ndocker-compose ps\n\n# Check resource usage\ndocker stats --no-stream\n\n# Check Docker daemon\ndocker version\ndocker info\n</code></pre>"},{"location":"reference/troubleshooting/#service-issues","title":"Service Issues","text":""},{"location":"reference/troubleshooting/#services-wont-start","title":"Services Won't Start","text":"<p>Symptoms: - <code>docker-compose up</code> fails - Services exit immediately - \"Service is unhealthy\" messages</p> <p>Diagnostic Commands: <pre><code># Check detailed service logs\ntask services:logs\n\n# Check specific service\ndocker-compose logs dolibarr\ndocker-compose logs dolibarr-db\n\n# Check container exit codes\ndocker-compose ps -a\n</code></pre></p> <p>Common Causes and Solutions:</p>"},{"location":"reference/troubleshooting/#1-port-conflicts","title":"1. Port Conflicts","text":"<p>Error: <code>Port already in use</code> or <code>bind: address already in use</code></p> <p>Solution: <pre><code># Check what's using the port\nlsof -i :8080\nnetstat -tlnp | grep :8080\n\n# Change ports in .env\nDOLIBARR_PORT=18080\nPHPMYADMIN_PORT=18081\nDB_EXTERNAL_PORT=13306\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-missing-environment-variables","title":"2. Missing Environment Variables","text":"<p>Error: <code>Error: DOLIBARR_ADMIN_PASSWORD is not set</code></p> <p>Solution: <pre><code># Check .env file\ncat .env\n\n# Copy from example if missing\ncp .env.example .env\n# Edit .env with your values\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-invalid-docker-compose-profile","title":"3. Invalid Docker Compose Profile","text":"<p>Error: No services start despite running <code>docker-compose up</code></p> <p>Solution: <pre><code># Use correct profile\ntask services:start                # Internal DB\ntask services:start-with-tools     # Internal DB + tools\ntask services:start-external       # External DB\n</code></pre></p>"},{"location":"reference/troubleshooting/#4-docker-daemon-issues","title":"4. Docker Daemon Issues","text":"<p>Error: <code>Cannot connect to Docker daemon</code></p> <p>Solution: <pre><code># Check Docker service\nsudo systemctl status docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Check user permissions (Linux)\nsudo usermod -aG docker $USER\n# Logout and login again\n</code></pre></p>"},{"location":"reference/troubleshooting/#service-keeps-restarting","title":"Service Keeps Restarting","text":"<p>Symptoms: - Service status shows \"Restarting\" - Container exits with non-zero code - Service becomes unhealthy</p> <p>Diagnostic Commands: <pre><code># Check restart count\ndocker-compose ps\n\n# Check service logs\ndocker-compose logs --tail=100 dolibarr\n\n# Check container resource limits\ndocker stats dolibarr-app\n</code></pre></p> <p>Common Causes and Solutions:</p>"},{"location":"reference/troubleshooting/#1-database-connection-issues","title":"1. Database Connection Issues","text":"<p>Solution: See Database Issues section</p>"},{"location":"reference/troubleshooting/#2-insufficient-resources","title":"2. Insufficient Resources","text":"<p>Error: <code>OOMKilled</code> or high memory usage</p> <p>Solution: <pre><code># Check available resources\nfree -h\ndf -h\n\n# Add resource limits\n# docker-compose.override.yml\nservices:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-configuration-errors","title":"3. Configuration Errors","text":"<p>Solution: <pre><code># Check configuration syntax\ndocker-compose config\n\n# Validate environment variables\ntask config:show-config\n</code></pre></p>"},{"location":"reference/troubleshooting/#database-issues","title":"Database Issues","text":""},{"location":"reference/troubleshooting/#database-wont-start","title":"Database Won't Start","text":"<p>Symptoms: - Database container exits immediately - Health check fails - Connection refused errors</p> <p>Diagnostic Commands: <pre><code># Check database logs\ntask services:logs-db\n\n# Check database health\ndocker-compose exec dolibarr-db mysqladmin ping\n\n# Check data directory\ndocker volume inspect dolibarr_dolibarr-db-data\n</code></pre></p> <p>Common Causes and Solutions:</p>"},{"location":"reference/troubleshooting/#1-corrupted-database-volume","title":"1. Corrupted Database Volume","text":"<p>Error: <code>InnoDB: Database page corruption</code> or similar</p> <p>Solution: <pre><code># Stop services\ntask services:stop\n\n# Remove corrupted volume (DANGEROUS - data loss)\ndocker volume rm dolibarr_dolibarr-db-data\n\n# Restore from backup\ntask backup:list-backups\n# Restore specific backup\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-incorrect-root-password","title":"2. Incorrect Root Password","text":"<p>Error: <code>Access denied for user 'root'@'localhost'</code></p> <p>Solution: <pre><code># Check DB_ROOT_PASSWORD in .env\ngrep DB_ROOT_PASSWORD .env\n\n# Reset database (DANGEROUS - data loss)\ntask maintenance:reset-data\ntask services:start\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-port-conflicts","title":"3. Port Conflicts","text":"<p>Error: <code>bind: address already in use</code></p> <p>Solution: <pre><code># Change database port\nDB_EXTERNAL_PORT=13306\n\n# Or don't expose database port\n# Comment out DB_EXTERNAL_PORT in .env\n</code></pre></p>"},{"location":"reference/troubleshooting/#database-connection-errors","title":"Database Connection Errors","text":"<p>Symptoms: - \"Connection refused\" errors - Dolibarr shows database error pages - Application can't connect to database</p> <p>Diagnostic Commands: <pre><code># Test database connectivity from application\ndocker-compose exec dolibarr nc -zv dolibarr-db 3306\n\n# Test from host (if port is exposed)\nnc -zv localhost ${DB_EXTERNAL_PORT:-3306}\n\n# Check database process\ndocker-compose exec dolibarr-db ps aux | grep mysql\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-database-not-ready","title":"1. Database Not Ready","text":"<p>Solution: <pre><code># Wait for database health check\ndocker-compose logs dolibarr-db | grep \"ready for connections\"\n\n# Restart application after database is ready\ndocker-compose restart dolibarr\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-network-issues","title":"2. Network Issues","text":"<p>Solution: <pre><code># Check network connectivity\ndocker network ls | grep dolibarr\ndocker-compose exec dolibarr ping dolibarr-db\n\n# Recreate network\ntask services:stop\ndocker-compose up -d\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-external-database-issues","title":"3. External Database Issues","text":"<p>Solution: <pre><code># Check external database configuration\ngrep DB_HOST .env\ngrep DB_PORT .env\n\n# Test external database connection\nmysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} -p${DB_PASSWORD} ${DB_NAME}\n</code></pre></p>"},{"location":"reference/troubleshooting/#database-performance-issues","title":"Database Performance Issues","text":"<p>Symptoms: - Slow queries - High CPU/memory usage on database - Application timeouts</p> <p>Diagnostic Commands: <pre><code># Check database performance\ndocker stats dolibarr-db\n\n# Check slow queries\ndocker-compose exec dolibarr-db mysql -u root -p${DB_ROOT_PASSWORD} -e \"SHOW PROCESSLIST;\"\n\n# Check database size\ntask utilities:shell-db\n&gt; SELECT table_schema, sum((data_length+index_length)/1024/1024) AS MB FROM information_schema.TABLES GROUP BY table_schema;\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-optimize-database","title":"1. Optimize Database","text":"<pre><code># Run database optimization\ntask utilities:shell-db\n&gt; OPTIMIZE TABLE llx_actioncomm;\n&gt; OPTIMIZE TABLE llx_societe;\n&gt; ANALYZE TABLE llx_facture;\n</code></pre>"},{"location":"reference/troubleshooting/#2-add-resource-limits","title":"2. Add Resource Limits","text":"<pre><code># docker-compose.override.yml\nservices:\n  dolibarr-db:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n          cpus: '1'\n</code></pre>"},{"location":"reference/troubleshooting/#3-database-maintenance","title":"3. Database Maintenance","text":"<pre><code># Regular backups\ntask backup:backup\n\n# Clean old data (be careful)\ntask utilities:shell-db\n&gt; DELETE FROM llx_actioncomm WHERE datep &lt; DATE_SUB(NOW(), INTERVAL 1 YEAR);\n</code></pre>"},{"location":"reference/troubleshooting/#application-issues","title":"Application Issues","text":""},{"location":"reference/troubleshooting/#dolibarr-wont-load","title":"Dolibarr Won't Load","text":"<p>Symptoms: - Web page won't load - HTTP 500 errors - Blank pages</p> <p>Diagnostic Commands: <pre><code># Check web server status\ncurl -I http://localhost:${DOLIBARR_PORT:-8080}\n\n# Check application logs\ntask services:logs-app\n\n# Check web server process\ndocker-compose exec dolibarr ps aux | grep apache\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-web-server-not-running","title":"1. Web Server Not Running","text":"<p>Solution: <pre><code># Restart application\ndocker-compose restart dolibarr\n\n# Check container health\ndocker-compose exec dolibarr service apache2 status\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-php-errors","title":"2. PHP Errors","text":"<p>Error: <code>Fatal error</code> or <code>Parse error</code> in logs</p> <p>Solution: <pre><code># Check PHP configuration\ndocker-compose exec dolibarr php -v\ndocker-compose exec dolibarr php -m\n\n# Check file permissions\ntask utilities:permissions\n\n# Check custom modules\nls -la custom/\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-configuration-issues","title":"3. Configuration Issues","text":"<p>Solution: <pre><code># Check Dolibarr configuration\ntask config:show-config\n\n# Reset configuration\ntask config:configure-company\ntask config:enable-modules\n</code></pre></p>"},{"location":"reference/troubleshooting/#login-issues","title":"Login Issues","text":"<p>Symptoms: - Can't log in with admin credentials - \"Invalid login\" errors - Locked out of admin account</p> <p>Diagnostic Commands: <pre><code># Check admin user in database\ntask utilities:shell-db\n&gt; SELECT login, pass_crypted FROM llx_user WHERE admin = 1;\n\n# Check configuration\ntask config:show-config\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-wrong-admin-credentials","title":"1. Wrong Admin Credentials","text":"<p>Solution: <pre><code># Check DOLIBARR_ADMIN_PASSWORD in .env\ngrep DOLIBARR_ADMIN_PASSWORD .env\n\n# Reset admin password via database\ntask utilities:shell-db\n&gt; UPDATE llx_user SET pass_crypted = MD5('newpassword') WHERE login = 'admin';\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-account-locked","title":"2. Account Locked","text":"<p>Solution: <pre><code># Unlock admin account\ntask utilities:shell-db\n&gt; UPDATE llx_user SET statut = 1 WHERE login = 'admin';\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-database-issues","title":"3. Database Issues","text":"<p>Solution: See Database Issues section</p>"},{"location":"reference/troubleshooting/#module-issues","title":"Module Issues","text":"<p>Symptoms: - Modules not working - Features missing - Module activation errors</p> <p>Diagnostic Commands: <pre><code># List enabled modules\ntask config:list-modules\n\n# Check module files\nls -la /var/www/html/htdocs/\n\n# Check custom modules\nls -la custom/\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-modules-not-enabled","title":"1. Modules Not Enabled","text":"<p>Solution: <pre><code># Enable essential modules\ntask config:enable-modules\n\n# Enable API\ntask config:enable-api\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-custom-module-issues","title":"2. Custom Module Issues","text":"<p>Solution: <pre><code># Check custom module permissions\ntask utilities:permissions\n\n# Check custom module structure\ndocker-compose exec dolibarr find /var/www/html/custom -type f -name \"*.php\"\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-module-configuration","title":"3. Module Configuration","text":"<p>Solution: <pre><code># Reset module configuration\ntask utilities:shell-db\n&gt; DELETE FROM llx_const WHERE name LIKE 'MAIN_MODULE_%';\n\n# Re-enable modules\ntask config:enable-modules\n</code></pre></p>"},{"location":"reference/troubleshooting/#network-and-connectivity-issues","title":"Network and Connectivity Issues","text":""},{"location":"reference/troubleshooting/#cant-access-web-interface","title":"Can't Access Web Interface","text":"<p>Symptoms: - Browser shows \"Connection refused\" - Timeout errors - Page not found</p> <p>Diagnostic Commands: <pre><code># Check if service is listening\nnetstat -tlnp | grep ${DOLIBARR_PORT:-8080}\n\n# Test local connection\ncurl http://localhost:${DOLIBARR_PORT:-8080}\n\n# Check firewall\nsudo ufw status\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-port-not-accessible","title":"1. Port Not Accessible","text":"<p>Solution: <pre><code># Check Docker port mapping\ndocker-compose ps\n\n# Check firewall rules\nsudo ufw allow ${DOLIBARR_PORT:-8080}\n\n# Check if binding to localhost only\n# Change in docker-compose.yml: \"0.0.0.0:8080:80\"\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-wrong-url","title":"2. Wrong URL","text":"<p>Solution: <pre><code># Check correct URL\necho \"Dolibarr URL: http://localhost:${DOLIBARR_PORT:-8080}\"\n\n# Update DOLIBARR_URL_ROOT if needed\nDOLIBARR_URL_ROOT=http://your-domain.com:${DOLIBARR_PORT}\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-reverse-proxy-issues","title":"3. Reverse Proxy Issues","text":"<p>Solution: <pre><code># Check reverse proxy configuration\n# Nginx example:\nproxy_pass http://localhost:8080;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\n</code></pre></p>"},{"location":"reference/troubleshooting/#api-connection-issues","title":"API Connection Issues","text":"<p>Symptoms: - API calls fail - \"API not enabled\" errors - Authentication failures</p> <p>Diagnostic Commands: <pre><code># Check API module\ntask config:list-modules | grep API\n\n# Test API endpoint\ncurl http://localhost:${DOLIBARR_PORT:-8080}/api/index.php/explorer\n\n# Check API configuration\ntask utilities:shell-db\n&gt; SELECT name, value FROM llx_const WHERE name LIKE '%API%';\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-api-not-enabled","title":"1. API Not Enabled","text":"<p>Solution: <pre><code># Enable API module\ntask config:enable-api\n\n# Verify API is enabled\ncurl http://localhost:${DOLIBARR_PORT:-8080}/api/index.php/explorer\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-api-key-issues","title":"2. API Key Issues","text":"<p>Solution: <pre><code># Generate API key via web interface:\n# Users &amp; Groups &gt; Users &gt; Edit User &gt; API Keys\n\n# Or via database (not recommended):\ntask utilities:shell-db\n&gt; INSERT INTO llx_user_api_keys (fk_user, api_key, datec) VALUES (1, 'your-api-key', NOW());\n</code></pre></p>"},{"location":"reference/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"reference/troubleshooting/#slow-performance","title":"Slow Performance","text":"<p>Symptoms: - Pages load slowly - Database queries timeout - High resource usage</p> <p>Diagnostic Commands: <pre><code># Check resource usage\ndocker stats\n\n# Check system resources\ntop\nhtop\nfree -h\ndf -h\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-resource-limits","title":"1. Resource Limits","text":"<p>Solution: <pre><code># Add resource limits\n# docker-compose.override.yml\nservices:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 1G\n          cpus: '1'\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-database-optimization","title":"2. Database Optimization","text":"<p>Solution: See Database Performance Issues section</p>"},{"location":"reference/troubleshooting/#3-php-configuration","title":"3. PHP Configuration","text":"<p>Solution: <pre><code># docker-compose.override.yml\nservices:\n  dolibarr:\n    environment:\n      - PHP_MEMORY_LIMIT=512M\n      - PHP_MAX_EXECUTION_TIME=300\n</code></pre></p>"},{"location":"reference/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: - \"Out of memory\" errors - Container killed (OOMKilled) - System becomes unresponsive</p> <p>Diagnostic Commands: <pre><code># Check memory usage\nfree -h\ndocker stats --no-stream\n\n# Check container memory limits\ndocker inspect dolibarr-app | grep -i memory\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-increase-memory-limits","title":"1. Increase Memory Limits","text":"<p>Solution: <pre><code># docker-compose.override.yml\nservices:\n  dolibarr:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n        reservations:\n          memory: 512M\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-optimize-php-memory","title":"2. Optimize PHP Memory","text":"<p>Solution: <pre><code>services:\n  dolibarr:\n    environment:\n      - PHP_MEMORY_LIMIT=1024M\n</code></pre></p>"},{"location":"reference/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"reference/troubleshooting/#environment-variable-issues","title":"Environment Variable Issues","text":"<p>Symptoms: - Configuration not taking effect - Default values being used - Service configuration errors</p> <p>Diagnostic Commands: <pre><code># Check environment variables\ndocker-compose exec dolibarr env | grep DOLI\n\n# Check .env file\ncat .env | grep -v PASSWORD\n\n# Validate configuration\ndocker-compose config\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-missing-env-file","title":"1. Missing .env File","text":"<p>Solution: <pre><code># Copy example file\ncp .env.example .env\n\n# Edit with your values\nnano .env\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-invalid-variable-format","title":"2. Invalid Variable Format","text":"<p>Solution: <pre><code># Check for spaces around = sign (invalid)\nDB_PASSWORD = mypassword  # Wrong\n\n# Correct format\nDB_PASSWORD=mypassword    # Correct\n\n# Check for special characters\nDB_PASSWORD=\"pass with spaces\"  # Use quotes if needed\n</code></pre></p>"},{"location":"reference/troubleshooting/#3-profile-specific-variables","title":"3. Profile-Specific Variables","text":"<p>Solution: <pre><code># Check which profile you're using\ndocker-compose --profile internal-db config\n\n# Ensure variables match profile\n# Internal DB: need DB_ROOT_PASSWORD\n# External DB: need DB_HOST\n</code></pre></p>"},{"location":"reference/troubleshooting/#docker-compose-issues","title":"Docker Compose Issues","text":"<p>Symptoms: - <code>docker-compose</code> command not found - Version compatibility errors - YAML syntax errors</p> <p>Diagnostic Commands: <pre><code># Check Docker Compose version\ndocker-compose version\n\n# Validate YAML syntax\ndocker-compose config\n\n# Check file permissions\nls -la docker-compose.yml\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-docker-compose-not-installed","title":"1. Docker Compose Not Installed","text":"<p>Solution: <pre><code># Install Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Or use Docker Compose V2\ndocker compose version\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-yaml-syntax-errors","title":"2. YAML Syntax Errors","text":"<p>Solution: <pre><code># Validate YAML\ndocker-compose config\n\n# Check indentation (use spaces, not tabs)\n# Check for trailing spaces\n</code></pre></p>"},{"location":"reference/troubleshooting/#file-and-permission-issues","title":"File and Permission Issues","text":""},{"location":"reference/troubleshooting/#permission-denied-errors","title":"Permission Denied Errors","text":"<p>Symptoms: - \"Permission denied\" errors - Cannot write files - Upload failures</p> <p>Diagnostic Commands: <pre><code># Check file permissions\ndocker-compose exec dolibarr ls -la /var/www/html\ndocker-compose exec dolibarr ls -la /var/www/documents\n\n# Check process user\ndocker-compose exec dolibarr whoami\ndocker-compose exec dolibarr id\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-fix-application-permissions","title":"1. Fix Application Permissions","text":"<p>Solution: <pre><code># Fix permissions using task\ntask utilities:permissions\n\n# Or manually\ndocker-compose exec dolibarr chown -R www-data:www-data /var/www/html\ndocker-compose exec dolibarr chown -R www-data:www-data /var/www/documents\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-host-directory-permissions","title":"2. Host Directory Permissions","text":"<p>Solution: <pre><code># Fix host directory permissions\nsudo chown -R $(id -u):$(id -g) custom/\nsudo chown -R $(id -u):$(id -g) logs/\n\n# Or set proper permissions\nchmod -R 755 custom/\nchmod -R 755 logs/\n</code></pre></p>"},{"location":"reference/troubleshooting/#file-upload-issues","title":"File Upload Issues","text":"<p>Symptoms: - Files won't upload - Upload size limits exceeded - Temporary directory errors</p> <p>Diagnostic Commands: <pre><code># Check PHP upload settings\ndocker-compose exec dolibarr php -i | grep upload\n\n# Check disk space\ndf -h\ndocker system df -v\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-php-upload-limits","title":"1. PHP Upload Limits","text":"<p>Solution: <pre><code># docker-compose.override.yml\nservices:\n  dolibarr:\n    environment:\n      - PHP_UPLOAD_MAX_FILESIZE=100M\n      - PHP_POST_MAX_SIZE=100M\n      - PHP_MAX_FILE_UPLOADS=20\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-disk-space-issues","title":"2. Disk Space Issues","text":"<p>Solution: <pre><code># Check available space\ndf -h\n\n# Clean up Docker resources\ntask maintenance:cleanup\ndocker system prune -a\n</code></pre></p>"},{"location":"reference/troubleshooting/#backup-and-recovery-issues","title":"Backup and Recovery Issues","text":""},{"location":"reference/troubleshooting/#backup-failures","title":"Backup Failures","text":"<p>Symptoms: - Backup command fails - Empty backup files - Permission errors during backup</p> <p>Diagnostic Commands: <pre><code># Check backup directory\nls -la backups/\n\n# Check backup process\ntask backup:backup\n\n# Check disk space\ndf -h\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-permission-issues","title":"1. Permission Issues","text":"<p>Solution: <pre><code># Fix backup directory permissions\nchmod -R 755 backups/\n\n# Check if backup directory exists\nmkdir -p backups/\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-database-backup-issues","title":"2. Database Backup Issues","text":"<p>Solution: <pre><code># Test database connectivity\ntask utilities:shell-db\n\n# Check database size\ntask utilities:shell-db\n&gt; SELECT SUM(data_length + index_length) / 1024 / 1024 AS 'DB Size in MB' FROM information_schema.tables WHERE table_schema = 'dolibarr';\n</code></pre></p>"},{"location":"reference/troubleshooting/#recovery-issues","title":"Recovery Issues","text":"<p>Symptoms: - Cannot restore from backup - Restore process hangs - Data corruption after restore</p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-verify-backup-integrity","title":"1. Verify Backup Integrity","text":"<p>Solution: <pre><code># Check backup file\nfile backups/*/database_*.sql.gz\ngunzip -t backups/*/database_*.sql.gz\n\n# Check backup content\ngunzip -c backups/*/database_*.sql.gz | head -20\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-complete-recovery-process","title":"2. Complete Recovery Process","text":"<p>Solution: <pre><code># Stop services\ntask services:stop\n\n# Reset data (CAREFUL!)\ntask maintenance:reset-data\n\n# Start fresh\ntask services:start\n\n# Restore from backup\n# (Implement restore task if needed)\n</code></pre></p>"},{"location":"reference/troubleshooting/#development-and-custom-module-issues","title":"Development and Custom Module Issues","text":""},{"location":"reference/troubleshooting/#custom-module-problems","title":"Custom Module Problems","text":"<p>Symptoms: - Custom modules not loading - Module activation errors - PHP errors in custom code</p> <p>Diagnostic Commands: <pre><code># Check custom directory structure\nls -la custom/\nfind custom/ -name \"*.php\" | head -10\n\n# Check PHP syntax\ndocker-compose exec dolibarr php -l /var/www/html/custom/mymodule/mymodule.php\n</code></pre></p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-module-structure-issues","title":"1. Module Structure Issues","text":"<p>Solution: <pre><code># Verify correct module structure\ncustom/mymodule/\n\u251c\u2500\u2500 core/\n\u251c\u2500\u2500 admin/\n\u251c\u2500\u2500 class/\n\u251c\u2500\u2500 mymodule.php\n\u2514\u2500\u2500 README.md\n\n# Check file permissions\ntask utilities:permissions\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-php-syntax-errors","title":"2. PHP Syntax Errors","text":"<p>Solution: <pre><code># Check all PHP files\nfind custom/ -name \"*.php\" -exec docker-compose exec -T dolibarr php -l {} \\;\n\n# Fix syntax errors in custom code\n</code></pre></p>"},{"location":"reference/troubleshooting/#development-environment-issues","title":"Development Environment Issues","text":"<p>Symptoms: - phpMyAdmin not accessible - Development tools not working - Debug mode not enabled</p> <p>Solutions:</p>"},{"location":"reference/troubleshooting/#1-phpmyadmin-issues","title":"1. phpMyAdmin Issues","text":"<p>Solution: <pre><code># Ensure tools profile is active\ntask services:start-with-tools\n\n# Check phpMyAdmin URL\necho \"phpMyAdmin: http://localhost:${PHPMYADMIN_PORT:-8081}\"\n\n# Check phpMyAdmin logs\ndocker-compose logs phpmyadmin\n</code></pre></p>"},{"location":"reference/troubleshooting/#2-debug-mode","title":"2. Debug Mode","text":"<p>Solution: <pre><code># Enable debug mode\ntask utilities:shell-app\n# Edit configuration to enable debug\n</code></pre></p>"},{"location":"reference/troubleshooting/#error-message-reference","title":"Error Message Reference","text":""},{"location":"reference/troubleshooting/#common-error-messages-and-solutions","title":"Common Error Messages and Solutions","text":""},{"location":"reference/troubleshooting/#database-errors","title":"Database Errors","text":"<p>Error: <code>Connection refused</code> Cause: Database not running or network issues Solution:  <pre><code>task services:start\ndocker-compose logs dolibarr-db\n</code></pre></p> <p>Error: <code>Access denied for user</code> Cause: Wrong database credentials Solution: Check <code>DB_PASSWORD</code> and <code>DB_ROOT_PASSWORD</code> in <code>.env</code></p> <p>Error: <code>Table 'dolibarr.llx_const' doesn't exist</code> Cause: Database not initialized Solution:  <pre><code>task maintenance:reset-data\ntask services:start\ntask config:setup-dev-environment\n</code></pre></p>"},{"location":"reference/troubleshooting/#application-errors","title":"Application Errors","text":"<p>Error: <code>Fatal error: Maximum execution time exceeded</code> Cause: PHP timeout Solution: Increase <code>PHP_MAX_EXECUTION_TIME</code></p> <p>Error: <code>Call to undefined function</code> Cause: Missing PHP extension Solution: Check container image or custom Dockerfile</p>"},{"location":"reference/troubleshooting/#docker-errors","title":"Docker Errors","text":"<p>Error: <code>port is already allocated</code> Cause: Port conflict Solution: Change port in <code>.env</code> file</p> <p>Error: <code>no such file or directory</code> Cause: Missing file or incorrect path Solution: Check file paths and permissions</p>"},{"location":"reference/troubleshooting/#log-analysis","title":"Log Analysis","text":""},{"location":"reference/troubleshooting/#log-locations-and-commands","title":"Log Locations and Commands","text":""},{"location":"reference/troubleshooting/#application-logs","title":"Application Logs","text":"<pre><code># Real-time application logs\ntask services:logs-app\n\n# Search for specific errors\ntask services:logs-app | grep ERROR\n\n# Check log files on host\nls -la logs/\ntail -f logs/dolibarr.log\n</code></pre>"},{"location":"reference/troubleshooting/#database-logs","title":"Database Logs","text":"<pre><code># Database logs\ntask services:logs-db\n\n# Query logs (if enabled)\ndocker-compose exec dolibarr-db tail -f /var/lib/mysql/general.log\n</code></pre>"},{"location":"reference/troubleshooting/#system-logs","title":"System Logs","text":"<pre><code># Docker daemon logs\nsudo journalctl -u docker.service\n\n# Container logs\ndocker logs dolibarr-app\ndocker logs dolibarr-db\n</code></pre>"},{"location":"reference/troubleshooting/#log-analysis-techniques","title":"Log Analysis Techniques","text":""},{"location":"reference/troubleshooting/#finding-errors","title":"Finding Errors","text":"<pre><code># Search for error patterns\ngrep -i \"error\\|exception\\|fatal\\|warning\" logs/*\n\n# Check for specific time period\ngrep \"2024-01-15\" logs/dolibarr.log | grep ERROR\n</code></pre>"},{"location":"reference/troubleshooting/#performance-analysis","title":"Performance Analysis","text":"<pre><code># Find slow queries\ngrep \"slow query\" logs/*\n\n# Check memory usage patterns\ngrep \"memory\" logs/* | head -20\n</code></pre>"},{"location":"reference/troubleshooting/#getting-additional-help","title":"Getting Additional Help","text":""},{"location":"reference/troubleshooting/#diagnostic-information-collection","title":"Diagnostic Information Collection","text":"<p>When reporting issues, collect this diagnostic information:</p> <pre><code># System information\nuname -a\ndocker version\ndocker-compose version\n\n# Service status\ntask services:status\ntask utilities:health\n\n# Configuration (without passwords)\ncat .env | grep -v PASSWORD\ndocker-compose config\n\n# Recent logs\ntask services:logs | tail -100\n\n# Resource usage\ndocker stats --no-stream\nfree -h\ndf -h\n</code></pre>"},{"location":"reference/troubleshooting/#support-resources","title":"Support Resources","text":"<ol> <li>Dolibarr Documentation: Official Dolibarr Wiki</li> <li>Docker Documentation: Docker Compose Guide</li> <li>Community Forums: Dolibarr Forum</li> <li>GitHub Issues: Project repository issues section</li> </ol>"},{"location":"reference/troubleshooting/#before-reporting-issues","title":"Before Reporting Issues","text":"<ol> <li>\u2705 Check this troubleshooting guide</li> <li>\u2705 Search existing issues in the repository</li> <li>\u2705 Collect diagnostic information</li> <li>\u2705 Try basic troubleshooting steps</li> <li>\u2705 Document steps to reproduce the issue</li> </ol> <p>Remember to never include passwords or sensitive information when reporting issues!</p>"},{"location":"reference/uri/","title":"Tools &amp; Resources URI Reference","text":"<p>Comprehensive list of all tools, technologies, and resources used in this Dolibarr Docker repository with their licenses and official links.</p>"},{"location":"reference/uri/#core-technologies","title":"Core Technologies","text":"Tool License Official Site Repository Container/Package Documentation Dolibarr ERP/CRM GPL-3.0-or-later dolibarr.org GitHub Docker Hub Wiki Docker Apache-2.0 docker.com GitHub - Docs Docker Compose Apache-2.0 docs.docker.com GitHub - Reference MariaDB GPL-2.0 mariadb.org GitHub Docker Hub Docs Task Runner MIT taskfile.dev GitHub Installation Usage"},{"location":"reference/uri/#development-tools","title":"Development Tools","text":"Tool License Official Site Repository Container/Package Documentation phpMyAdmin GPL-2.0 phpmyadmin.net GitHub Docker Hub Docs Alpine Linux MIT alpinelinux.org GitHub Docker Hub Wiki"},{"location":"reference/uri/#programming-languages-frameworks","title":"Programming Languages &amp; Frameworks","text":"Tool License Official Site Repository Package Manager Documentation PHP PHP-3.01 php.net GitHub - Docs JavaScript/Node.js MIT nodejs.org GitHub npm Docs Python Python-2.0 python.org GitHub PyPI Docs Bash GPL-3.0 gnu.org/software/bash Savannah - Manual"},{"location":"reference/uri/#http-clients-api-tools","title":"HTTP Clients &amp; API Tools","text":"Tool License Official Site Repository Package Documentation cURL MIT curl.se GitHub - Docs Axios MIT axios-http.com GitHub npm Docs Python Requests Apache-2.0 requests.readthedocs.io GitHub PyPI Docs"},{"location":"reference/uri/#documentation-markup","title":"Documentation &amp; Markup","text":"Tool License Official Site Repository Package Documentation Markdown BSD-style daringfireball.net GitHub GFM - Spec Mermaid MIT mermaid.js.org GitHub npm Live Editor YAML MIT yaml.org GitHub - Specification"},{"location":"reference/uri/#package-managers-libraries","title":"Package Managers &amp; Libraries","text":"Tool License Official Site Repository Installation Documentation npm Artistic-2.0 npmjs.com GitHub Built-in with Node.js Docs pip MIT pip.pypa.io GitHub Built-in with Python User Guide Composer MIT getcomposer.org GitHub Download Docs Guzzle HTTP MIT docs.guzzlephp.org GitHub Packagist Docs"},{"location":"reference/uri/#operating-systems-platforms","title":"Operating Systems &amp; Platforms","text":"Tool License Official Site Repository Container Documentation Ubuntu Various (GPL) ubuntu.com Launchpad Docker Hub Docs Debian Various (GPL) debian.org Salsa Docker Hub Docs Alpine Linux MIT alpinelinux.org GitLab Docker Hub Wiki"},{"location":"reference/uri/#cloud-platforms-deployment-examples","title":"Cloud Platforms (Deployment Examples)","text":"Platform Type Official Site Services Used Documentation Amazon Web Services Commercial aws.amazon.com ECS, RDS, Secrets Manager Docs Google Cloud Platform Commercial cloud.google.com Cloud Run, Cloud SQL Docs Kubernetes Apache-2.0 kubernetes.io Container Orchestration Docs"},{"location":"reference/uri/#development-deployment-tools","title":"Development &amp; Deployment Tools","text":"Tool License Official Site Repository Usage Documentation Git GPL-2.0 git-scm.com GitHub Version Control Reference GitHub Commercial github.com - Code Hosting, CI/CD Docs Nginx BSD-2-Clause nginx.org GitHub Reverse Proxy Docs HAProxy GPL-2.0 haproxy.org GitHub Load Balancer Docs"},{"location":"reference/uri/#monitoring-observability","title":"Monitoring &amp; Observability","text":"Tool License Official Site Repository Usage Documentation Prometheus Apache-2.0 prometheus.io GitHub Monitoring Docs Grafana AGPL-3.0 grafana.com GitHub Dashboards Docs"},{"location":"reference/uri/#api-testing-development","title":"API Testing &amp; Development","text":"Tool License Official Site Repository Usage Documentation Postman Commercial postman.com - API Testing Learning Center HTTPie BSD-3-Clause httpie.io GitHub CLI HTTP Client Docs jq MIT jqlang.github.io GitHub JSON Processor Manual"},{"location":"reference/uri/#network-storage","title":"Network &amp; Storage","text":"Tool License Official Site Repository Usage Documentation NFS GPL-2.0 sourceforge.net Linux NFS Network File System Linux NFS Docs GlusterFS GPL-2.0 gluster.org GitHub Distributed Storage Docs"},{"location":"reference/uri/#license-summary","title":"License Summary","text":""},{"location":"reference/uri/#open-source-licenses","title":"Open Source Licenses","text":"License Tools Apache-2.0 Docker, Docker Compose, Prometheus, Python Requests, Kubernetes GPL-2.0 MariaDB, phpMyAdmin, HAProxy, NFS, GlusterFS, Git GPL-3.0 Dolibarr ERP/CRM, Bash MIT Task Runner, Alpine Linux, Node.js, Axios, Mermaid, YAML, pip, Composer, Guzzle, jq, cURL PHP-3.01 PHP Python-2.0 Python BSD-style Markdown, Nginx BSD-3-Clause HTTPie AGPL-3.0 Grafana Artistic-2.0 npm"},{"location":"reference/uri/#commercialproprietary","title":"Commercial/Proprietary","text":"Service Provider Usage AWS Services Amazon ECS, RDS, Secrets Manager Google Cloud Platform Google Cloud Run, Cloud SQL GitHub Microsoft Code Hosting, CI/CD Actions Postman Postman Inc. API Testing"},{"location":"reference/uri/#support-community","title":"Support &amp; Community","text":""},{"location":"reference/uri/#official-communities","title":"Official Communities","text":"Community Link Description Dolibarr Forum dolibarr.org/forum Official support forum Docker Community docker.com/community Docker community resources Task Community GitHub Discussions Task runner community"},{"location":"reference/uri/#stack-overflow-tags","title":"Stack Overflow Tags","text":"Technology Stack Overflow Tag Link Dolibarr <code>dolibarr</code> stackoverflow.com Docker <code>docker</code> stackoverflow.com Docker Compose <code>docker-compose</code> stackoverflow.com MariaDB <code>mariadb</code> stackoverflow.com Taskfile <code>taskfile</code> stackoverflow.com"},{"location":"reference/uri/#security-resources","title":"Security Resources","text":""},{"location":"reference/uri/#vulnerability-databases","title":"Vulnerability Databases","text":"Resource Link Description National Vulnerability Database nvd.nist.gov Official US government repository CVE Details cvedetails.com Vulnerability statistics"},{"location":"reference/uri/#security-scanners","title":"Security Scanners","text":"Tool Link Usage Docker Security Scanning Docker Hub Container image scanning Snyk snyk.io Open source vulnerability scanning Trivy GitHub Container security scanner"},{"location":"reference/uri/#compliance-standards","title":"Compliance &amp; Standards","text":""},{"location":"reference/uri/#container-standards","title":"Container Standards","text":"Standard Link Description Docker Official Images docker.com Best practices for container images OCI Specification opencontainers.org Open Container Initiative standards"},{"location":"reference/uri/#api-standards","title":"API Standards","text":"Standard Link Description OpenAPI Specification spec.openapis.org REST API specification Swagger swagger.io API development tools REST API Standards restfulapi.net REST API design principles HTTP/1.1 Specification RFC 7231 HTTP protocol specification <p>Last Updated: 2024-08-24 Maintained with: Dolibarr Docker Project License Compliance: All tools used in accordance with their respective licenses</p>"}]}